module greet;
    initial begin
        $display("Hello World!");
    end
endmodule

class HDLBackend:
    def emit_module(self, name, ports, signals, body): pass
    def emit_signal(self, name, width, direction): pass
    def emit_assignment(self, target, expr): pass
    def emit_instance(self, module, name, connections): pass

class VHDLBackend(HDLBackend):
    def emit_module(self, name, ports, signals, body):
        ports_str = ";\n        ".join([self.emit_signal(*p) for p in ports]) if ports else ""
        signals_str = "\n    ".join([self.emit_signal(*s) for s in signals]) if signals else ""
        body_str = "\n    ".join(body)
        return f"""entity {name} is
    port (
        {ports_str}
    );
end {name};

architecture Behavioral of {name} is
    {signals_str}
begin
    {body_str}
end Behavioral;"""

    def emit_signal(self, name, width, direction):
        if width == 1:
            return f"{name} : {direction} std_logic"
        else:
            return f"{name} : {direction} std_logic_vector({width-1} downto 0)"

    def emit_assignment(self, target, expr):
        return f"{target} <= {expr};"

    def emit_instance(self, module, name, connections):
        conns = ", ".join([f"{k} => {v}" for k, v in connections.items()])
        return f"{name}: entity work.{module} port map ({conns});"

class SystemVerilogBackend(HDLBackend):
    def emit_module(self, name, ports, signals, body):
        ports_str = ",\n    ".join([self.emit_signal(*p) for p in ports]) if ports else ""
        signals_str = "\n    ".join([self.emit_signal(*s) for s in signals]) if signals else ""
        body_str = "\n    ".join(body)
        return f"""module {name}(
    {ports_str}
);
    {signals_str}
    {body_str}
endmodule"""

    def emit_signal(self, name, width, direction):
        # SystemVerilog uses 'logic' for most signals
        dir_map = {"in": "input", "out": "output", "inout": "inout"}
        sv_dir = dir_map.get(direction, direction)
        if width == 1:
            return f"{sv_dir} logic {name}"
        else:
            return f"{sv_dir} logic [{width-1}:0] {name}"

    def emit_assignment(self, target, expr):
        return f"assign {target} = {expr};"

    def emit_instance(self, module, name, connections):
        conns = ", ".join([f".{k}({v})" for k, v in connections.items()])
        return f"{module} {name} ({conns});"

def test_vhdl_greet():
    backend = VHDLBackend()
    vhdl_code = backend.emit_module(
        "greet",
        ports=[],
        signals=[],
        body=['report "Hello World!";']
    )
    with open("hdl_projects/greet.vhd", "w") as f:
        f.write(vhdl_code)

def test_sv_complex():
    backend = SystemVerilogBackend()
    sv_code = backend.emit_module(
        "alu",
        ports=[
            ("a", 8, "in"),
            ("b", 8, "in"),
            ("op", 3, "in"),
            ("result", 8, "out"),
            ("carry", 1, "out")
        ],
        signals=[
            ("tmp", 8, "")
        ],
        body=[
            "always_comb begin",
            "    case(op)",
            "        3'b000: result = a + b;",
            "        3'b001: result = a - b;",
            "        3'b010: result = a & b;",
            "        3'b011: result = a | b;",
            "        3'b100: result = a ^ b;",
            "        default: result = 8'b0;",
            "    endcase",
            "    carry = (op == 3'b000) ? (a + b > 8'hFF) : 1'b0;",
            "end"
        ]
    )
    with open("hdl_projects/alu.sv", "w") as f:
        f.write(sv_code)

import os

base_dir = r"C:\Users\great\OneDrive\Documents\AKANDES_LANGUAGE_INSTALLER\workspace"
for root, dirs, files in os.walk(base_dir):
    for file in files:
        print(os.path.join(root, file))

if __name__ == "__main__":
    test_vhdl_greet()
    test_sv_complex()

# To run the test, simply call test_vhdl_greet() for VHDL
# This will generate a VHDL file for the greet module in the hdl_projects folder.

# To run the SystemVerilog test, call test_sv_complex()
# This will generate a SystemVerilog file for a simple ALU in the hdl_projects folder.

