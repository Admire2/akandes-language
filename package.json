{
  "name": "akandes-language",
  "displayName": "Akandes Language",
  "description": "Front-end HDL for adaptive semiconductor systems with AkandeAI integration.",
  "version": "0.0.1",
  "publisher": "Admire2",
  "repository": {
    "type": "git",
    "url": "https://github.com/Admire2/akandes-language"
  },
  "engines": {
    "vscode": "^1.102.0"
  },
  "categories": [
    "Programming Languages"
  ],
  "activationEvents": [
    "onCommand:AkandeChips.helloWorld",
    "onCommand:AkandeChips.selectBackend",
    "onCommand:AkandeChips.runGHDLSim"
  ],
  "contributes": {
  "commands": [
      {
        "command": "AkandeChips.helloWorld",
        "title": "Hello World"
      }
      ,
      {
        "command": "AkandeChips.selectBackend",
        "title": "Select Backend and Generate HDL"
      }
      ,
      {
        "command": "AkandeChips.runGHDLSim",
        "title": "Run GHDL Simulation on VHDL Files"
      }
    ],
    "languages": [
      {
        "id": "akandechips",
        "aliases": ["AkandeChips", "akandechips"],
        "extensions": [".akande", ".chips", ".ak", ".v", ".sv", ".vhd", ".vhd1", ".project"],
        "configuration": "./language-configuration.json"
      },
      {
        "id": "akandes",
        "aliases": ["Akandes", "ak"],
        "extensions": [".ak"],
        "configuration": "./language-configuration.json"
      }
    ],
    "grammars": [
      {
        "language": "akandechips",
        "scopeName": "source.akandechips",
        "path": "./syntaxes/akandechips.tmLanguage.json"
      }
    ],
    "snippets": [
      {
        "language": "akandechips",
        "path": "./snippets/akandechips.code-snippets"
      }
    ],
    "configuration": {
      "type": "object",
      "title": "AkandeAI Settings",
      "properties": {
        "akandeAI.provider": {
          "type": "string",
          "default": "all",
          "enum": ["all", "openai", "anthropic", "gemini", "copilot"],
          "description": "Choose the AI provider for AkandeAI code completion: all, OpenAI, Anthropic Claude, Google Gemini, or GitHub Copilot."
        }
      }
    }
  },
  "scripts": {
    "vscode:prepublish": "npm run package",
    "compile": "webpack",
    "watch": "webpack --watch",
    "package": "webpack --mode production --devtool hidden-source-map",
    "compile-tests": "tsc -p . --outDir out",
    "watch-tests": "tsc -p . -w --outDir out",
    "pretest": "npm run compile-tests && npm run compile && npm run lint",
    "lint": "eslint src",
    "test": "vscode-test",
    "start": "node resume.js"
  },
  "devDependencies": {
    "@types/mocha": "^10.0.10",
    "@types/node": "20.x",
    "@types/vscode": "^1.102.0",
    "@typescript-eslint/eslint-plugin": "^8.31.1",
    "@typescript-eslint/parser": "^8.31.1",
    "@vscode/test-cli": "^0.0.11",
    "@vscode/test-electron": "^2.5.2",
    "eslint": "^9.25.1",
    "ts-loader": "^9.5.2",
    "typescript": "^5.8.3",
    "webpack": "^5.99.7",
    "webpack-cli": "^6.0.1"
  },
  "dependencies": {
    "pygls": "^1.0.0",
    "vscode-languageclient": "^9.0.1",
    "electron-store": "^8.1.0"
  }
}
