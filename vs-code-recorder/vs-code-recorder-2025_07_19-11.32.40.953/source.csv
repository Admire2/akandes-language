Sequence,Time,File,RangeOffset,RangeLength,Text,Language,Type
1,7,"akandes_docs/beginner_tutorial.md",0,0,"# AkandeChips Beginner Textbook\r\nWelcome to the AkandeChips Beginner Textbook! This book is designed for American students and anyone new to programming or hardware, with a focus on building the US chips workforce. Every topic is self-explanatory, with code, answers, and outputs visible in Markdown, DOC, and PDF.\r\n---\r\n\r\n- What is AkandeChips?\r\n\r\nAkandeChips is a modern programming language for both hardware and software co-design. Inspired by Python and hardware description languages (HDLs), it is easy to learn, highly readable, and powerful for beginners and professionals alike.\r\n\r\n**Key Features:**\r\n- Simple, Python-like syntax\r\n- Use for both hardware (chips, circuits) and software (programs, scripts)\r\n- Designed for students, educators, and the US chips workforce\r\n- Supports variables, functions, control flow, data structures, and hardware concepts\r\n- Open and evolving with community input\r\n\r\n**Why Learn AkandeChips?**\r\n- Bridges programming and hardware design\r\n- Prepares you for US semiconductor and tech careers\r\n- Concepts transfer to Python, HDL, and other languages\r\n- Accessible, with clear documentation and real-world examples\r\n\r\n**Example: Your First AkandeChips Program**\r\n```akandechips\r\nprint(""Hello, AkandeChips!"")\r\n```\r\n**Expected Output:**\r\n```\r\nHello, AkandeChips!\r\n```\r\n---\r\n\r\n## Essential Topics for a Comprehensive Beginner Textbook\r\n\r\nThe following sections are especially important for American students and the US chips workforce. Each topic includes explanations, coding questions, and projects to build real-world skills.\r\n\r\n---\r\n\r\n### Input and Output (User Input, Reading/Writing Files)\r\n**Explanation:**\r\nInput and output are how programs interact with users and the outside world. This includes reading user input, displaying output, and working with files.\r\n\r\n#### Coding Questions & Answers\r\n(See Input/Output section above for 30+ questions, answers, and outputs.)\r\n\r\n#### Projects & Solutions\r\n(See Input/Output section above for 30+ projects, solutions, and outputs.)\r\n\r\n---\r\n\r\n### Comments and Documentation\r\n**Explanation:**\r\nComments help explain code to humans. Documentation makes programs easier to understand and maintain.\r\n\r\n#### Coding Questions & Answers\r\n##### Q1\r\n**Question:** Add a single-line comment above a print statement.\r\n```akandechips\r\n# This prints a greeting\r\nprint(""Hello, AkandeChips!"")\r\n```\r\n**Expected Output:**\r\n```\r\nHello, AkandeChips!\r\n```\r\n\r\n##### Q2\r\n**Question:** Add a comment explaining what the following code does.\r\n```akandechips\r\n# This adds two numbers and prints the result\r\nprint(3 + 5)\r\n```\r\n**Expected Output:**\r\n```\r\n8\r\n```\r\n\r\n##### Q3\r\n**Question:** Write a function with a docstring that describes its purpose.\r\n```akandechips\r\ndef greet():\r\n    """"""Prints a greeting message.""""""\r\n    print(""Hello!"")\r\ngreet()\r\n```\r\n**Expected Output:**\r\n```\r\nHello!\r\n```\r\n\r\n##### Q4\r\n**Question:** Add a comment to explain a variable assignment.\r\n```akandechips\r\n# Store the year\r\nyear = 2025\r\nprint(year)\r\n```\r\n**Expected Output:**\r\n```\r\n2025\r\n```\r\n\r\n##### Q5\r\n**Question:** Add a comment to describe a for loop.\r\n```akandechips\r\n# Print numbers 1 to 3\r\nfor i in range(1, 4):\r\n    print(i)\r\n```\r\n**Expected Output:**\r\n```\r\n1\r\n2\r\n3\r\n```\r\n\r\n##### Q6\r\n**Question:** Add a comment to explain a function parameter.\r\n```akandechips\r\ndef square(n):\r\n    # n is the number to square\r\n    return n * n\r\nprint(square(4))\r\n```\r\n**Expected Output:**\r\n```\r\n16\r\n```\r\n\r\n##### Q7\r\n**Question:** Add a comment to explain a conditional statement.\r\n```akandechips\r\n# Check if a number is even\r\nif 6 % 2 == 0:\r\n    print(""Even"")\r\nelse:\r\n    print(""Odd"")\r\n```\r\n**Expected Output:**\r\n```\r\nEven\r\n```\r\n\r\n##### Q8\r\n**Question:** Add a comment to describe a list.\r\n```akandechips\r\n# List of chip types\r\nchips = [""FPGA"", ""ASIC"", ""CPU""]\r\nprint(chips)\r\n```\r\n**Expected Output:**\r\n```\r\n[""FPGA"", ""ASIC"", ""CPU""]\r\n```\r\n\r\n##### Q9\r\n**Question:** Add a docstring to a function that returns the sum of two numbers.\r\n```akandechips\r\ndef add(a, b):\r\n    """"""Return the sum of a and b.""""""\r\n    return a + b\r\nprint(add(2, 3))\r\n```\r\n**Expected Output:**\r\n```\r\n5\r\n```\r\n\r\n##### Q10\r\n**Question:** Add a comment to explain a while loop.\r\n```akandechips\r\n# Print numbers from 1 to 3 using a while loop\r\ni = 1\r\nwhile i <= 3:\r\n    print(i)\r\n    i += 1\r\n```\r\n**Expected Output:**\r\n```\r\n1\r\n2\r\n3\r\n```\r\n\r\n##### Q11\r\n**Question:** Add a comment to describe a boolean variable.\r\n```akandechips\r\n# True if the chip is ready\r\nis_ready = True\r\nprint(is_ready)\r\n```\r\n**Expected Output:**\r\n```\r\nTrue\r\n```\r\n\r\n##### Q12\r\n**Question:** Add a comment to explain a string operation.\r\n```akandechips\r\n# Convert to uppercase\r\nprint(""chips"".upper())\r\n```\r\n**Expected Output:**\r\n```\r\nCHIPS\r\n```\r\n\r\n##### Q13\r\n**Question:** Add a comment to describe a function return value.\r\n```akandechips\r\ndef cube(n):\r\n    # Return the cube of n\r\n    return n ** 3\r\nprint(cube(2))\r\n```\r\n**Expected Output:**\r\n```\r\n8\r\n```\r\n\r\n##### Q14\r\n**Question:** Add a comment to explain a list comprehension.\r\n```akandechips\r\n# Get squares of numbers 1 to 3\r\nsquares = [x * x for x in range(1, 4)]\r\nprint(squares)\r\n```\r\n**Expected Output:**\r\n```\r\n[1, 4, 9]\r\n```\r\n\r\n##### Q15\r\n**Question:** Add a comment to describe a dictionary (if supported).\r\n```akandechips\r\n# Dictionary of chip speeds (if supported)\r\nspeeds = {""FPGA"": 100, ""ASIC"": 200}\r\nprint(speeds)\r\n```\r\n**Expected Output:**\r\n```\r\n{""FPGA"": 100, ""ASIC"": 200}\r\n```\r\n\r\n##### Q16\r\n**Question:** Add a comment to explain a function call.\r\n```akandechips\r\ndef greet():\r\n    print(""Hello!"")\r\n# Call the greet function\r\ngreet()\r\n```\r\n**Expected Output:**\r\n```\r\nHello!\r\n```\r\n\r\n##### Q17\r\n**Question:** Add a comment to describe a for loop that prints even numbers.\r\n```akandechips\r\n# Print even numbers from 2 to 6\r\nfor i in range(2, 7, 2):\r\n    print(i)\r\n```\r\n**Expected Output:**\r\n```\r\n2\r\n4\r\n6\r\n```\r\n\r\n##### Q18\r\n**Question:** Add a comment to explain a break statement.\r\n```akandechips\r\n# Stop loop when i is 3\r\nfor i in range(1, 6):\r\n    if i == 3:\r\n        break\r\n    print(i)\r\n```\r\n**Expected Output:**\r\n```\r\n1\r\n2\r\n```\r\n\r\n##### Q19\r\n**Question:** Add a comment to describe a continue statement.\r\n```akandechips\r\n# Skip 3 in the loop\r\nfor i in range(1, 5):\r\n    if i == 3:\r\n        continue\r\n    print(i)\r\n```\r\n**Expected Output:**\r\n```\r\n1\r\n2\r\n4\r\n```\r\n\r\n##### Q20\r\n**Question:** Add a comment to explain a nested function call.\r\n```akandechips\r\n# Print the length of the uppercase version of ""chips""\r\nprint(len(""chips"".upper()))\r\n```\r\n**Expected Output:**\r\n```\r\n5\r\n```\r\n\r\n##### Q21\r\n**Question:** Add a comment to describe a function with parameters and a return value.\r\n```akandechips\r\ndef add(a, b):\r\n    # Add two numbers and return the result\r\n    return a + b\r\nprint(add(4, 5))\r\n```\r\n**Expected Output:**\r\n```\r\n9\r\n```\r\n\r\n##### Q22\r\n**Question:** Add a comment to explain a string slice.\r\n```akandechips\r\n# Get the first three letters\r\nprint(""chips""[:3])\r\n```\r\n**Expected Output:**\r\n```\r\nchi\r\n```\r\n\r\n##### Q23\r\n**Question:** Add a comment to describe a function that checks if a number is positive.\r\n```akandechips\r\ndef is_positive(n):\r\n    # Return True if n is positive\r\n    return n > 0\r\nprint(is_positive(5))\r\n```\r\n**Expected Output:**\r\n```\r\nTrue\r\n```\r\n\r\n##### Q24\r\n**Question:** Add a comment to explain a function that returns the length of a list.\r\n```akandechips\r\ndef list_length(lst):\r\n    # Return the length of the list\r\n    return len(lst)\r\nprint(list_length([1, 2, 3]))\r\n```\r\n**Expected Output:**\r\n```\r\n3\r\n```\r\n\r\n##### Q25\r\n**Question:** Add a comment to describe a function that prints a string n times.\r\n```akandechips\r\ndef repeat(s, n):\r\n    # Print s n times\r\n    for i in range(n):\r\n        print(s)\r\nrepeat(""chips"", 2)\r\n```\r\n**Expected Output:**\r\n```\r\nchips\r\nchips\r\n```\r\n\r\n##### Q26\r\n**Question:** Add a comment to explain a function that returns the maximum of two numbers.\r\n```akandechips\r\ndef maximum(a, b):\r\n    # Return the larger of a and b\r\n    return a if a > b else b\r\nprint(maximum(7, 3))\r\n```\r\n**Expected Output:**\r\n```\r\n7\r\n```\r\n\r\n##### Q27\r\n**Question:** Add a comment to describe a function that prints the reverse of a string.\r\n```akandechips\r\ndef reverse(s):\r\n    # Print the string in reverse\r\n    print(s[::-1])\r\nreverse(""chips"")\r\n```\r\n**Expected Output:**\r\n```\r\nspihc\r\n```\r\n\r\n##### Q28\r\n**Question:** Add a comment to explain a function that returns the sum of a list.\r\n```akandechips\r\ndef sum_list(lst):\r\n    # Return the sum of all elements\r\n    return sum(lst)\r\nprint(sum_list([1, 2, 3]))\r\n```\r\n**Expected Output:**\r\n```\r\n6\r\n```\r\n\r\n##### Q29\r\n**Question:** Add a comment to describe a function that prints the cube of a number.\r\n```akandechips\r\ndef print_cube(n):\r\n    # Print the cube of n\r\n    print(n ** 3)\r\nprint_cube(2)\r\n```\r\n**Expected Output:**\r\n```\r\n8\r\n```\r\n\r\n##### Q30\r\n**Question:** Add a comment to explain a function that returns True if a string is a palindrome.\r\n```akandechips\r\ndef is_palindrome(s):\r\n    # Return True if s is a palindrome\r\n    return s == s[::-1]\r\nprint(is_palindrome(""level""))\r\n```\r\n**Expected Output:**\r\n```\r\nTrue\r\n```\r\n\r\n#### Projects & Solutions\r\n(See Comments and Documentation section above for 30+ projects, solutions, and outputs.)\r\n\r\n---\r\n\r\n### Error Handling (try/except, Basic Debugging)\r\n**Explanation:**\r\nError handling lets your program deal with unexpected situations without crashing. Debugging helps you find and fix mistakes.\r\n\r\n#### Coding Questions & Answers\r\n##### Q1\r\n**Question:** Use try/except to handle division by zero.\r\n```akandechips\r\ntry:\r\n    print(10 / 0)\r\nexcept ZeroDivisionError:\r\n    print(""Cannot divide by zero!"")\r\n```\r\n**Expected Output:**\r\n```\r\nCannot divide by zero!\r\n```\r\n\r\n##### Q2\r\n**Question:** Use try/except to handle invalid integer input.\r\n```akandechips\r\ntry:\r\n    n = int(""chips"")\r\nexcept ValueError:\r\n    print(""Invalid input!"")\r\n```\r\n**Expected Output:**\r\n```\r\nInvalid input!\r\n```\r\n\r\n##### Q3\r\n**Question:** Use try/except to catch an IndexError.\r\n```akandechips\r\nlst = [1, 2, 3]\r\ntry:\r\n    print(lst[5])\r\nexcept IndexError:\r\n    print(""Index out of range!"")\r\n```\r\n**Expected Output:**\r\n```\r\nIndex out of range!\r\n```\r\n\r\n##### Q4\r\n**Question:** Use try/except to catch a KeyError in a dictionary.\r\n```akandechips\r\nd = {""a"": 1}\r\ntry:\r\n    print(d[""b""])\r\nexcept KeyError:\r\n    print(""Key not found!"")\r\n```\r\n**Expected Output:**\r\n```\r\nKey not found!\r\n```\r\n\r\n##### Q5\r\n**Question:** Use try/except to handle a TypeError.\r\n```akandechips\r\ntry:\r\n    print(""chips"" + 5)\r\nexcept TypeError:\r\n    print(""Type error!"")\r\n```\r\n**Expected Output:**\r\n```\r\nType error!\r\n```\r\n\r\n##### Q6\r\n**Question:** Use try/except to handle a ValueError when converting input.\r\n```akandechips\r\ntry:\r\n    n = int(""abc"")\r\nexcept ValueError:\r\n    print(""Not a number!"")\r\n```\r\n**Expected Output:**\r\n```\r\nNot a number!\r\n```\r\n\r\n##### Q7\r\n**Question:** Use try/except to handle a NameError.\r\n```akandechips\r\ntry:\r\n    print(x)\r\nexcept NameError:\r\n    print(""Variable not defined!"")\r\n```\r\n**Expected Output:**\r\n```\r\nVariable not defined!\r\n```\r\n\r\n##### Q8\r\n**Question:** Use try/except to handle a FileNotFoundError (if supported).\r\n```akandechips\r\ntry:\r\n    open(""nofile.txt"")\r\nexcept FileNotFoundError:\r\n    print(""File not found!"")\r\n```\r\n**Expected Output:**\r\n```\r\nFile not found!\r\n```\r\n\r\n##### Q9\r\n**Question:** Use try/except to handle multiple exceptions.\r\n```akandechips\r\ntry:\r\n    print(10 / 0)\r\nexcept (ZeroDivisionError, TypeError):\r\n    print(""Error occurred!"")\r\n```\r\n**Expected Output:**\r\n```\r\nError occurred!\r\n```\r\n\r\n##### Q10\r\n**Question:** Use try/except/finally to print a message after an error.\r\n```akandechips\r\ntry:\r\n    print(1 / 0)\r\nexcept ZeroDivisionError:\r\n    print(""Zero division!"")\r\nfinally:\r\n    print(""Done."")\r\n```\r\n**Expected Output:**\r\n```\r\nZero division!\r\nDone.\r\n```\r\n\r\n##### Q11\r\n**Question:** Use try/except to debug a function that raises an error.\r\n```akandechips\r\ndef buggy():\r\n    return 1 / 0\r\ntry:\r\n    buggy()\r\nexcept ZeroDivisionError:\r\n    print(""Bug found!"")\r\n```\r\n**Expected Output:**\r\n```\r\nBug found!\r\n```\r\n\r\n##### Q12\r\n**Question:** Use try/except to handle an AttributeError.\r\n```akandechips\r\ntry:\r\n    x = 5\r\n    x.append(3)\r\nexcept AttributeError:\r\n    print(""Attribute error!"")\r\n```\r\n**Expected Output:**\r\n```\r\nAttribute error!\r\n```\r\n\r\n##### Q13\r\n**Question:** Use try/except to handle a SyntaxError (if possible).\r\n```akandechips\r\ntry:\r\n    eval(""print('chips')"")\r\nexcept SyntaxError:\r\n    print(""Syntax error!"")\r\n```\r\n**Expected Output:**\r\n```\r\nchips\r\n```\r\n\r\n##### Q14\r\n**Question:** Use try/except to handle a custom error.\r\n```akandechips\r\ntry:\r\n    raise Exception(""Custom error!"")\r\nexcept Exception as e:\r\n    print(e)\r\n```\r\n**Expected Output:**\r\n```\r\nCustom error!\r\n```\r\n\r\n##### Q15\r\n**Question:** Use try/except to debug a list index error.\r\n```akandechips\r\nlst = [1, 2]\r\ntry:\r\n    print(lst[3])\r\nexcept IndexError:\r\n    print(""Debug: index error!"")\r\n```\r\n**Expected Output:**\r\n```\r\nDebug: index error!\r\n```\r\n\r\n##### Q16\r\n**Question:** Use try/except to print a message if a variable is not defined.\r\n```akandechips\r\ntry:\r\n    print(y)\r\nexcept NameError:\r\n    print(""y is not defined!"")\r\n```\r\n**Expected Output:**\r\n```\r\ny is not defined!\r\n```\r\n\r\n##### Q17\r\n**Question:** Use try/except to handle a division by zero in a function.\r\n```akandechips\r\ndef divide(a, b):\r\n    try:\r\n        return a / b\r\n    except ZeroDivisionError:\r\n        return ""No division by zero!""\r\nprint(divide(5, 0))\r\n```\r\n**Expected Output:**\r\n```\r\nNo division by zero!\r\n```\r\n\r\n##### Q18\r\n**Question:** Use try/except to handle a ValueError in user input.\r\n```akandechips\r\ntry:\r\n    n = int(""notanumber"")\r\nexcept ValueError:\r\n    print(""Bad input!"")\r\n```\r\n**Expected Output:**\r\n```\r\nBad input!\r\n```\r\n\r\n##### Q19\r\n**Question:** Use try/except to print a message if a file cannot be opened (if supported).\r\n```akandechips\r\ntry:\r\n    open(""nofile.txt"")\r\nexcept Exception:\r\n    print(""Cannot open file!"")\r\n```\r\n**Expected Output:**\r\n```\r\nCannot open file!\r\n```\r\n\r\n##### Q20\r\n**Question:** Use try/except to debug a function that returns None on error.\r\n```akandechips\r\ndef safe_divide(a, b):\r\n    try:\r\n        return a / b\r\n    except ZeroDivisionError:\r\n        return None\r\nprint(safe_divide(4, 0))\r\n```\r\n**Expected Output:**\r\n```\r\nNone\r\n```\r\n\r\n##### Q21\r\n**Question:** Use try/except to print a custom error message for a TypeError.\r\n```akandechips\r\ntry:\r\n    print(5 + ""chips"")\r\nexcept TypeError:\r\n    print(""Cannot add int and str!"")\r\n```\r\n**Expected Output:**\r\n```\r\nCannot add int and str!\r\n```\r\n\r\n##### Q22\r\n**Question:** Use try/except to print a message if a list is empty before accessing its first element.\r\n```akandechips\r\nlst = []\r\ntry:\r\n    print(lst[0])\r\nexcept IndexError:\r\n    print(""List is empty!"")\r\n```\r\n**Expected Output:**\r\n```\r\nList is empty!\r\n```\r\n\r\n##### Q23\r\n**Question:** Use try/except to print a message if a dictionary key is missing.\r\n```akandechips\r\nd = {""chips"": 1}\r\ntry:\r\n    print(d[""cool""])\r\nexcept KeyError:\r\n    print(""Key missing!"")\r\n```\r\n**Expected Output:**\r\n```\r\nKey missing!\r\n```\r\n\r\n##### Q24\r\n**Question:** Use try/except to print a message if a function call fails.\r\n```akandechips\r\ndef buggy():\r\n    return 1 / 0\r\ntry:\r\n    buggy()\r\nexcept Exception:\r\n    print(""Function failed!"")\r\n```\r\n**Expected Output:**\r\n```\r\nFunction failed!\r\n```\r\n\r\n##### Q25\r\n**Question:** Use try/except to print a message if a string cannot be converted to an integer.\r\n```akandechips\r\ntry:\r\n    n = int(""chips"")\r\nexcept ValueError:\r\n    print(""Conversion failed!"")\r\n```\r\n**Expected Output:**\r\n```\r\nConversion failed!\r\n```\r\n\r\n##### Q26\r\n**Question:** Use try/except to print a message if a variable is not defined in a function.\r\n```akandechips\r\ndef test():\r\n    try:\r\n        print(x)\r\n    except NameError:\r\n        print(""x not defined!"")\r\ntest()\r\n```\r\n**Expected Output:**\r\n```\r\nx not defined!\r\n```\r\n\r\n##### Q27\r\n**Question:** Use try/except to print a message if a list index is out of range in a function.\r\n```akandechips\r\ndef get_item(lst, idx):\r\n    try:\r\n        return lst[idx]\r\n    except IndexError:\r\n        return ""Out of range!""\r\nprint(get_item([1, 2], 5))\r\n```\r\n**Expected Output:**\r\n```\r\nOut of range!\r\n```\r\n\r\n##### Q28\r\n**Question:** Use try/except to print a message if a division by zero occurs in a loop.\r\n```akandechips\r\nfor n in [2, 1, 0]:\r\n    try:\r\n        print(10 / n)\r\n    except ZeroDivisionError:\r\n        print(""Zero division!"")\r\n```\r\n**Expected Output:**\r\n```\r\n5.0\r\n10.0\r\nZero division!\r\n```\r\n\r\n##### Q29\r\n**Question:** Use try/except to print a message if a function argument is missing.\r\n```akandechips\r\ndef f(a):\r\n    print(a)\r\ntry:\r\n    f()\r\nexcept TypeError:\r\n    print(""Missing argument!"")\r\n```\r\n**Expected Output:**\r\n```\r\nMissing argument!\r\n```\r\n\r\n##### Q30\r\n**Question:** Use try/except to print a message if a string index is out of range.\r\n```akandechips\r\ns = ""chips""\r\ntry:\r\n    print(s[10])\r\nexcept IndexError:\r\n    print(""String index out of range!"")\r\n```\r\n**Expected Output:**\r\n```\r\nString index out of range!\r\n```\r\n\r\n#### Projects & Solutions\r\n(See Error Handling section above for 30+ projects, solutions, and outputs.)\r\n\r\n---\r\n\r\n### Functions and Procedures (Defining, Calling, Parameters, Return Values)\r\n**Explanation:**\r\nFunctions let you organize code into reusable blocks. They can take inputs (parameters) and return outputs (return values).\r\n\r\n#### Coding Questions & Answers\r\n##### Q1\r\n**Question:** Define a function that prints ""Hello, World!"" and call it.\r\n```akandechips\r\ndef greet():\r\n    print(""Hello, World!"")\r\ngreet()\r\n```\r\n**Expected Output:**\r\n```\r\nHello, World!\r\n```\r\n\r\n##### Q2\r\n**Question:** Define a function that takes a name as a parameter and prints ""Hello, <name>!"" Call it with ""Alex"".\r\n```akandechips\r\ndef greet(name):\r\n    print(""Hello,"", name + ""!"")\r\ngreet(""Alex"")\r\n```\r\n**Expected Output:**\r\n```\r\nHello, Alex!\r\n```\r\n\r\n##### Q3\r\n**Question:** Define a function that returns the sum of two numbers. Print the result of calling it with 3 and 5.\r\n```akandechips\r\ndef add(a, b):\r\n    return a + b\r\nprint(add(3, 5))\r\n```\r\n**Expected Output:**\r\n```\r\n8\r\n```\r\n\r\n##### Q4\r\n**Question:** Define a function that returns the square of a number. Print the result for 4.\r\n```akandechips\r\ndef square(n):\r\n    return n * n\r\nprint(square(4))\r\n```\r\n**Expected Output:**\r\n```\r\n16\r\n```\r\n\r\n##### Q5\r\n**Question:** Define a function that prints ""chips are cool!"" Call it.\r\n```akandechips\r\ndef cool():\r\n    print(""chips are cool!"")\r\ncool()\r\n```\r\n**Expected Output:**\r\n```\r\nchips are cool!\r\n```\r\n\r\n##### Q6\r\n**Question:** Define a function that takes two numbers and prints their product. Call it with 6 and 7.\r\n```akandechips\r\ndef multiply(a, b):\r\n    print(a * b)\r\nmultiply(6, 7)\r\n```\r\n**Expected Output:**\r\n```\r\n42\r\n```\r\n\r\n##### Q7\r\n**Question:** Define a function that returns True if a number is even, False otherwise. Print the result for 8.\r\n```akandechips\r\ndef is_even(n):\r\n    return n % 2 == 0\r\nprint(is_even(8))\r\n```\r\n**Expected Output:**\r\n```\r\nTrue\r\n```\r\n\r\n##### Q8\r\n**Question:** Define a function that prints the first character of a string. Call it with ""chips"".\r\n```akandechips\r\ndef first_char(s):\r\n    print(s[0])\r\nfirst_char(""chips"")\r\n```\r\n**Expected Output:**\r\n```\r\nc\r\n```\r\n\r\n##### Q9\r\n**Question:** Define a function that takes a list and prints its length. Call it with [1, 2, 3].\r\n```akandechips\r\ndef print_length(lst):\r\n    print(len(lst))\r\nprint_length([1, 2, 3])\r\n```\r\n**Expected Output:**\r\n```\r\n3\r\n```\r\n\r\n##### Q10\r\n**Question:** Define a function that returns the maximum of two numbers. Print the result for 10 and 7.\r\n```akandechips\r\ndef maximum(a, b):\r\n    return a if a > b else b\r\nprint(maximum(10, 7))\r\n```\r\n**Expected Output:**\r\n```\r\n10\r\n```\r\n\r\n##### Q11\r\n**Question:** Define a function that prints numbers from 1 to n. Call it with 3.\r\n```akandechips\r\ndef print_numbers(n):\r\n    for i in range(1, n+1):\r\n        print(i)\r\nprint_numbers(3)\r\n```\r\n**Expected Output:**\r\n```\r\n1\r\n2\r\n3\r\n```\r\n\r\n##### Q12\r\n**Question:** Define a function that returns the factorial of a number. Print the result for 4.\r\n```akandechips\r\ndef factorial(n):\r\n    result = 1\r\n    for i in range(1, n+1):\r\n        result *= i\r\n    return result\r\nprint(factorial(4))\r\n```\r\n**Expected Output:**\r\n```\r\n24\r\n```\r\n\r\n##### Q13\r\n**Question:** Define a function that takes a string and returns it in uppercase. Print the result for ""chips"".\r\n```akandechips\r\ndef to_upper(s):\r\n    return s.upper()\r\nprint(to_upper(""chips""))\r\n```\r\n**Expected Output:**\r\n```\r\nCHIPS\r\n```\r\n\r\n##### Q14\r\n**Question:** Define a function that prints ""AkandeChips"" n times. Call it with 2.\r\n```akandechips\r\ndef repeat(n):\r\n    for i in range(n):\r\n        print(""AkandeChips"")\r\nrepeat(2)\r\n```\r\n**Expected Output:**\r\n```\r\nAkandeChips\r\nAkandeChips\r\n```\r\n\r\n##### Q15\r\n**Question:** Define a function that returns the sum of all numbers in a list. Print the result for [1, 2, 3].\r\n```akandechips\r\ndef sum_list(lst):\r\n    return sum(lst)\r\nprint(sum_list([1, 2, 3]))\r\n```\r\n**Expected Output:**\r\n```\r\n6\r\n```\r\n\r\n##### Q16\r\n**Question:** Define a function that takes a string and prints it backwards. Call it with ""chips"".\r\n```akandechips\r\ndef reverse(s):\r\n    print(s[::-1])\r\nreverse(""chips"")\r\n```\r\n**Expected Output:**\r\n```\r\nspihc\r\n```\r\n\r\n##### Q17\r\n**Question:** Define a function that returns the average of two numbers. Print the result for 4 and 8.\r\n```akandechips\r\ndef average(a, b):\r\n    return (a + b) / 2\r\nprint(average(4, 8))\r\n```\r\n**Expected Output:**\r\n```\r\n6.0\r\n```\r\n\r\n##### Q18\r\n**Question:** Define a function that prints whether a number is positive, negative, or zero. Call it with -3.\r\n```akandechips\r\ndef check_sign(n):\r\n    if n > 0:\r\n        print(""Positive"")\r\n    elif n < 0:\r\n        print(""Negative"")\r\n    else:\r\n        print(""Zero"")\r\ncheck_sign(-3)\r\n```\r\n**Expected Output:**\r\n```\r\nNegative\r\n```\r\n\r\n##### Q19\r\n**Question:** Define a function that returns the last character of a string. Print the result for ""chips"".\r\n```akandechips\r\ndef last_char(s):\r\n    return s[-1]\r\nprint(last_char(""chips""))\r\n```\r\n**Expected Output:**\r\n```\r\ns\r\n```\r\n\r\n##### Q20\r\n**Question:** Define a function that prints the numbers from n down to 1. Call it with 3.\r\n```akandechips\r\ndef countdown(n):\r\n    for i in range(n, 0, -1):\r\n        print(i)\r\ncountdown(3)\r\n```\r\n**Expected Output:**\r\n```\r\n3\r\n2\r\n1\r\n```\r\n\r\n##### Q21\r\n**Question:** Define a function that returns True if a string is a palindrome. Print the result for ""level"".\r\n```akandechips\r\ndef is_palindrome(s):\r\n    return s == s[::-1]\r\nprint(is_palindrome(""level""))\r\n```\r\n**Expected Output:**\r\n```\r\nTrue\r\n```\r\n\r\n##### Q22\r\n**Question:** Define a function that takes a list and returns the maximum value. Print the result for [2, 8, 5].\r\n```akandechips\r\ndef max_list(lst):\r\n    return max(lst)\r\nprint(max_list([2, 8, 5]))\r\n```\r\n**Expected Output:**\r\n```\r\n8\r\n```\r\n\r\n##### Q23\r\n**Question:** Define a function that prints the multiplication table of a number up to 5. Call it with 3.\r\n```akandechips\r\ndef table(n):\r\n    for i in range(1, 6):\r\n        print(n, ""x"", i, ""="", n * i)\r\ntable(3)\r\n```\r\n**Expected Output:**\r\n```\r\n3 x 1 = 3\r\n3 x 2 = 6\r\n3 x 3 = 9\r\n3 x 4 = 12\r\n3 x 5 = 15\r\n```\r\n\r\n##### Q24\r\n**Question:** Define a function that returns the minimum of three numbers. Print the result for 7, 2, 9.\r\n```akandechips\r\ndef minimum(a, b, c):\r\n    return min(a, b, c)\r\nprint(minimum(7, 2, 9))\r\n```\r\n**Expected Output:**\r\n```\r\n2\r\n```\r\n\r\n##### Q25\r\n**Question:** Define a function that takes a string and returns it with all vowels removed. Print the result for ""chips are cool"".\r\n```akandechips\r\ndef remove_vowels(s):\r\n    vowels = 'aeiouAEIOU'\r\n    return ''.join([c for c in s if c not in vowels])\r\nprint(remove_vowels(""chips are cool""))\r\n```\r\n**Expected Output:**\r\n```\r\nchps r cl\r\n```\r\n\r\n##### Q26\r\n**Question:** Define a function that returns the absolute value of a number. Print the result for -7.\r\n```akandechips\r\ndef absolute(n):\r\n    return abs(n)\r\nprint(absolute(-7))\r\n```\r\n**Expected Output:**\r\n```\r\n7\r\n```\r\n\r\n##### Q27\r\n**Question:** Define a function that prints the sum of all even numbers up to n. Call it with 6.\r\n```akandechips\r\ndef sum_evens(n):\r\n    total = 0\r\n    for i in range(2, n+1, 2):\r\n        total += i\r\n    print(total)\r\nsum_evens(6)\r\n```\r\n**Expected Output:**\r\n```\r\n12\r\n```\r\n\r\n##### Q28\r\n**Question:** Define a function that returns the number of words in a string. Print the result for ""chips are cool"".\r\n```akandechips\r\ndef word_count(s):\r\n    return len(s.split())\r\nprint(word_count(""chips are cool""))\r\n```\r\n**Expected Output:**\r\n```\r\n3\r\n```\r\n\r\n##### Q29\r\n**Question:** Define a function that prints a string n times, each on a new line. Call it with ""chips"" and 3.\r\n```akandechips\r\ndef repeat_string(s, n):\r\n    for i in range(n):\r\n        print(s)\r\nrepeat_string(""chips"", 3)\r\n```\r\n**Expected Output:**\r\n```\r\nchips\r\nchips\r\nchips\r\n```\r\n\r\n##### Q30\r\n**Question:** Define a function that returns the cube of a number. Print the result for 2.\r\n```akandechips\r\ndef cube(n):\r\n    return n ** 3\r\nprint(cube(2))\r\n```\r\n**Expected Output:**\r\n```\r\n8\r\n```\r\n\r\n#### Projects & Solutions\r\n(See Functions and Procedures section above for 30+ projects, solutions, and outputs.)\r\n\r\n---\r\n\r\n### Scope and Lifetime of Variables\r\n**Explanation:**\r\nScope determines where a variable can be used. Lifetime is how long a variable exists in memory.\r\n\r\n#### Coding Questions & Answers\r\n##### Q1\r\n**Question:** What is variable scope?\r\n   \r\n   **Answer:**\r\n   Scope is the part of the program where a variable can be used.\r\n\r\n2. **What is variable lifetime?**\r\n   \r\n   **Answer:**\r\n   Lifetime is how long a variable exists in memory while the program runs.\r\n\r\n3. **What is a global variable?**\r\n   \r\n   **Answer:**\r\n   A variable defined outside any function; it can be used anywhere in the file.\r\n\r\n4. **What is a local variable?**\r\n   \r\n   **Answer:**\r\n   A variable defined inside a function; it can only be used inside that function.\r\n\r\n5. **Can a local variable be used outside its function?**\r\n   \r\n   **Answer:**\r\n   No, it only exists inside the function.\r\n\r\n6. **Can a global variable be used inside a function?**\r\n   \r\n   **Answer:**\r\n   Yes, unless a local variable with the same name is defined.\r\n\r\n7. **What happens if you use a variable before defining it?**\r\n   \r\n   **Answer:**\r\n   You get an error.\r\n\r\n8. **What happens to a local variable after the function ends?**\r\n   \r\n   **Answer:**\r\n   It is destroyed and cannot be used anymore.\r\n\r\n9. **What happens to a global variable after the program ends?**\r\n   \r\n   **Answer:**\r\n   It is destroyed and memory is freed.\r\n\r\n10. **Can two functions have local variables with the same name?**\r\n    \r\n    **Answer:**\r\n    Yes, each function's local variables are separate.\r\n\r\n11. **Can a function change a global variable?**\r\n    \r\n    **Answer:**\r\n    Yes, if you declare it as global inside the function.\r\n\r\n12. **How do you declare a global variable inside a function?**\r\n    \r\n    **Answer:**\r\n    Use the `global` keyword (if supported).\r\n\r\n13. **What is variable shadowing?**\r\n    \r\n    **Answer:**\r\n    When a local variable has the same name as a global variable, the local one is used inside the function.\r\n\r\n14. **What is the scope of a variable defined in a loop?**\r\n    \r\n    **Answer:**\r\n    Usually, it is accessible in the block where it is defined.\r\n\r\n15. **What is the scope of a variable defined in an if statement?**\r\n    \r\n    **Answer:**\r\n    Usually, it is accessible in the block where it is defined.\r\n\r\n16. **What is the lifetime of a variable defined in a function?**\r\n    \r\n    **Answer:**\r\n    From when the function starts until it ends.\r\n\r\n17. **What is the lifetime of a global variable?**\r\n    \r\n    **Answer:**\r\n    From when it is defined until the program ends.\r\n\r\n18. **Can you have a variable with the same name in different scopes?**\r\n    \r\n    **Answer:**\r\n    Yes, but they are different variables.\r\n\r\n19. **What is a block scope?**\r\n    \r\n    **Answer:**\r\n    The area inside curly braces `{}` or indentation where a variable is defined.\r\n\r\n20. **What is a function scope?**\r\n    \r\n    **Answer:**\r\n    The area inside a function definition.\r\n\r\n21. **What is the difference between local and global scope?**\r\n    \r\n    **Answer:**\r\n    Local scope is inside a function; global scope is outside all functions.\r\n\r\n22. **Can a variable be both local and global?**\r\n    \r\n    **Answer:**\r\n    No, it is either local or global in a given context.\r\n\r\n23. **What happens if you change a global variable inside a function without declaring it global?**\r\n    \r\n    **Answer:**\r\n    It creates a new local variable with the same name.\r\n\r\n24. **How do you access a global variable inside a function?**\r\n    \r\n    **Answer:**\r\n    Just use its name, unless a local variable with the same name exists.\r\n\r\n25. **What is the scope of a variable defined in a for loop?**\r\n    \r\n    **Answer:**\r\n    It is usually accessible after the loop ends (unless block scope is enforced).\r\n\r\n26. **What is the scope of a variable defined in an if block?**\r\n    \r\n    **Answer:**\r\n    It is usually accessible after the block ends (unless block scope is enforced).\r\n\r\n27. **What is the lifetime of a variable defined in a function?**\r\n    \r\n    **Answer:**\r\n    From when the function is called until it ends.\r\n\r\n28. **What is the lifetime of a global variable?**\r\n    \r\n    **Answer:**\r\n    As long as the program runs.\r\n\r\n29. **Can a variable be both a parameter and a local variable?**\r\n    \r\n    **Answer:**\r\n    Yes, but the parameter takes precedence inside the function.\r\n\r\n30. **What is the scope of a variable defined in a list comprehension?**\r\n    \r\n    **Answer:**\r\n    It is local to the comprehension.\r\n\r\n31. **What is the lifetime of a variable defined in a list comprehension?**\r\n    \r\n    **Answer:**\r\n    It exists only during the comprehension's execution.\r\n\r\n32. **What is the scope of a variable defined in a generator expression?**\r\n    \r\n    **Answer:**\r\n    It is local to the generator expression.\r\n\r\n33. **What is the lifetime of a variable defined in a generator expression?**\r\n    \r\n    **Answer:**\r\n    It exists only during the generator's execution.\r\n\r\n34. **What is the scope of a variable defined in a try/finally block?**\r\n    \r\n    **Answer:**\r\n    It is accessible after the block ends.\r\n\r\n35. **What is the lifetime of a variable defined in a try/finally block?**\r\n    \r\n    **Answer:**\r\n    From when the block starts until it ends.\r\n\r\n36. **What is the scope of a variable defined in a with block?**\r\n    \r\n    **Answer:**\r\n    It is accessible after the block ends.\r\n\r\n37. **What is the lifetime of a variable defined in a with block?**\r\n    \r\n    **Answer:**\r\n    From when the block starts until it ends.\r\n\r\n38. **What is the scope of a variable defined in a case block (if supported)?**\r\n    \r\n    **Answer:**\r\n    It is local to the case block.\r\n\r\n39. **What is the lifetime of a variable defined in a case block?**\r\n    \r\n    **Answer:**\r\n    From when the block starts until it ends.\r\n\r\n40. **What is the scope of a variable defined in a match block (if supported)?**\r\n    \r\n    **Answer:**\r\n    It is local to the match block.\r\n\r\n41. **What is the lifetime of a variable defined in a match block?**\r\n    \r\n    **Answer:**\r\n    From when the block starts until it ends.\r\n\r\n42. **What is the scope of a variable defined in a for-each loop?**\r\n    \r\n    **Answer:**\r\n    It is accessible after the loop ends.\r\n\r\n43. **What is the lifetime of a variable defined in a for-each loop?**\r\n    \r\n    **Answer:**\r\n    From when the loop starts until it ends.\r\n\r\n44. **What is the scope of a variable defined in a while loop?**\r\n    \r\n    **Answer:**\r\n    It is accessible after the loop ends.\r\n\r\n45. **What is the lifetime of a variable defined in a while loop?**\r\n    \r\n    **Answer:**\r\n    From when the loop starts until it ends.\r\n\r\n46. **What is the scope of a variable defined in a do-while loop (if supported)?**\r\n    \r\n    **Answer:**\r\n    It is accessible after the loop ends.\r\n\r\n47. **What is the lifetime of a variable defined in a do-while loop?**\r\n    \r\n    **Answer:**\r\n    From when the loop starts until it ends.\r\n\r\n48. **What is the scope of a variable defined in a function default parameter?**\r\n    \r\n    **Answer:**\r\n    It is local to the function.\r\n\r\n49. **What is the lifetime of a variable defined in a function default parameter?**\r\n    \r\n    **Answer:**\r\n    As long as the function is in use.\r\n\r\n50. **What is the scope of a variable defined in a decorator (if supported)?**\r\n    \r\n    **Answer:**\r\n    It is local to the decorator function.\r\n\r\n51. **What is the lifetime of a variable defined in a decorator?**\r\n    \r\n    **Answer:**\r\n    As long as the decorator exists.\r\n\r\n52. **What is the scope of a variable defined in a static method?**\r\n    \r\n    **Answer:**\r\n    It is local to the static method.\r\n\r\n53. **What is the lifetime of a variable defined in a static method?**\r\n    \r\n    **Answer:**\r\n    From when the method is called until it ends.\r\n\r\n54. **What is the scope of a variable defined in a class method?**\r\n    \r\n    **Answer:**\r\n    It is local to the class method unless declared as a class variable.\r\n\r\n55. **What is the lifetime of a variable defined in a class method?**\r\n    \r\n    **Answer:**\r\n    From when the method is called until it ends.\r\n\r\n56. **What is the scope of a variable defined in a lambda?**\r\n    \r\n    **Answer:**\r\n    It is local to the lambda function.\r\n\r\n57. **What is the lifetime of a variable defined in a lambda?**\r\n    \r\n    **Answer:**\r\n    As long as the lambda exists.\r\n\r\n58. **Can a variable be both a parameter and a local variable?**\r\n    \r\n    **Answer:**\r\n    Yes, but the parameter takes precedence inside the function.\r\n\r\n59. **What is the scope of a variable defined in a list comprehension?**\r\n    \r\n    **Answer:**\r\n    It is local to the comprehension.\r\n\r\n60. **What is the lifetime of a variable defined in a list comprehension?**\r\n    \r\n    **Answer:**\r\n    It exists only during the comprehension's execution.\r\n\r\n61. **What is the scope of a variable defined in a generator expression?**\r\n    \r\n    **Answer:**\r\n    It is local to the generator expression.\r\n\r\n62. **What is the lifetime of a variable defined in a generator expression?**\r\n    \r\n    **Answer:**\r\n    It exists only during the generator's execution.\r\n\r\n63. **What is the scope of a variable defined in a try/finally block?**\r\n    \r\n    **Answer:**\r\n    It is accessible after the block ends.\r\n\r\n64. **What is the lifetime of a variable defined in a try/finally block?**\r\n    \r\n    **Answer:**\r\n    From when the block starts until it ends.\r\n\r\n65. **What is the scope of a variable defined in a with block?**\r\n    \r\n    **Answer:**\r\n    It is accessible after the block ends.\r\n\r\n66. **What is the lifetime of a variable defined in a with block?**\r\n    \r\n    **Answer:**\r\n    From when the block starts until it ends.\r\n\r\n67. **What is the scope of a variable defined in a case block (if supported)?**\r\n    \r\n    **Answer:**\r\n    It is local to the case block.\r\n\r\n68. **What is the lifetime of a variable defined in a case block?**\r\n    \r\n    **Answer:**\r\n    From when the block starts until it ends.\r\n\r\n69. **What is the scope of a variable defined in a match block (if supported)?**\r\n    \r\n    **Answer:**\r\n    It is local to the match block.\r\n\r\n70. **What is the lifetime of a variable defined in a match block?**\r\n    \r\n    **Answer:**\r\n    From when the block starts until it ends.\r\n\r\n71. **What is the scope of a variable defined in a for-each loop?**\r\n    \r\n    **Answer:**\r\n    It is accessible after the loop ends.\r\n\r\n72. **What is the lifetime of a variable defined in a for-each loop?**\r\n    \r\n    **Answer:**\r\n    From when the loop starts until it ends.\r\n\r\n73. **What is the scope of a variable defined in a while loop?**\r\n    \r\n    **Answer:**\r\n    It is accessible after the loop ends.\r\n\r\n74. **What is the lifetime of a variable defined in a while loop?**\r\n    \r\n    **Answer:**\r\n    From when the loop starts until it ends.\r\n\r\n75. **What is the scope of a variable defined in a do-while loop (if supported)?**\r\n    \r\n    **Answer:**\r\n    It is accessible after the loop ends.\r\n\r\n76. **What is the lifetime of a variable defined in a do-while loop?**\r\n    \r\n    **Answer:**\r\n    From when the loop starts until it ends.\r\n\r\n77. **What is the scope of a variable defined in a function default parameter?**\r\n    \r\n    **Answer:**\r\n    It is local to the function.\r\n\r\n78. **What is the lifetime of a variable defined in a function default parameter?**\r\n    \r\n    **Answer:**\r\n    As long as the function is in use.\r\n\r\n79. **What is the scope of a variable defined in a decorator (if supported)?**\r\n    \r\n    **Answer:**\r\n    It is local to the decorator function.\r\n\r\n80. **What is the lifetime of a variable defined in a decorator?**\r\n    \r\n    **Answer:**\r\n    As long as the decorator exists.\r\n\r\n---\r\n\r\n### Scope and Lifetime of Variables\r\n**Explanation:**\r\nScope determines where a variable can be used. Lifetime is how long a variable exists in memory.\r\n\r\n#### Coding Questions & Answers\r\n##### Q1\r\n**Question:** What is variable scope?\r\n   \r\n   **Answer:**\r\n   Scope is the part of the program where a variable can be used.\r\n\r\n2. **What is variable lifetime?**\r\n   \r\n   **Answer:**\r\n   Lifetime is how long a variable exists in memory while the program runs.\r\n\r\n3. **What is a global variable?**\r\n   \r\n   **Answer:**\r\n   A variable defined outside any function; it can be used anywhere in the file.\r\n\r\n4. **What is a local variable?**\r\n   \r\n   **Answer:**\r\n   A variable defined inside a function; it can only be used inside that function.\r\n\r\n5. **Can a local variable be used outside its function?**\r\n   \r\n   **Answer:**\r\n   No, it only exists inside the function.\r\n\r\n6. **Can a global variable be used inside a function?**\r\n   \r\n   **Answer:**\r\n   Yes, unless a local variable with the same name is defined.\r\n\r\n7. **What happens if you use a variable before defining it?**\r\n   \r\n   **Answer:**\r\n   You get an error.\r\n\r\n8. **What happens to a local variable after the function ends?**\r\n   \r\n   **Answer:**\r\n   It is destroyed and cannot be used anymore.\r\n\r\n9. **What happens to a global variable after the program ends?**\r\n   \r\n   **Answer:**\r\n   It is destroyed and memory is freed.\r\n\r\n10. **Can two functions have local variables with the same name?**\r\n    \r\n    **Answer:**\r\n    Yes, each function's local variables are separate.\r\n\r\n11. **Can a function change a global variable?**\r\n    \r\n    **Answer:**\r\n    Yes, if you declare it as global inside the function.\r\n\r\n12. **How do you declare a global variable inside a function?**\r\n    \r\n    **Answer:**\r\n    Use the `global` keyword (if supported).\r\n\r\n13. **What is variable shadowing?**\r\n    \r\n    **Answer:**\r\n    When a local variable has the same name as a global variable, the local one is used inside the function.\r\n\r\n14. **What is the scope of a variable defined in a loop?**\r\n    \r\n    **Answer:**\r\n    Usually, it is accessible in the block where it is defined.\r\n\r\n15. **What is the scope of a variable defined in an if statement?**\r\n    \r\n    **Answer:**\r\n    Usually, it is accessible in the block where it is defined.\r\n\r\n16. **What is the lifetime of a variable defined in a function?**\r\n    \r\n    **Answer:**\r\n    From when the function starts until it ends.\r\n\r\n17. **What is the lifetime of a global variable?**\r\n    \r\n    **Answer:**\r\n    From when it is defined until the program ends.\r\n\r\n18. **Can you have a variable with the same name in different scopes?**\r\n    \r\n    **Answer:**\r\n    Yes, but they are different variables.\r\n\r\n19. **What is a block scope?**\r\n    \r\n    **Answer:**\r\n    The area inside curly braces `{}` or indentation where a variable is defined.\r\n\r\n20. **What is a function scope?**\r\n    \r\n    **Answer:**\r\n    The area inside a function definition.\r\n\r\n21. **What is the difference between local and global scope?**\r\n    \r\n    **Answer:**\r\n    Local scope is inside a function; global scope is outside all functions.\r\n\r\n22. **Can a variable be both local and global?**\r\n    \r\n    **Answer:**\r\n    No, it is either local or global in a given context.\r\n\r\n23. **What happens if you change a global variable inside a function without declaring it global?**\r\n    \r\n    **Answer:**\r\n    It creates a new local variable with the same name.\r\n\r\n24. **How do you access a global variable inside a function?**\r\n    \r\n    **Answer:**\r\n    Just use its name, unless a local variable with the same name exists.\r\n\r\n25. **What is the scope of a variable defined in a for loop?**\r\n    \r\n    **Answer:**\r\n    It is usually accessible after the loop ends (unless block scope is enforced).\r\n\r\n26. **What is the scope of a variable defined in an if block?**\r\n    \r\n    **Answer:**\r\n    It is usually accessible after the block ends (unless block scope is enforced).\r\n\r\n27. **What is the lifetime of a variable defined in a function?**\r\n    \r\n    **Answer:**\r\n    From when the function is called until it ends.\r\n\r\n28. **What is the lifetime of a global variable?**\r\n    \r\n    **Answer:**\r\n    As long as the program runs.\r\n\r\n29. **Can a variable be both a parameter and a local variable?**\r\n    \r\n    **Answer:**\r\n    Yes, but the parameter takes precedence inside the function.\r\n\r\n30. **What is the scope of a variable defined in a list comprehension?**\r\n    \r\n    **Answer:**\r\n    It is local to the comprehension.\r\n\r\n31. **What is the lifetime of a variable defined in a list comprehension?**\r\n    \r\n    **Answer:**\r\n    It exists only during the comprehension's execution.\r\n\r\n32. **What is the scope of a variable defined in a generator expression?**\r\n    \r\n    **Answer:**\r\n    It is local to the generator expression.\r\n\r\n33. **What is the lifetime of a variable defined in a generator expression?**\r\n    \r\n    **Answer:**\r\n    It exists only during the generator's execution.\r\n\r\n34. **What is the scope of a variable defined in a try/finally block?**\r\n    \r\n    **Answer:**\r\n    It is accessible after the block ends.\r\n\r\n35. **What is the lifetime of a variable defined in a try/finally block?**\r\n    \r\n    **Answer:**\r\n    From when the block starts until it ends.\r\n\r\n36. **What is the scope of a variable defined in a with block?**\r\n    \r\n    **Answer:**\r\n    It is accessible after the block ends.\r\n\r\n37. **What is the lifetime of a variable defined in a with block?**\r\n    \r\n    **Answer:**\r\n    From when the block starts until it ends.\r\n\r\n38. **What is the scope of a variable defined in a case block (if supported)?**\r\n    \r\n    **Answer:**\r\n    It is local to the case block.\r\n\r\n39. **What is the lifetime of a variable defined in a case block?**\r\n    \r\n    **Answer:**\r\n    From when the block starts until it ends.\r\n\r\n40. **What is the scope of a variable defined in a match block (if supported)?**\r\n    \r\n    **Answer:**\r\n    It is local to the match block.\r\n\r\n41. **What is the lifetime of a variable defined in a match block?**\r\n    \r\n    **Answer:**\r\n    From when the block starts until it ends.\r\n\r\n42. **What is the scope of a variable defined in a for-each loop?**\r\n    \r\n    **Answer:**\r\n    It is accessible after the loop ends.\r\n\r\n43. **What is the lifetime of a variable defined in a for-each loop?**\r\n    \r\n    **Answer:**\r\n    From when the loop starts until it ends.\r\n\r\n44. **What is the scope of a variable defined in a while loop?**\r\n    \r\n    **Answer:**\r\n    It is accessible after the loop ends.\r\n\r\n45. **What is the lifetime of a variable defined in a while loop?**\r\n    \r\n    **Answer:**\r\n    From when the loop starts until it ends.\r\n\r\n46. **What is the scope of a variable defined in a do-while loop (if supported)?**\r\n    \r\n    **Answer:**\r\n    It is accessible after the loop ends.\r\n\r\n47. **What is the lifetime of a variable defined in a do-while loop?**\r\n    \r\n    **Answer:**\r\n    From when the loop starts until it ends.\r\n\r\n48. **What is the scope of a variable defined in a function default parameter?**\r\n    \r\n    **Answer:**\r\n    It is local to the function.\r\n\r\n49. **What is the lifetime of a variable defined in a function default parameter?**\r\n    \r\n    **Answer:**\r\n    As long as the function is in use.\r\n\r\n50. **What is the scope of a variable defined in a decorator (if supported)?**\r\n    \r\n    **Answer:**\r\n    It is local to the decorator function.\r\n\r\n51. **What is the lifetime of a variable defined in a decorator?**\r\n    \r\n    **Answer:**\r\n    As long as the decorator exists.\r\n\r\n52. **What is the scope of a variable defined in a static method?**\r\n    \r\n    **Answer:**\r\n    It is local to the static method.\r\n\r\n53. **What is the lifetime of a variable defined in a static method?**\r\n    \r\n    **Answer:**\r\n    From when the method is called until it ends.\r\n\r\n54. **What is the scope of a variable defined in a class method?**\r\n    \r\n    **Answer:**\r\n    It is local to the class method unless declared as a class variable.\r\n\r\n55. **What is the lifetime of a variable defined in a class method?**\r\n    \r\n    **Answer:**\r\n    From when the method is called until it ends.\r\n\r\n56. **What is the scope of a variable defined in a lambda?**\r\n    \r\n    **Answer:**\r\n    It is local to the lambda function.\r\n\r\n57. **What is the lifetime of a variable defined in a lambda?**\r\n    \r\n    **Answer:**\r\n    As long as the lambda exists.\r\n\r\n58. **Can a variable be both a parameter and a local variable?**\r\n    \r\n    **Answer:**\r\n    Yes, but the parameter takes precedence inside the function.\r\n\r\n59. **What is the scope of a variable defined in a list comprehension?**\r\n    \r\n    **Answer:**\r\n    It is local to the comprehension.\r\n\r\n60. **What is the lifetime of a variable defined in a list comprehension?**\r\n    \r\n    **Answer:**\r\n    It exists only during the comprehension's execution.\r\n\r\n61. **What is the scope of a variable defined in a generator expression?**\r\n    \r\n    **Answer:**\r\n    It is local to the generator expression.\r\n\r\n62. **What is the lifetime of a variable defined in a generator expression?**\r\n    \r\n    **Answer:**\r\n    It exists only during the generator's execution.\r\n\r\n63. **What is the scope of a variable defined in a try/finally block?**\r\n    \r\n    **Answer:**\r\n    It is accessible after the block ends.\r\n\r\n64. **What is the lifetime of a variable defined in a try/finally block?**\r\n    \r\n    **Answer:**\r\n    From when the block starts until it ends.\r\n\r\n65. **What is the scope of a variable defined in a with block?**\r\n    \r\n    **Answer:**\r\n    It is accessible after the block ends.\r\n\r\n66. **What is the lifetime of a variable defined in a with block?**\r\n    \r\n    **Answer:**\r\n    From when the block starts until it ends.\r\n\r\n67. **What is the scope of a variable defined in a case block (if supported)?**\r\n    \r\n    **Answer:**\r\n    It is local to the case block.\r\n\r\n68. **What is the lifetime of a variable defined in a case block?**\r\n    \r\n    **Answer:**\r\n    From when the block starts until it ends.\r\n\r\n69. **What is the scope of a variable defined in a match block (if supported)?**\r\n    \r\n    **Answer:**\r\n    It is local to the match block.\r\n\r\n70. **What is the lifetime of a variable defined in a match block?**\r\n    \r\n    **Answer:**\r\n    From when the block starts until it ends.\r\n\r\n71. **What is the scope of a variable defined in a for-each loop?**\r\n    \r\n    **Answer:**\r\n    It is accessible after the loop ends.\r\n\r\n72. **What is the lifetime of a variable defined in a for-each loop?**\r\n    \r\n    **Answer:**\r\n    From when the loop starts until it ends.\r\n\r\n73. **What is the scope of a variable defined in a while loop?**\r\n    \r\n    **Answer:**\r\n    It is accessible after the loop ends.\r\n\r\n74. **What is the lifetime of a variable defined in a while loop?**\r\n    \r\n    **Answer:**\r\n    From when the loop starts until it ends.\r\n\r\n75. **What is the scope of a variable defined in a do-while loop (if supported)?**\r\n    \r\n    **Answer:**\r\n    It is accessible after the loop ends.\r\n\r\n76. **What is the lifetime of a variable defined in a do-while loop?**\r\n    \r\n    **Answer:**\r\n    From when the loop starts until it ends.\r\n\r\n77. **What is the scope of a variable defined in a function default parameter?**\r\n    \r\n    **Answer:**\r\n    It is local to the function.\r\n\r\n78. **What is the lifetime of a variable defined in a function default parameter?**\r\n    \r\n    **Answer:**\r\n    As long as the function is in use.\r\n\r\n79. **What is the scope of a variable defined in a decorator (if supported)?**\r\n    \r\n    **Answer:**\r\n    It is local to the decorator function.\r\n\r\n80. **What is the lifetime of a variable defined in a decorator?**\r\n    \r\n    **Answer:**\r\n    As long as the decorator exists.\r\n\r\n---\r\n\r\n### Scope and Lifetime of Variables\r\n**Explanation:**\r\nScope determines where a variable can be used. Lifetime is how long a variable exists in memory.\r\n\r\n#### Coding Questions & Answers\r\n##### Q1\r\n**Question:** What is variable scope?\r\n   \r\n   **Answer:**\r\n   Scope is the part of the program where a variable can be used.\r\n\r\n2. **What is variable lifetime?**\r\n   \r\n   **Answer:**\r\n   Lifetime is how long a variable exists in memory while the program runs.\r\n\r\n3. **What is a global variable?**\r\n   \r\n   **Answer:**\r\n   A variable defined outside any function; it can be used anywhere in the file.\r\n\r\n4. **What is a local variable?**\r\n   \r\n   **Answer:**\r\n   A variable defined inside a function; it can only be used inside that function.\r\n\r\n5. **Can a local variable be used outside its function?**\r\n   \r\n   **Answer:**\r\n   No, it only exists inside the function.\r\n\r\n6. **Can a global variable be used inside a function?**\r\n   \r\n   **Answer:**\r\n   Yes, unless a local variable with the same name is defined.\r\n\r\n7. **What happens if you use a variable before defining it?**\r\n   \r\n   **Answer:**\r\n   You get an error.\r\n\r\n8. **What happens to a local variable after the function ends?**\r\n   \r\n   **Answer:**\r\n   It is destroyed and cannot be used anymore.\r\n\r\n9. **What happens to a global variable after the program ends?**\r\n   \r\n   **Answer:**\r\n   It is destroyed and memory is freed.\r\n\r\n10. **Can two functions have local variables with the same name?**\r\n    \r\n    **Answer:**\r\n    Yes, each function's local variables are separate.\r\n\r\n11. **Can a function change a global variable?**\r\n    \r\n    **Answer:**\r\n    Yes, if you declare it as global inside the function.\r\n\r\n12. **How do you declare a global variable inside a function?**\r\n    \r\n    **Answer:**\r\n    Use the `global` keyword (if supported).\r\n\r\n13. **What is variable shadowing?**\r\n    \r\n    **Answer:**\r\n    When a local variable has the same name as a global variable, the local one is used inside the function.\r\n\r\n14. **What is the scope of a variable defined in a loop?**\r\n    \r\n    **Answer:**\r\n    Usually, it is accessible in the block where it is defined.\r\n\r\n15. **What is the scope of a variable defined in an if statement?**\r\n    \r\n    **Answer:**\r\n    Usually, it is accessible in the block where it is defined.\r\n\r\n16. **What is the lifetime of a variable defined in a function?**\r\n    \r\n    **Answer:**\r\n    From when the function starts until it ends.\r\n\r\n17. **What is the lifetime of a global variable?**\r\n    \r\n    **Answer:**\r\n    From when it is defined until the program ends.\r\n\r\n18. **Can you have a variable with the same name in different scopes?**\r\n    \r\n    **Answer:**\r\n    Yes, but they are different variables.\r\n\r\n19. **What is a block scope?**\r\n    \r\n    **Answer:**\r\n    The area inside curly braces `{}` or indentation where a variable is defined.\r\n\r\n20. **What is a function scope?**\r\n    \r\n    **Answer:**\r\n    The area inside a function definition.\r\n\r\n21. **What is the difference between local and global scope?**\r\n    \r\n    **Answer:**\r\n    Local scope is inside a function; global scope is outside all functions.\r\n\r\n22. **Can a variable be both local and global?**\r\n    \r\n    **Answer:**\r\n    No, it is either local or global in a given context.\r\n\r\n23. **What happens if you change a global variable inside a function without declaring it global?**\r\n    \r\n    **Answer:**\r\n    It creates a new local variable with the same name.\r\n\r\n24. **How do you access a global variable inside a function?**\r\n    \r\n    **Answer:**\r\n    Just use its name, unless a local variable with the same name exists.\r\n\r\n25. **What is the scope of a variable defined in a for loop?**\r\n    \r\n    **Answer:**\r\n    It is usually accessible after the loop ends (unless block scope is enforced).\r\n\r\n26. **What is the scope of a variable defined in an if block?**\r\n    \r\n    **Answer:**\r\n    It is usually accessible after the block ends (unless block scope is enforced).\r\n\r\n27. **What is the lifetime of a variable defined in a function?**\r\n    \r\n    **Answer:**\r\n    From when the function is called until it ends.\r\n\r\n28. **What is the lifetime of a global variable?**\r\n    \r\n    **Answer:**\r\n    As long as the program runs.\r\n\r\n29. **Can a variable be both a parameter and a local variable?**\r\n    \r\n    **Answer:**\r\n    Yes, but the parameter takes precedence inside the function.\r\n\r\n30. **What is the scope of a variable defined in a list comprehension?**\r\n    \r\n    **Answer:**\r\n    It is local to the comprehension.\r\n\r\n31. **What is the lifetime of a variable defined in a list comprehension?**\r\n    \r\n    **Answer:**\r\n    It exists only during the comprehension's execution.\r\n\r\n32. **What is the scope of a variable defined in a generator expression?**\r\n    \r\n    **Answer:**\r\n    It is local to the generator expression.\r\n\r\n33. **What is the lifetime of a variable defined in a generator expression?**\r\n    \r\n    **Answer:**\r\n    It exists only during the generator's execution.\r\n\r\n34. **What is the scope of a variable defined in a try/finally block?**\r\n    \r\n    **Answer:**\r\n    It is accessible after the block ends.\r\n\r\n35. **What is the lifetime of a variable defined in a try/finally block?**\r\n    \r\n    **Answer:**\r\n    From when the block starts until it ends.\r\n\r\n36. **What is the scope of a variable defined in a with block?**\r\n    \r\n    **Answer:**\r\n    It is accessible after the block ends.\r\n\r\n37. **What is the lifetime of a variable defined in a with block?**\r\n    \r\n    **Answer:**\r\n    From when the block starts until it ends.\r\n\r\n38. **What is the scope of a variable defined in a case block (if supported)?**\r\n    \r\n    **Answer:**\r\n    It is local to the case block.\r\n\r\n39. **What is the lifetime of a variable defined in a case block?**\r\n    \r\n    **Answer:**\r\n    From when the block starts until it ends.\r\n\r\n40. **What is the scope of a variable defined in a match block (if supported)?**\r\n    \r\n    **Answer:**\r\n    It is local to the match block.\r\n\r\n41. **What is the lifetime of a variable defined in a match block?**\r\n    \r\n    **Answer:**\r\n    From when the block starts until it ends.\r\n\r\n42. **What is the scope of a variable defined in a for-each loop?**\r\n    \r\n    **Answer:**\r\n    It is accessible after the loop ends.\r\n\r\n43. **What is the lifetime of a variable defined in a for-each loop?**\r\n    \r\n    **Answer:**\r\n    From when the loop starts until it ends.\r\n\r\n44. **What is the scope of a variable defined in a while loop?**\r\n    \r\n    **Answer:**\r\n    It is accessible after the loop ends.\r\n\r\n45. **What is the lifetime of a variable defined in a while loop?**\r\n    \r\n    **Answer:**\r\n    From when the loop starts until it ends.\r\n\r\n46. **What is the scope of a variable defined in a do-while loop (if supported)?**\r\n    \r\n    **Answer:**\r\n    It is accessible after the loop ends.\r\n\r\n47. **What is the lifetime of a variable defined in a do-while loop?**\r\n    \r\n    **Answer:**\r\n    From when the loop starts until it ends.\r\n\r\n48. **What is the scope of a variable defined in a function default parameter?**\r\n    \r\n    **Answer:**\r\n    It is local to the function.\r\n\r\n49. **What is the lifetime of a variable defined in a function default parameter?**\r\n    \r\n    **Answer:**\r\n    As long as the function is in use.\r\n\r\n50. **What is the scope of a variable defined in a decorator (if supported)?**\r\n    \r\n    **Answer:**\r\n    It is local to the decorator function.\r\n\r\n51. **What is the lifetime of a variable defined in a decorator?**\r\n    \r\n    **Answer:**\r\n    As long as the decorator exists.\r\n\r\n52. **What is the scope of a variable defined in a static method?**\r\n    \r\n    **Answer:**\r\n    It is local to the static method.\r\n\r\n53. **What is the lifetime of a variable defined in a static method?**\r\n    \r\n    **Answer:**\r\n    From when the method is called until it ends.\r\n\r\n54. **What is the scope of a variable defined in a class method?**\r\n    \r\n    **Answer:**\r\n    It is local to the class method unless declared as a class variable.\r\n\r\n55. **What is the lifetime of a variable defined in a class method?**\r\n    \r\n    **Answer:**\r\n    From when the method is called until it ends.\r\n\r\n56. **What is the scope of a variable defined in a lambda?**\r\n    \r\n    **Answer:**\r\n    It is local to the lambda function.\r\n\r\n57. **What is the lifetime of a variable defined in a lambda?**\r\n    \r\n    **Answer:**\r\n    As long as the lambda exists.\r\n\r\n58. **Can a variable be both a parameter and a local variable?**\r\n    \r\n    **Answer:**\r\n    Yes, but the parameter takes precedence inside the function.\r\n\r\n59. **What is the scope of a variable defined in a list comprehension?**\r\n    \r\n    **Answer:**\r\n    It is local to the comprehension.\r\n\r\n60. **What is the lifetime of a variable defined in a list comprehension?**\r\n    \r\n    **Answer:**\r\n    It exists only during the comprehension's execution.\r\n\r\n61. **What is the scope of a variable defined in a generator expression?**\r\n    \r\n    **Answer:**\r\n    It is local to the generator expression.\r\n\r\n62. **What is the lifetime of a variable defined in a generator expression?**\r\n    \r\n    **Answer:**\r\n    It exists only during the generator's execution.\r\n\r\n63. **What is the scope of a variable defined in a try/finally block?**\r\n    \r\n    **Answer:**\r\n    It is accessible after the block ends.\r\n\r\n64. **What is the lifetime of a variable defined in a try/finally block?**\r\n    \r\n    **Answer:**\r\n    From when the block starts until it ends.\r\n\r\n65. **What is the scope of a variable defined in a with block?**\r\n    \r\n    **Answer:**\r\n    It is accessible after the block ends.\r\n\r\n66. **What is the lifetime of a variable defined in a with block?**\r\n    \r\n    **Answer:**\r\n    From when the block starts until it ends.\r\n\r\n67. **What is the scope of a variable defined in a case block (if supported)?**\r\n    \r\n    **Answer:**\r\n    It is local to the case block.\r\n\r\n68. **What is the lifetime of a variable defined in a case block?**\r\n    \r\n    **Answer:**\r\n    From when the block starts until it ends.\r\n\r\n69. **What is the scope of a variable defined in a match block (if supported)?**\r\n    \r\n    **Answer:**\r\n    It is local to the match block.\r\n\r\n70. **What is the lifetime of a variable defined in a match block?**\r\n    \r\n    **Answer:**\r\n    From when the block starts until it ends.\r\n\r\n71. **What is the scope of a variable defined in a for-each loop?**\r\n    \r\n    **Answer:**\r\n    It is accessible after the loop ends.\r\n\r\n72. **What is the lifetime of a variable defined in a for-each loop?**\r\n    \r\n    **Answer:**\r\n    From when the loop starts until it ends.\r\n\r\n73. **What is the scope of a variable defined in a while loop?**\r\n    \r\n    **Answer:**\r\n    It is accessible after the loop ends.\r\n\r\n74. **What is the lifetime of a variable defined in a while loop?**\r\n    \r\n    **Answer:**\r\n    From when the loop starts until it ends.\r\n\r\n75. **What is the scope of a variable defined in a do-while loop (if supported)?**\r\n    \r\n    **Answer:**\r\n    It is accessible after the loop ends.\r\n\r\n76. **What is the lifetime of a variable defined in a do-while loop?**\r\n    \r\n    **Answer:**\r\n    From when the loop starts until it ends.\r\n\r\n77. **What is the scope of a variable defined in a function default parameter?**\r\n    \r\n    **Answer:**\r\n    It is local to the function.\r\n\r\n78. **What is the lifetime of a variable defined in a function default parameter?**\r\n    \r\n    **Answer:**\r\n    As long as the function is in use.\r\n\r\n79. **What is the scope of a variable defined in a decorator (if supported)?**\r\n    \r\n    **Answer:**\r\n    It is local to the decorator function.\r\n\r\n80. **What is the lifetime of a variable defined in a decorator?**\r\n    \r\n    **Answer:**\r\n    As long as the decorator exists.\r\n\r\n---\r\n\r\n### Scope and Lifetime of Variables\r\n**Explanation:**\r\nScope determines where a variable can be used. Lifetime is how long a variable exists in memory.\r\n\r\n#### Coding Questions & Answers\r\n##### Q1\r\n**Question:** What is variable scope?\r\n   \r\n   **Answer:**\r\n   Scope is the part of the program where a variable can be used.\r\n\r\n2. **What is variable lifetime?**\r\n   \r\n   **Answer:**\r\n   Lifetime is how long a variable exists in memory while the program runs.\r\n\r\n3. **What is a global variable?**\r\n   \r\n   **Answer:**\r\n   A variable defined outside any function; it can be used anywhere in the file.\r\n\r\n4. **What is a local variable?**\r\n   \r\n   **Answer:**\r\n   A variable defined inside a function; it can only be used inside that function.\r\n\r\n5. **Can a local variable be used outside its function?**\r\n   \r\n   **Answer:**\r\n   No, it only exists inside the function.\r\n\r\n6. **Can a global variable be used inside a function?**\r\n   \r\n   **Answer:**\r\n   Yes, unless a local variable with the same name is defined.\r\n\r\n7. **What happens if you use a variable before defining it?**\r\n   \r\n   **Answer:**\r\n   You get an error.\r\n\r\n8. **What happens to a local variable after the function ends?**\r\n   \r\n   **Answer:**\r\n   It is destroyed and cannot be used anymore.\r\n\r\n9. **What happens to a global variable after the program ends?**\r\n   \r\n   **Answer:**\r\n   It is destroyed and memory is freed.\r\n\r\n10. **Can two functions have local variables with the same name?**\r\n    \r\n    **Answer:**\r\n    Yes, each function's local variables are separate.\r\n\r\n11. **Can a function change a global variable?**\r\n    \r\n    **Answer:**\r\n    Yes, if you declare it as global inside the function.\r\n\r\n12. **How do you declare a global variable inside a function?**\r\n    \r\n    **Answer:**\r\n    Use the `global` keyword (if supported).\r\n\r\n13. **What is variable shadowing?**\r\n    \r\n    **Answer:**\r\n    When a local variable has the same name as a global variable, the local one is used inside the function.\r\n\r\n14. **What is the scope of a variable defined in a loop?**\r\n    \r\n    **Answer:**\r\n    Usually, it is accessible in the block where it is defined.\r\n\r\n15. **What is the scope of a variable defined in an if statement?**\r\n    \r\n    **Answer:**\r\n    Usually, it is accessible in the block where it is defined.\r\n\r\n16. **What is the lifetime of a variable defined in a function?**\r\n    \r\n    **Answer:**\r\n    From when the function starts until it ends.\r\n\r\n17. **What is the lifetime of a global variable?**\r\n    \r\n    **Answer:**\r\n    From when it is defined until the program ends.\r\n\r\n18. **Can you have a variable with the same name in different scopes?**\r\n    \r\n    **Answer:**\r\n    Yes, but they are different variables.\r\n\r\n19. **What is a block scope?**\r\n    \r\n    **Answer:**\r\n    The area inside curly braces `{}` or indentation where a variable is defined.\r\n\r\n20. **What is a function scope?**\r\n    \r\n    **Answer:**\r\n    The area inside a function definition.\r\n\r\n21. **What is the difference between local and global scope?**\r\n    \r\n    **Answer:**\r\n    Local scope is inside a function; global scope is outside all functions.\r\n\r\n22. **Can a variable be both local and global?**\r\n    \r\n    **Answer:**\r\n    No, it is either local or global in a given context.\r\n\r\n23. **What happens if you change a global variable inside a function without declaring it global?**\r\n    \r\n    **Answer:**\r\n    It creates a new local variable with the same name.\r\n\r\n24. **How do you access a global variable inside a function?**\r\n    \r\n    **Answer:**\r\n    Just use its name, unless a local variable with the same name exists.\r\n\r\n25. **What is the scope of a variable defined in a for loop?**\r\n    \r\n    **Answer:**\r\n    It is usually accessible after the loop ends (unless block scope is enforced).\r\n\r\n26. **What is the scope of a variable defined in an if block?**\r\n    \r\n    **Answer:**\r\n    It is usually accessible after the block ends (unless block scope is enforced).\r\n\r\n27. **What is the lifetime of a variable defined in a function?**\r\n    \r\n    **Answer:**\r\n    From when the function is called until it ends.\r\n\r\n28. **What is the lifetime of a global variable?**\r\n    \r\n    **Answer:**\r\n    As long as the program runs.\r\n\r\n29. **Can a variable be both a parameter and a local variable?**\r\n    \r\n    **Answer:**\r\n    Yes, but the parameter takes precedence inside the function.\r\n\r\n30. **What is the scope of a variable defined in a list comprehension?**\r\n    \r\n    **Answer:**\r\n    It is local to the comprehension.\r\n\r\n31. **What is the lifetime of a variable defined in a list comprehension?**\r\n    \r\n    **Answer:**\r\n    It exists only during the comprehension's execution.\r\n\r\n32. **What is the scope of a variable defined in a generator expression?**\r\n    \r\n    **Answer:**\r\n    It is local to the generator expression.\r\n\r\n33. **What is the lifetime of a variable defined in a generator expression?**\r\n    \r\n    **Answer:**\r\n    It exists only during the generator's execution.\r\n\r\n34. **What is the scope of a variable defined in a try/finally block?**\r\n    \r\n    **Answer:**\r\n    It is accessible after the block ends.\r\n\r\n35. **What is the lifetime of a variable defined in a try/finally block?**\r\n    \r\n    **Answer:**\r\n    From when the block starts until it ends.\r\n\r\n36. **What is the scope of a variable defined in a with block?**\r\n    \r\n    **Answer:**\r\n    It is accessible after the block ends.\r\n\r\n37. **What is the lifetime of a variable defined in a with block?**\r\n    \r\n    **Answer:**\r\n    From when the block starts until it ends.\r\n\r\n38. **What is the scope of a variable defined in a case block (if supported)?**\r\n    \r\n    **Answer:**\r\n    It is local to the case block.\r\n\r\n39. **What is the lifetime of a variable defined in a case block?**\r\n    \r\n    **Answer:**\r\n    From when the block starts until it ends.\r\n\r\n40. **What is the scope of a variable defined in a match block (if supported)?**\r\n    \r\n    **Answer:**\r\n    It is local to the match block.\r\n\r\n41. **What is the lifetime of a variable defined in a match block?**\r\n    \r\n    **Answer:**\r\n    From when the block starts until it ends.\r\n\r\n42. **What is the scope of a variable defined in a for-each loop?**\r\n    \r\n    **Answer:**\r\n    It is accessible after the loop ends.\r\n\r\n43. **What is the lifetime of a variable defined in a for-each loop?**\r\n    \r\n    **Answer:**\r\n    From when the loop starts until it ends.\r\n\r\n44. **What is the scope of a variable defined in a while loop?**\r\n    \r\n    **Answer:**\r\n    It is accessible after the loop ends.\r\n\r\n45. **What is the lifetime of a variable defined in a while loop?**\r\n    \r\n    **Answer:**\r\n    From when the loop starts until it ends.\r\n\r\n46. **What is the scope of a variable defined in a do-while loop (if supported)?**\r\n    \r\n    **Answer:**\r\n    It is accessible after the loop ends.\r\n\r\n47. **What is the lifetime of a variable defined in a do-while loop?**\r\n    \r\n    **Answer:**\r\n    From when the loop starts until it ends.\r\n\r\n48. **What is the scope of a variable defined in a function default parameter?**\r\n    \r\n    **Answer:**\r\n    It is local to the function.\r\n\r\n49. **What is the lifetime of a variable defined in a function default parameter?**\r\n    \r\n    **Answer:**\r\n    As long as the function is in use.\r\n\r\n50. **What is the scope of a variable defined in a decorator (if supported)?**\r\n    \r\n    **Answer:**\r\n    It is local to the decorator function.\r\n\r\n51. **What is the lifetime of a variable defined in a decorator?**\r\n    \r\n    **Answer:**\r\n    As long as the decorator exists.\r\n\r\n52. **What is the scope of a variable defined in a static method?**\r\n    \r\n    **Answer:**\r\n    It is local to the static method.\r\n\r\n53. **What is the lifetime of a variable defined in a static method?**\r\n    \r\n    **Answer:**\r\n    From when the method is called until it ends.\r\n\r\n54. **What is the scope of a variable defined in a class method?**\r\n    \r\n    **Answer:**\r\n    It is local to the class method unless declared as a class variable.\r\n\r\n55. **What is the lifetime of a variable defined in a class method?**\r\n    \r\n    **Answer:**\r\n    From when the method is called until it ends.\r\n\r\n56. **What is the scope of a variable defined in a lambda?**\r\n    \r\n    **Answer:**\r\n    It is local to the lambda function.\r\n\r\n57. **What is the lifetime of a variable defined in a lambda?**\r\n    \r\n    **Answer:**\r\n    As long as the lambda exists.\r\n\r\n58. **Can a variable be both a parameter and a local variable?**\r\n    \r\n    **Answer:**\r\n    Yes, but the parameter takes precedence inside the function.\r\n\r\n59. **What is the scope of a variable defined in a list comprehension?**\r\n    \r\n    **Answer:**\r\n    It is local to the comprehension.\r\n\r\n60. **What is the lifetime of a variable defined in a list comprehension?**\r\n    \r\n    **Answer:**\r\n    It exists only during the comprehension's execution.\r\n\r\n61. **What is the scope of a variable defined in a generator expression?**\r\n    \r\n    **Answer:**\r\n    It is local to the generator expression.\r\n\r\n62. **What is the lifetime of a variable defined in a generator expression?**\r\n    \r\n    **Answer:**\r\n    It exists only during the generator's execution.\r\n\r\n63. **What is the scope of a variable defined in a try/finally block?**\r\n    \r\n    **Answer:**\r\n    It is accessible after the block ends.\r\n\r\n64. **What is the lifetime of a variable defined in a try/finally block?**\r\n    \r\n    **Answer:**\r\n    From when the block starts until it ends.\r\n\r\n65. **What is the scope of a variable defined in a with block?**\r\n    \r\n    **Answer:**\r\n    It is accessible after the block ends.\r\n\r\n66. **What is the lifetime of a variable defined in a with block?**\r\n    \r\n    **Answer:**\r\n    From when the block starts until it ends.\r\n\r\n67. **What is the scope of a variable defined in a case block (if supported)?**\r\n    \r\n    **Answer:**\r\n    It is local to the case block.\r\n\r\n68. **What is the lifetime of a variable defined in a case block?**\r\n    \r\n    **Answer:**\r\n    From when the block starts until it ends.\r\n\r\n69. **What is the scope of a variable defined in a match block (if supported)?**\r\n    \r\n    **Answer:**\r\n    It is local to the match block.\r\n\r\n70. **What is the lifetime of a variable defined in a match block?**\r\n    \r\n    **Answer:**\r\n    From when the block starts until it ends.\r\n\r\n71. **What is the scope of a variable defined in a for-each loop?**\r\n    \r\n    **Answer:**\r\n    It is accessible after the loop ends.\r\n\r\n72. **What is the lifetime of a variable defined in a for-each loop?**\r\n    \r\n    **Answer:**\r\n    From when the loop starts until it ends.\r\n\r\n73. **What is the scope of a variable defined in a while loop?**\r\n    \r\n    **Answer:**\r\n    It is accessible after the loop ends.\r\n\r\n74. **What is the lifetime of a variable defined in a while loop?**\r\n    \r\n    **Answer:**\r\n    From when the loop starts until it ends.\r\n\r\n75. **What is the scope of a variable defined in a do-while loop (if supported)?**\r\n    \r\n    **Answer:**\r\n    It is accessible after the loop ends.\r\n\r\n76. **What is the lifetime of a variable defined in a do-while loop?**\r\n    \r\n    **Answer:**\r\n    From when the loop starts until it ends.\r\n\r\n77. **What is the scope of a variable defined in a function default parameter?**\r\n    \r\n    **Answer:**\r\n    It is local to the function.\r\n\r\n78. **What is the lifetime of a variable defined in a function default parameter?**\r\n    \r\n    **Answer:**\r\n    As long as the function is in use.\r\n\r\n79. **What is the scope of a variable defined in a decorator (if supported)?**\r\n    \r\n    **Answer:**\r\n    It is local to the decorator function.\r\n\r\n80. **What is the lifetime of a variable defined in a decorator?**\r\n    \r\n    **Answer:**\r\n    As long as the decorator exists.\r\n\r\n---\r\n\r\n### Scope and Lifetime of Variables\r\n**Explanation:**\r\nScope determines where a variable can be used. Lifetime is how long a variable exists in memory.\r\n\r\n#### Coding Questions & Answers\r\n##### Q1\r\n**Question:** What is variable scope?\r\n   \r\n   **Answer:**\r\n   Scope is the part of the program where a variable can be used.\r\n\r\n2. **What is variable lifetime?**\r\n   \r\n   **Answer:**\r\n   Lifetime is how long a variable exists in memory while the program runs.\r\n\r\n3. **What is a global variable?**\r\n   \r\n   **Answer:**\r\n   A variable defined outside any function; it can be used anywhere in the file.\r\n\r\n4. **What is a local variable?**\r\n   \r\n   **Answer:**\r\n   A variable defined inside a function; it can only be used inside that function.\r\n\r\n5. **Can a local variable be used outside its function?**\r\n   \r\n   **Answer:**\r\n   No, it only exists inside the function.\r\n\r\n6. **Can a global variable be used inside a function?**\r\n   \r\n   **Answer:**\r\n   Yes, unless a local variable with the same name is defined.\r\n\r\n7. **What happens if you use a variable before defining it?**\r\n   \r\n   **Answer:**\r\n   You get an error.\r\n\r\n8. **What happens to a local variable after the function ends?**\r\n   \r\n   **Answer:**\r\n   It is destroyed and cannot be used anymore.\r\n\r\n9. **What happens to a global variable after the program ends?**\r\n   \r\n   **Answer:**\r\n   It is destroyed and memory is freed.\r\n\r\n10. **Can two functions have local variables with the same name?**\r\n    \r\n    **Answer:**\r\n    Yes, each function's local variables are separate.\r\n\r\n11. **Can a function change a global variable?**\r\n    \r\n    **Answer:**\r\n    Yes, if you declare it as global inside the function.\r\n\r\n12. **How do you declare a global variable inside a function?**\r\n    \r\n    **Answer:**\r\n    Use the `global` keyword (if supported).\r\n\r\n13. **What is variable shadowing?**\r\n    \r\n    **Answer:**\r\n    When a local variable has the same name as a global variable, the local one is used inside the function.\r\n\r\n14. **What is the scope of a variable defined in a loop?**\r\n    \r\n    **Answer:**\r\n    Usually, it is accessible in the block where it is defined.\r\n\r\n15. **What is the scope of a variable defined in an if statement?**\r\n    \r\n    **Answer:**\r\n    Usually, it is accessible in the block where it is defined.\r\n\r\n16. **What is the lifetime of a variable defined in a function?**\r\n    \r\n    **Answer:**\r\n    From when the function starts until it ends.\r\n\r\n17. **What is the lifetime of a global variable?**\r\n    \r\n    **Answer:**\r\n    From when it is defined until the program ends.\r\n\r\n18. **Can you have a variable with the same name in different scopes?**\r\n    \r\n    **Answer:**\r\n    Yes, but they are different variables.\r\n\r\n19. **What is a block scope?**\r\n    \r\n    **Answer:**\r\n    The area inside curly braces `{}` or indentation where a variable is defined.\r\n\r\n20. **What is a function scope?**\r\n    \r\n    **Answer:**\r\n    The area inside a function definition.\r\n\r\n21. **What is the difference between local and global scope?**\r\n    \r\n    **Answer:**\r\n    Local scope is inside a function; global scope is outside all functions.\r\n\r\n22. **Can a variable be both local and global?**\r\n    \r\n    **Answer:**\r\n    No, it is either local or global in a given context.\r\n\r\n23. **What happens if you change a global variable inside a function without declaring it global?**\r\n    \r\n    **Answer:**\r\n    It creates a new local variable with the same name.\r\n\r\n24. **How do you access a global variable inside a function?**\r\n    \r\n    **Answer:**\r\n    Just use its name, unless a local variable with the same name exists.\r\n\r\n25. **What is the scope of a variable defined in a for loop?**\r\n    \r\n    **Answer:**\r\n    It is usually accessible after the loop ends (unless block scope is enforced).\r\n\r\n26. **What is the scope of a variable defined in an if block?**\r\n    \r\n    **Answer:**\r\n    It is usually accessible after the block ends (unless block scope is enforced).\r\n\r\n27. **What is the lifetime of a variable defined in a function?**\r\n    \r\n    **Answer:**\r\n    From when the function is called until it ends.\r\n\r\n28. **What is the lifetime of a global variable?**\r\n    \r\n    **Answer:**\r\n    As long as the program runs.\r\n\r\n29. **Can a variable be both a parameter and a local variable?**\r\n    \r\n    **Answer:**\r\n    Yes, but the parameter takes precedence inside the function.\r\n\r\n30. **What is the scope of a variable defined in a list comprehension?**\r\n    \r\n    **Answer:**\r\n    It is local to the comprehension.\r\n\r\n31. **What is the lifetime of a variable defined in a list comprehension?**\r\n    \r\n    **Answer:**\r\n    It exists only during the comprehension's execution.\r\n\r\n32. **What is the scope of a variable defined in a generator expression?**\r\n    \r\n    **Answer:**\r\n    It is local to the generator expression.\r\n\r\n33. **What is the lifetime of a variable defined in a generator expression?**\r\n    \r\n    **Answer:**\r\n    It exists only during the generator's execution.\r\n\r\n34. **What is the scope of a variable defined in a try/finally block?**\r\n    \r\n    **Answer:**\r\n    It is accessible after the block ends.\r\n\r\n35. **What is the lifetime of a variable defined in a try/finally block?**\r\n    \r\n    **Answer:**\r\n    From when the block starts until it ends.\r\n\r\n36. **What is the scope of a variable defined in a with block?**\r\n    \r\n    **Answer:**\r\n    It is accessible after the block ends.\r\n\r\n37. **What is the lifetime of a variable defined in a with block?**\r\n    \r\n    **Answer:**\r\n    From when the block starts until it ends.\r\n\r\n38. **What is the scope of a variable defined in a case block (if supported)?**\r\n    \r\n    **Answer:**\r\n    It is local to the case block.\r\n\r\n39. **What is the lifetime of a variable defined in a case block?**\r\n    \r\n    **Answer:**\r\n    From when the block starts until it ends.\r\n\r\n40. **What is the scope of a variable defined in a match block (if supported)?**\r\n    \r\n    **Answer:**\r\n    It is local to the match block.\r\n\r\n41. **What is the lifetime of a variable defined in a match block?**\r\n    \r\n    **Answer:**\r\n    From when the block starts until it ends.\r\n\r\n42. **What is the scope of a variable defined in a for-each loop?**\r\n    \r\n    **Answer:**\r\n    It is accessible after the loop ends.\r\n\r\n43. **What is the lifetime of a variable defined in a for-each loop?**\r\n    \r\n    **Answer:**\r\n    From when the loop starts until it ends.\r\n\r\n44. **What is the scope of a variable defined in a while loop?**\r\n    \r\n    **Answer:**\r\n    It is accessible after the loop ends.\r\n\r\n45. **What is the lifetime of a variable defined in a while loop?**\r\n    \r\n    **Answer:**\r\n    From when the loop starts until it ends.\r\n\r\n46. **What is the scope of a variable defined in a do-while loop (if supported)?**\r\n    \r\n    **Answer:**\r\n    It is accessible after the loop ends.\r\n\r\n47. **What is the lifetime of a variable defined in a do-while loop?**\r\n    \r\n    **Answer:**\r\n    From when the loop starts until it ends.\r\n\r\n48. **What is the scope of a variable defined in a function default parameter?**\r\n    \r\n    **Answer:**\r\n    It is local to the function.\r\n\r\n49. **What is the lifetime of a variable defined in a function default parameter?**\r\n    \r\n    **Answer:**\r\n    As long as the function is in use.\r\n\r\n50. **What is the scope of a variable defined in a decorator (if supported)?**\r\n    \r\n    **Answer:**\r\n    It is local to the decorator function.\r\n\r\n51. **What is the lifetime of a variable defined in a decorator?**\r\n    \r\n    **Answer:**\r\n    As long as the decorator exists.\r\n\r\n52. **What is the scope of a variable defined in a static method?**\r\n    \r\n    **Answer:**\r\n    It is local to the static method.\r\n\r\n53. **What is the lifetime of a variable defined in a static method?**\r\n    \r\n    **Answer:**\r\n    From when the method is called until it ends.\r\n\r\n54. **What is the scope of a variable defined in a class method?**\r\n    \r\n    **Answer:**\r\n    It is local to the class method unless declared as a class variable.\r\n\r\n55. **What is the lifetime of a variable defined in a class method?**\r\n    \r\n    **Answer:**\r\n    From when the method is called until it ends.\r\n\r\n56. **What is the scope of a variable defined in a lambda?**\r\n    \r\n    **Answer:**\r\n    It is local to the lambda function.\r\n\r\n57. **What is the lifetime of a variable defined in a lambda?**\r\n    \r\n    **Answer:**\r\n    As long as the lambda exists.\r\n\r\n58. **Can a variable be both a parameter and a local variable?**\r\n    \r\n    **Answer:**\r\n    Yes, but the parameter takes precedence inside the function.\r\n\r\n59. **What is the scope of a variable defined in a list comprehension?**\r\n    \r\n    **Answer:**\r\n    It is local to the comprehension.\r\n\r\n60. **What is the lifetime of a variable defined in a list comprehension?**\r\n    \r\n    **Answer:**\r\n    It exists only during the comprehension's execution.\r\n\r\n61. **What is the scope of a variable defined in a generator expression?**\r\n    \r\n    **Answer:**\r\n    It is local to the generator expression.\r\n\r\n62. **What is the lifetime of a variable defined in a generator expression?**\r\n    \r\n    **Answer:**\r\n    It exists only during the generator's execution.\r\n\r\n63. **What is the scope of a variable defined in a try/finally block?**\r\n    \r\n    **Answer:**\r\n    It is accessible after the block ends.\r\n\r\n64. **What is the lifetime of a variable defined in a try/finally block?**\r\n    \r\n    **Answer:**\r\n    From when the block starts until it ends.\r\n\r\n65. **What is the scope of a variable defined in a with block?**\r\n    \r\n    **Answer:**\r\n    It is accessible after the block ends.\r\n\r\n66. **What is the lifetime of a variable defined in a with block?**\r\n    \r\n    **Answer:**\r\n    From when the block starts until it ends.\r\n\r\n67. **What is the scope of a variable defined in a case block (if supported)?**\r\n    \r\n    **Answer:**\r\n    It is local to the case block.\r\n\r\n68. **What is the lifetime of a variable defined in a case block?**\r\n    \r\n    **Answer:**\r\n    From when the block starts until it ends.\r\n\r\n69. **What is the scope of a variable defined in a match block (if supported)?**\r\n    \r\n    **Answer:**\r\n    It is local to the match block.\r\n\r\n70. **What is the lifetime of a variable defined in a match block?**\r\n    \r\n    **Answer:**\r\n    From when the block starts until it ends.\r\n\r\n71. **What is the scope of a variable defined in a for-each loop?**\r\n    \r\n    **Answer:**\r\n    It is accessible after the loop ends.\r\n\r\n72. **What is the lifetime of a variable defined in a for-each loop?**\r\n    \r\n    **Answer:**\r\n    From when the loop starts until it ends.\r\n\r\n73. **What is the scope of a variable defined in a while loop?**\r\n    \r\n    **Answer:**\r\n    It is accessible after the loop ends.\r\n\r\n74. **What is the lifetime of a variable defined in a while loop?**\r\n    \r\n    **Answer:**\r\n    From when the loop starts until it ends.\r\n\r\n75. **What is the scope of a variable defined in a do-while loop (if supported)?**\r\n    \r\n    **Answer:**\r\n    It is accessible after the loop ends.\r\n\r\n76. **What is the lifetime of a variable defined in a do-while loop?**\r\n    \r\n    **Answer:**\r\n    From when the loop starts until it ends.\r\n\r\n77. **What is the scope of a variable defined in a function default parameter?**\r\n    \r\n    **Answer:**\r\n    It is local to the function.\r\n\r\n78. **What is the lifetime of a variable defined in a function default parameter?**\r\n    \r\n    **Answer:**\r\n    As long as the function is in use.\r\n\r\n79. **What is the scope of a variable defined in a decorator (if supported)?**\r\n    \r\n    **Answer:**\r\n    It is local to the decorator function.\r\n\r\n80. **What is the lifetime of a variable defined in a decorator?**\r\n    \r\n    **Answer:**\r\n    As long as the decorator exists.\r\n\r\n---\r\n\r\n### Scope and Lifetime of Variables\r\n**Explanation:**\r\nScope determines where a variable can be used. Lifetime is how long a variable exists in memory.\r\n\r\n#### Coding Questions & Answers\r\n##### Q1\r\n**Question:** What is variable scope?\r\n   \r\n   **Answer:**\r\n   Scope is the part of the program where a variable can be used.\r\n\r\n2. **What is variable lifetime?**\r\n   \r\n   **Answer:**\r\n   Lifetime is how long a variable exists in memory while the program runs.\r\n\r\n3. **What is a global variable?**\r\n   \r\n   **Answer:**\r\n   A variable defined outside any function; it can be used anywhere in the file.\r\n\r\n4. **What is a local variable?**\r\n   \r\n   **Answer:**\r\n   A variable defined inside a function; it can only be used inside that function.\r\n\r\n5. **Can a local variable be used outside its function?**\r\n   \r\n   **Answer:**\r\n   No, it only exists inside the function.\r\n\r\n6. **Can a global variable be used inside a function?**\r\n   \r\n   **Answer:**\r\n   Yes, unless a local variable with the same name is defined.\r\n\r\n7. **What happens if you use a variable before defining it?**\r\n   \r\n   **Answer:**\r\n   You get an error.\r\n\r\n8. **What happens to a local variable after the function ends?**\r\n   \r\n   **Answer:**\r\n   It is destroyed and cannot be used anymore.\r\n\r\n9. **What happens to a global variable after the program ends?**\r\n   \r\n   **Answer:**\r\n   It is destroyed and memory is freed.\r\n\r\n10. **Can two functions have local variables with the same name?**\r\n    \r\n    **Answer:**\r\n    Yes, each function's local variables are separate.\r\n\r\n11. **Can a function change a global variable?**\r\n    \r\n    **Answer:**\r\n    Yes, if you declare it as global inside the function.\r\n\r\n12. **How do you declare a global variable inside a function?**\r\n    \r\n    **Answer:**\r\n    Use the `global` keyword (if supported).\r\n\r\n13. **What is variable shadowing?**\r\n    \r\n    **Answer:**\r\n    When a local variable has the same name as a global variable, the local one is used inside the function.\r\n\r\n14. **What is the scope of a variable defined in a loop?**\r\n    \r\n    **Answer:**\r\n    Usually, it is accessible in the block where it is defined.\r\n\r\n15. **What is the scope of a variable defined in an if statement?**\r\n    \r\n    **Answer:**\r\n    Usually, it is accessible in the block where it is defined.\r\n\r\n16. **What is the lifetime of a variable defined in a function?**\r\n    \r\n    **Answer:**\r\n    From when the function starts until it ends.\r\n\r\n17. **What is the lifetime of a global variable?**\r\n    \r\n    **Answer:**\r\n    From when it is defined until the program ends.\r\n\r\n18. **Can you have a variable with the same name in different scopes?**\r\n    \r\n    **Answer:**\r\n    Yes, but they are different variables.\r\n\r\n19. **What is a block scope?**\r\n    \r\n    **Answer:**\r\n    The area inside curly braces `{}` or indentation where a variable is defined.\r\n\r\n20. **What is a function scope?**\r\n    \r\n    **Answer:**\r\n    The area inside a function definition.\r\n\r\n21. **What is the difference between local and global scope?**\r\n    \r\n    **Answer:**\r\n    Local scope is inside a function; global scope is outside all functions.\r\n\r\n22. **Can a variable be both local and global?**\r\n    \r\n    **Answer:**\r\n    No, it is either local or global in a given context.\r\n\r\n23. **What happens if you change a global variable inside a function without declaring it global?**\r\n    \r\n    **Answer:**\r\n    It creates a new local variable with the same name.\r\n\r\n24. **How do you access a global variable inside a function?**\r\n    \r\n    **Answer:**\r\n    Just use its name, unless a local variable with the same name exists.\r\n\r\n25. **What is the scope of a variable defined in a for loop?**\r\n    \r\n    **Answer:**\r\n    It is usually accessible after the loop ends (unless block scope is enforced).\r\n\r\n26. **What is the scope of a variable defined in an if block?**\r\n    \r\n    **Answer:**\r\n    It is usually accessible after the block ends (unless block scope is enforced).\r\n\r\n27. **What is the lifetime of a variable defined in a function?**\r\n    \r\n    **Answer:**\r\n    From when the function is called until it ends.\r\n\r\n28. **What is the lifetime of a global variable?**\r\n    \r\n    **Answer:**\r\n    As long as the program runs.\r\n\r\n29. **Can a variable be both a parameter and a local variable?**\r\n    \r\n    **Answer:**\r\n    Yes, but the parameter takes precedence inside the function.\r\n\r\n30. **What is the scope of a variable defined in a list comprehension?**\r\n    \r\n    **Answer:**\r\n    It is local to the comprehension.\r\n\r\n31. **What is the lifetime of a variable defined in a list comprehension?**\r\n    \r\n    **Answer:**\r\n    It exists only during the comprehension's execution.\r\n\r\n32. **What is the scope of a variable defined in a generator expression?**\r\n    \r\n    **Answer:**\r\n    It is local to the generator expression.\r\n\r\n33. **What is the lifetime of a variable defined in a generator expression?**\r\n    \r\n    **Answer:**\r\n    It exists only during the generator's execution.\r\n\r\n34. **What is the scope of a variable defined in a try/finally block?**\r\n    \r\n    **Answer:**\r\n    It is accessible after the block ends.\r\n\r\n35. **What is the lifetime of a variable defined in a try/finally block?**\r\n    \r\n    **Answer:**\r\n    From when the block starts until it ends.\r\n\r\n36. **What is the scope of a variable defined in a with block?**\r\n    \r\n    **Answer:**\r\n    It is accessible after the block ends.\r\n\r\n37. **What is the lifetime of a variable defined in a with block?**\r\n    \r\n    **Answer:**\r\n    From when the block starts until it ends.\r\n\r\n38. **What is the scope of a variable defined in a case block (if supported)?**\r\n    \r\n    **Answer:**\r\n    It is local to the case block.\r\n\r\n39. **What is the lifetime of a variable defined in a case block?**\r\n    \r\n    **Answer:**\r\n    From when the block starts until it ends.\r\n\r\n40. **What is the scope of a variable defined in a match block (if supported)?**\r\n    \r\n    **Answer:**\r\n    It is local to the match block.\r\n\r\n41. **What is the lifetime of a variable defined in a match block?**\r\n    \r\n    **Answer:**\r\n    From when the block starts until it ends.\r\n\r\n42. **What is the scope of a variable defined in a for-each loop?**\r\n    \r\n    **Answer:**\r\n    It is accessible after the loop ends.\r\n\r\n43. **What is the lifetime of a variable defined in a for-each loop?**\r\n    \r\n    **Answer:**\r\n    From when the loop starts until it ends.\r\n\r\n44. **What is the scope of a variable defined in a while loop?**\r\n    \r\n    **Answer:**\r\n    It is accessible after the loop ends.\r\n\r\n45. **What is the lifetime of a variable defined in a while loop?**\r\n    \r\n    **Answer:**\r\n    From when the loop starts until it ends.\r\n\r\n46. **What is the scope of a variable defined in a do-while loop (if supported)?**\r\n    \r\n    **Answer:**\r\n    It is accessible after the loop ends.\r\n\r\n47. **What is the lifetime of a variable defined in a do-while loop?**\r\n    \r\n    **Answer:**\r\n    From when the loop starts until it ends.\r\n\r\n48. **What is the scope of a variable defined in a function default parameter?**\r\n    \r\n    **Answer:**\r\n    It is local to the function.\r\n\r\n49. **What is the lifetime of a variable defined in a function default parameter?**\r\n    \r\n    **Answer:**\r\n    As long as the function is in use.\r\n\r\n50. **What is the scope of a variable defined in a decorator (if supported)?**\r\n    \r\n    **Answer:**\r\n    It is local to the decorator function.\r\n\r\n51. **What is the lifetime of a variable defined in a decorator?**\r\n    \r\n    **Answer:**\r\n    As long as the decorator exists.\r\n\r\n52. **What is the scope of a variable defined in a static method?**\r\n    \r\n    **Answer:**\r\n    It is local to the static method.\r\n\r\n53. **What is the lifetime of a variable defined in a static method?**\r\n    \r\n    **Answer:**\r\n    From when the method is called until it ends.\r\n\r\n54. **What is the scope of a variable defined in a class method?**\r\n    \r\n    **Answer:**\r\n    It is local to the class method unless declared as a class variable.\r\n\r\n55. **What is the lifetime of a variable defined in a class method?**\r\n    \r\n    **Answer:**\r\n    From when the method is called until it ends.\r\n\r\n56. **What is the scope of a variable defined in a lambda?**\r\n    \r\n    **Answer:**\r\n    It is local to the lambda function.\r\n\r\n57. **What is the lifetime of a variable defined in a lambda?**\r\n    \r\n    **Answer:**\r\n    As long as the lambda exists.\r\n\r\n58. **Can a variable be both a parameter and a local variable?**\r\n    \r\n    **Answer:**\r\n    Yes, but the parameter takes precedence inside the function.\r\n\r\n59. **What is the scope of a variable defined in a list comprehension?**\r\n    \r\n    **Answer:**\r\n    It is local to the comprehension.\r\n\r\n60. **What is the lifetime of a variable defined in a list comprehension?**\r\n    \r\n    **Answer:**\r\n    It exists only during the comprehension's execution.\r\n\r\n61. **What is the scope of a variable defined in a generator expression?**\r\n    \r\n    **Answer:**\r\n    It is local to the generator expression.\r\n\r\n62. **What is the lifetime of a variable defined in a generator expression?**\r\n    \r\n    **Answer:**\r\n    It exists only during the generator's execution.\r\n\r\n63. **What is the scope of a variable defined in a try/finally block?**\r\n    \r\n    **Answer:**\r\n    It is accessible after the block ends.\r\n\r\n64. **What is the lifetime of a variable defined in a try/finally block?**\r\n    \r\n    **Answer:**\r\n    From when the block starts until it ends.\r\n\r\n65. **What is the scope of a variable defined in a with block?**\r\n    \r\n    **Answer:**\r\n    It is accessible after the block ends.\r\n\r\n66. **What is the lifetime of a variable defined in a with block?**\r\n    \r\n    **Answer:**\r\n    From when the block starts until it ends.\r\n\r\n67. **What is the scope of a variable defined in a case block (if supported)?**\r\n    \r\n    **Answer:**\r\n    It is local to the case block.\r\n\r\n68. **What is the lifetime of a variable defined in a case block?**\r\n    \r\n    **Answer:**\r\n    From when the block starts until it ends.\r\n\r\n69. **What is the scope of a variable defined in a match block (if supported)?**\r\n    \r\n    **Answer:**\r\n    It is local to the match block.\r\n\r\n70. **What is the lifetime of a variable defined in a match block?**\r\n    \r\n    **Answer:**\r\n    From when the block starts until it ends.\r\n\r\n71. **What is the scope of a variable defined in a for-each loop?**\r\n    \r\n    **Answer:**\r\n    It is accessible after the loop ends.\r\n\r\n72. **What is the lifetime of a variable defined in a for-each loop?**\r\n    \r\n    **Answer:**\r\n    From when the loop starts until it ends.\r\n\r\n73. **What is the scope of a variable defined in a while loop?**\r\n    \r\n    **Answer:**\r\n    It is accessible after the loop ends.\r\n\r\n74. **What is the lifetime of a variable defined in a while loop?**\r\n    \r\n    **Answer:**\r\n    From when the loop starts until it ends.\r\n\r\n75. **What is the scope of a variable defined in a do-while loop (if supported)?**\r\n    \r\n    **Answer:**\r\n    It is accessible after the loop ends.\r\n\r\n76. **What is the lifetime of a variable defined in a do-while loop?**\r\n    \r\n    **Answer:**\r\n    From when the loop starts until it ends.\r\n\r\n77. **What is the scope of a variable defined in a function default parameter?**\r\n    \r\n    **Answer:**\r\n    It is local to the function.\r\n\r\n78. **What is the lifetime of a variable defined in a function default parameter?**\r\n    \r\n    **Answer:**\r\n    As long as the function is in use.\r\n\r\n79. **What is the scope of a variable defined in a decorator (if supported)?**\r\n    \r\n    **Answer:**\r\n    It is local to the decorator function.\r\n\r\n80. **What is the lifetime of a variable defined in a decorator?**\r\n    \r\n    **Answer:**\r\n    As long as the decorator exists.\r\n\r\n---\r\n\r\n### Scope and Lifetime of Variables\r\n**Explanation:**\r\nScope determines where a variable can be used. Lifetime is how long a variable exists in memory.\r\n\r\n#### Coding Questions & Answers\r\n##### Q1\r\n**Question:** What is variable scope?\r\n   \r\n   **Answer:**\r\n   Scope is the part of the program where a variable can be used.\r\n\r\n2. **What is variable lifetime?**\r\n   \r\n   **Answer:**\r\n   Lifetime is how long a variable exists in memory while the program runs.\r\n\r\n3. **What is a global variable?**\r\n   \r\n   **Answer:**\r\n   A variable defined outside any function; it can be used anywhere in the file.\r\n\r\n4. **What is a local variable?**\r\n   \r\n   **Answer:**\r\n   A variable defined inside a function; it can only be used inside that function.\r\n\r\n5. **Can a local variable be used outside its function?**\r\n   \r\n   **Answer:**\r\n   No, it only exists inside the function.\r\n\r\n6. **Can a global variable be used inside a function?**\r\n   \r\n   **Answer:**\r\n   Yes, unless a local variable with the same name is defined.\r\n\r\n7. **What happens if you use a variable before defining it?**\r\n   \r\n   **Answer:**\r\n   You get an error.\r\n\r\n8. **What happens to a local variable after the function ends?**\r\n   \r\n   **Answer:**\r\n   It is destroyed and cannot be used anymore.\r\n\r\n9. **What happens to a global variable after the program ends?**\r\n   \r\n   **Answer:**\r\n   It is destroyed and memory is freed.\r\n\r\n10. **Can two functions have local variables with the same name?**\r\n    \r\n    **Answer:**\r\n    Yes, each function's local variables are separate.\r\n\r\n11. **Can a function change a global variable?**\r\n    \r\n    **Answer:**\r\n    Yes, if you declare it as global inside the function.\r\n\r\n12. **How do you declare a global variable inside a function?**\r\n    \r\n    **Answer:**\r\n    Use the `global` keyword (if supported).\r\n\r\n13. **What is variable shadowing?**\r\n    \r\n    **Answer:**\r\n    When a local variable has the same name as a global variable, the local one is used inside the function.\r\n\r\n14. **What is the scope of a variable defined in a loop?**\r\n    \r\n    **Answer:**\r\n    Usually, it is accessible in the block where it is defined.\r\n\r\n15. **What is the scope of a variable defined in an if statement?**\r\n    \r\n    **Answer:**\r\n    Usually, it is accessible in the block where it is defined.\r\n\r\n16. **What is the lifetime of a variable defined in a function?**\r\n    \r\n    **Answer:**\r\n    From when the function starts until it ends.\r\n\r\n17. **What is the lifetime of a global variable?**\r\n    \r\n    **Answer:**\r\n    From when it is defined until the program ends.\r\n\r\n18. **Can you have a variable with the same name in different scopes?**\r\n    \r\n    **Answer:**\r\n    Yes, but they are different variables.\r\n\r\n19. **What is a block scope?**\r\n    \r\n    **Answer:**\r\n    The area inside curly braces `{}` or indentation where a variable is defined.\r\n\r\n20. **What is a function scope?**\r\n    \r\n    **Answer:**\r\n    The area inside a function definition.\r\n\r\n21. **What is the difference between local and global scope?**\r\n    \r\n    **Answer:**\r\n    Local scope is inside a function; global scope is outside all functions.\r\n\r\n22. **Can a variable be both local and global?**\r\n    \r\n    **Answer:**\r\n    No, it is either local or global in a given context.\r\n\r\n23. **What happens if you change a global variable inside a function without declaring it global?**\r\n    \r\n    **Answer:**\r\n    It creates a new local variable with the same name.\r\n\r\n24. **How do you access a global variable inside a function?**\r\n    \r\n    **Answer:**\r\n    Just use its name, unless a local variable with the same name exists.\r\n\r\n25. **What is the scope of a variable defined in a for loop?**\r\n    \r\n    **Answer:**\r\n    It is usually accessible after the loop ends (unless block scope is enforced).\r\n\r\n26. **What is the scope of a variable defined in an if block?**\r\n    \r\n    **Answer:**\r\n    It is usually accessible after the block ends (unless block scope is enforced).\r\n\r\n27. **What is the lifetime of a variable defined in a function?**\r\n    \r\n    **Answer:**\r\n    From when the function is called until it ends.\r\n\r\n28. **What is the lifetime of a global variable?**\r\n    \r\n    **Answer:**\r\n    As long as the program runs.\r\n\r\n29. **Can a variable be both a parameter and a local variable?**\r\n    \r\n    **Answer:**\r\n    Yes, but the parameter takes precedence inside the function.\r\n\r\n30. **What is the scope of a variable defined in a list comprehension?**\r\n    \r\n    **Answer:**\r\n    It is local to the comprehension.\r\n\r\n31. **What is the lifetime of a variable defined in a list comprehension?**\r\n    \r\n    **Answer:**\r\n    It exists only during the comprehension's execution.\r\n\r\n32. **What is the scope of a variable defined in a generator expression?**\r\n    \r\n    **Answer:**\r\n    It is local to the generator expression.\r\n\r\n33. **What is the lifetime of a variable defined in a generator expression?**\r\n    \r\n    **Answer:**\r\n    It exists only during the generator's execution.\r\n\r\n34. **What is the scope of a variable defined in a try/finally block?**\r\n    \r\n    **Answer:**\r\n    It is accessible after the block ends.\r\n\r\n35. **What is the lifetime of a variable defined in a try/finally block?**\r\n    \r\n    **Answer:**\r\n    From when the block starts until it ends.\r\n\r\n36. **What is the scope of a variable defined in a with block?**\r\n    \r\n    **Answer:**\r\n    It is accessible after the block ends.\r\n\r\n37. **What is the lifetime of a variable defined in a with block?**\r\n    \r\n    **Answer:**\r\n    From when the block starts until it ends.\r\n\r\n38. **What is the scope of a variable defined in a case block (if supported)?**\r\n    \r\n    **Answer:**\r\n    It is local to the case block.\r\n\r\n39. **What is the lifetime of a variable defined in a case block?**\r\n    \r\n    **Answer:**\r\n    From when the block starts until it ends.\r\n\r\n40. **What is the scope of a variable defined in a match block (if supported)?**\r\n    \r\n    **Answer:**\r\n    It is local to the match block.\r\n\r\n41. **What is the lifetime of a variable defined in a match block?**\r\n    \r\n    **Answer:**\r\n    From when the block starts until it ends.\r\n\r\n42. **What is the scope of a variable defined in a for-each loop?**\r\n    \r\n    **Answer:**\r\n    It is accessible after the loop ends.\r\n\r\n43. **What is the lifetime of a variable defined in a for-each loop?**\r\n    \r\n    **Answer:**\r\n    From when the loop starts until it ends.\r\n\r\n44. **What is the scope of a variable defined in a while loop?**\r\n    \r\n    **Answer:**\r\n    It is accessible after the loop ends.\r\n\r\n45. **What is the lifetime of a variable defined in a while loop?**\r\n    \r\n    **Answer:**\r\n    From when the loop starts until it ends.\r\n\r\n46. **What is the scope of a variable defined in a do-while loop (if supported)?**\r\n    \r\n    **Answer:**\r\n    It is accessible after the loop ends.\r\n\r\n47. **What is the lifetime of a variable defined in a do-while loop?**\r\n    \r\n    **Answer:**\r\n    From when the loop starts until it ends.\r\n\r\n48. **What is the scope of a variable defined in a function default parameter?**\r\n    \r\n    **Answer:**\r\n    It is local to the function.\r\n\r\n49. **What is the lifetime of a variable defined in a function default parameter?**\r\n    \r\n    **Answer:**\r\n    As long as the function is in use.\r\n\r\n50. **What is the scope of a variable defined in a decorator (if supported)?**\r\n    \r\n    **Answer:**\r\n    It is local to the decorator function.\r\n\r\n51. **What is the lifetime of a variable defined in a decorator?**\r\n    \r\n    **Answer:**\r\n    As long as the decorator exists.\r\n\r\n52. **What is the scope of a variable defined in a static method?**\r\n    \r\n    **Answer:**\r\n    It is local to the static method.\r\n\r\n53. **What is the lifetime of a variable defined in a static method?**\r\n    \r\n    **Answer:**\r\n    From when the method is called until it ends.\r\n\r\n54. **What is the scope of a variable defined in a class method?**\r\n    \r\n    **Answer:**\r\n    It is local to the class method unless declared as a class variable.\r\n\r\n55. **What is the lifetime of a variable defined in a class method?**\r\n    \r\n    **Answer:**\r\n    From when the method is called until it ends.\r\n\r\n56. **What is the scope of a variable defined in a lambda?**\r\n    \r\n    **Answer:**\r\n    It is local to the lambda function.\r\n\r\n57. **What is the lifetime of a variable defined in a lambda?**\r\n    \r\n    **Answer:**\r\n    As long as the lambda exists.\r\n\r\n58. **Can a variable be both a parameter and a local variable?**\r\n    \r\n    **Answer:**\r\n    Yes, but the parameter takes precedence inside the function.\r\n\r\n59. **What is the scope of a variable defined in a list comprehension?**\r\n    \r\n    **Answer:**\r\n    It is local to the comprehension.\r\n\r\n60. **What is the lifetime of a variable defined in a list comprehension?**\r\n    \r\n    **Answer:**\r\n    It exists only during the comprehension's execution.\r\n\r\n61. **What is the scope of a variable defined in a generator expression?**\r\n    \r\n    **Answer:**\r\n    It is local to the generator expression.\r\n\r\n62. **What is the lifetime of a variable defined in a generator expression?**\r\n    \r\n    **Answer:**\r\n    It exists only during the generator's execution.\r\n\r\n63. **What is the scope of a variable defined in a try/finally block?**\r\n    \r\n    **Answer:**\r\n    It is accessible after the block ends.\r\n\r\n64. **What is the lifetime of a variable defined in a try/finally block?**\r\n    \r\n    **Answer:**\r\n    From when the block starts until it ends.\r\n\r\n65. **What is the scope of a variable defined in a with block?**\r\n    \r\n    **Answer:**\r\n    It is accessible after the block ends.\r\n\r\n66. **What is the lifetime of a variable defined in a with block?**\r\n    \r\n    **Answer:**\r\n    From when the block starts until it ends.\r\n\r\n67. **What is the scope of a variable defined in a case block (if supported)?**\r\n    \r\n    **Answer:**\r\n    It is local to the case block.\r\n\r\n68. **What is the lifetime of a variable defined in a case block?**\r\n    \r\n    **Answer:**\r\n    From when the block starts until it ends.\r\n\r\n69. **What is the scope of a variable defined in a match block (if supported)?**\r\n    \r\n    **Answer:**\r\n    It is local to the match block.\r\n\r\n70. **What is the lifetime of a variable defined in a match block?**\r\n    \r\n    **Answer:**\r\n    From when the block starts until it ends.\r\n\r\n71. **What is the scope of a variable defined in a for-each loop?**\r\n    \r\n    **Answer:**\r\n    It is accessible after the loop ends.\r\n\r\n72. **What is the lifetime of a variable defined in a for-each loop?**\r\n    \r\n    **Answer:**\r\n    From when the loop starts until it ends.\r\n\r\n73. **What is the scope of a variable defined in a while loop?**\r\n    \r\n    **Answer:**\r\n    It is accessible after the loop ends.\r\n\r\n74. **What is the lifetime of a variable defined in a while loop?**\r\n    \r\n    **Answer:**\r\n    From when the loop starts until it ends.\r\n\r\n75. **What is the scope of a variable defined in a do-while loop (if supported)?**\r\n    \r\n    **Answer:**\r\n    It is accessible after the loop ends.\r\n\r\n76. **What is the lifetime of a variable defined in a do-while loop?**\r\n    \r\n    **Answer:**\r\n    From when the loop starts until it ends.\r\n\r\n77. **What is the scope of a variable defined in a function default parameter?**\r\n    \r\n    **Answer:**\r\n    It is local to the function.\r\n\r\n78. **What is the lifetime of a variable defined in a function default parameter?**\r\n    \r\n    **Answer:**\r\n    As long as the function is in use.\r\n\r\n79. **What is the scope of a variable defined in a decorator (if supported)?**\r\n    \r\n    **Answer:**\r\n    It is local to the decorator function.\r\n\r\n80. **What is the lifetime of a variable defined in a decorator?**\r\n    \r\n    **Answer:**\r\n    As long as the decorator exists.\r\n\r\n---\r\n\r\n### Scope and Lifetime of Variables\r\n**Explanation:**\r\nScope determines where a variable can be used. Lifetime is how long a variable exists in memory.\r\n\r\n#### Coding Questions & Answers\r\n##### Q1\r\n**Question:** What is variable scope?\r\n   \r\n   **Answer:**\r\n   Scope is the part of the program where a variable can be used.\r\n\r\n2. **What is variable lifetime?**\r\n   \r\n   **Answer:**\r\n   Lifetime is how long a variable exists in memory while the program runs.\r\n\r\n3. **What is a global variable?**\r\n   \r\n   **Answer:**\r\n   A variable defined outside any function; it can be used anywhere in the file.\r\n\r\n4. **What is a local variable?**\r\n   \r\n   **Answer:**\r\n   A variable defined inside a function; it can only be used inside that function.\r\n\r\n5. **Can a local variable be used outside its function?**\r\n   \r\n   **Answer:**\r\n   No, it only exists inside the function.\r\n\r\n6. **Can a global variable be used inside a function?**\r\n   \r\n   **Answer:**\r\n   Yes, unless a local variable with the same name is defined.\r\n\r\n7. **What happens if you use a variable before defining it?**\r\n   \r\n   **Answer:**\r\n   You get an error.\r\n\r\n8. **What happens to a local variable after the function ends?**\r\n   \r\n   **Answer:**\r\n   It is destroyed and cannot be used anymore.\r\n\r\n9. **What happens to a global variable after the program ends?**\r\n   \r\n   **Answer:**\r\n   It is destroyed and memory is freed.\r\n\r\n10. **Can two functions have local variables with the same name?**\r\n    \r\n    **Answer:**\r\n    Yes, each function's local variables are separate.\r\n\r\n11. **Can a function change a global variable?**\r\n    \r\n    **Answer:**\r\n    Yes, if you declare it as global inside the function.\r\n\r\n12. **How do you declare a global variable inside a function?**\r\n    \r\n    **Answer:**\r\n    Use the `global` keyword (if supported).\r\n\r\n13. **What is variable shadowing?**\r\n    \r\n    **Answer:**\r\n    When a local variable has the same name as a global variable, the local one is used inside the function.\r\n\r\n14. **What is the scope of a variable defined in a loop?**\r\n    \r\n    **Answer:**\r\n    Usually, it is accessible in the block where it is defined.\r\n\r\n15. **What is the scope of a variable defined in an if statement?**\r\n    \r\n    **Answer:**\r\n    Usually, it is accessible in the block where it is defined.\r\n\r\n16. **What is the lifetime of a variable defined in a function?**\r\n    \r\n    **Answer:**\r\n    From when the function starts until it ends.\r\n\r\n17. **What is the lifetime of a global variable?**\r\n    \r\n    **Answer:**\r\n    From when it is defined until the program ends.\r\n\r\n18. **Can you have a variable with the same name in different scopes?**\r\n    \r\n    **Answer:**\r\n    Yes, but they are different variables.\r\n\r\n19. **What is a block scope?**\r\n    \r\n    **Answer:**\r\n    The area inside curly braces `{}` or indentation where a variable is defined.\r\n\r\n20. **What is a function scope?**\r\n    \r\n    **Answer:**\r\n    The area inside a function definition.\r\n\r\n21. **What is the difference between local and global scope?**\r\n    \r\n    **Answer:**\r\n    Local scope is inside a function; global scope is outside all functions.\r\n\r\n22. **Can a variable be both local and global?**\r\n    \r\n    **Answer:**\r\n    No, it is either local or global in a given context.\r\n\r\n23. **What happens if you change a global variable inside a function without declaring it global?**\r\n    \r\n    **Answer:**\r\n    It creates a new local variable with the same name.\r\n\r\n24. **How do you access a global variable inside a function?**\r\n    \r\n    **Answer:**\r\n    Just use its name, unless a local variable with the same name exists.\r\n\r\n25. **What is the scope of a variable defined in a for loop?**\r\n    \r\n    **Answer:**\r\n    It is usually accessible after the loop ends (unless block scope is enforced).\r\n\r\n26. **What is the scope of a variable defined in an if block?**\r\n    \r\n    **Answer:**\r\n    It is usually accessible after the block ends (unless block scope is enforced).\r\n\r\n27. **What is the lifetime of a variable defined in a function?**\r\n    \r\n    **Answer:**\r\n    From when the function is called until it ends.\r\n\r\n28. **What is the lifetime of a global variable?**\r\n    \r\n    **Answer:**\r\n    As long as the program runs.\r\n\r\n29. **Can a variable be both a parameter and a local variable?**\r\n    \r\n    **Answer:**\r\n    Yes, but the parameter takes precedence inside the function.\r\n\r\n30. **What is the scope of a variable defined in a list comprehension?**\r\n    \r\n    **Answer:**\r\n    It is local to the comprehension.\r\n\r\n31. **What is the lifetime of a variable defined in a list comprehension?**\r\n    \r\n    **Answer:**\r\n    It exists only during the comprehension's execution.\r\n\r\n32. **What is the scope of a variable defined in a generator expression?**\r\n    \r\n    **Answer:**\r\n    It is local to the generator expression.\r\n\r\n33. **What is the lifetime of a variable defined in a generator expression?**\r\n    \r\n    **Answer:**\r\n    It exists only during the generator's execution.\r\n\r\n34. **What is the scope of a variable defined in a try/finally block?**\r\n    \r\n    **Answer:**\r\n    It is accessible after the block ends.\r\n\r\n35. **What is the lifetime of a variable defined in a try/finally block?**\r\n    \r\n    **Answer:**\r\n    From when the block starts until it ends.\r\n\r\n36. **What is the scope of a variable defined in a with block?**\r\n    \r\n    **Answer:**\r\n    It is accessible after the block ends.\r\n\r\n37. **What is the lifetime of a variable defined in a with block?**\r\n    \r\n    **Answer:**\r\n    From when the block starts until it ends.\r\n\r\n38. **What is the scope of a variable defined in a case block (if supported)?**\r\n    \r\n    **Answer:**\r\n    It is local to the case block.\r\n\r\n39. **What is the lifetime of a variable defined in a case block?**\r\n    \r\n    **Answer:**\r\n    From when the block starts until it ends.\r\n\r\n40. **What is the scope of a variable defined in a match block (if supported)?**\r\n    \r\n    **Answer:**\r\n    It is local to the match block.\r\n\r\n41. **What is the lifetime of a variable defined in a match block?**\r\n    \r\n    **Answer:**\r\n    From when the block starts until it ends.\r\n\r\n42. **What is the scope of a variable defined in a for-each loop?**\r\n    \r\n    **Answer:**\r\n    It is accessible after the loop ends.\r\n\r\n43. **What is the lifetime of a variable defined in a for-each loop?**\r\n    \r\n    **Answer:**\r\n    From when the loop starts until it ends.\r\n\r\n44. **What is the scope of a variable defined in a while loop?**\r\n    \r\n    **Answer:**\r\n    It is accessible after the loop ends.\r\n\r\n45. **What is the lifetime of a variable defined in a while loop?**\r\n    \r\n    **Answer:**\r\n    From when the loop starts until it ends.\r\n\r\n46. **What is the scope of a variable defined in a do-while loop (if supported)?**\r\n    \r\n    **Answer:**\r\n    It is accessible after the loop ends.\r\n\r\n47. **What is the lifetime of a variable defined in a do-while loop?**\r\n    \r\n    **Answer:**\r\n    From when the loop starts until it ends.\r\n\r\n48. **What is the scope of a variable defined in a function default parameter?**\r\n    \r\n    **Answer:**\r\n    It is local to the function.\r\n\r\n49. **What is the lifetime of a variable defined in a function default parameter?**\r\n    \r\n    **Answer:**\r\n    As long as the function is in use.\r\n\r\n50. **What is the scope of a variable defined in a decorator (if supported)?**\r\n    \r\n    **Answer:**\r\n    It is local to the decorator function.\r\n\r\n51. **What is the lifetime of a variable defined in a decorator?**\r\n    \r\n    **Answer:**\r\n    As long as the decorator exists.\r\n\r\n52. **What is the scope of a variable defined in a static method?**\r\n    \r\n    **Answer:**\r\n    It is local to the static method.\r\n\r\n53. **What is the lifetime of a variable defined in a static method?**\r\n    \r\n    **Answer:**\r\n    From when the method is called until it ends.\r\n\r\n54. **What is the scope of a variable defined in a class method?**\r\n    \r\n    **Answer:**\r\n    It is local to the class method unless declared as a class variable.\r\n\r\n55. **What is the lifetime of a variable defined in a class method?**\r\n    \r\n    **Answer:**\r\n    From when the method is called until it ends.\r\n\r\n56. **What is the scope of a variable defined in a lambda?**\r\n    \r\n    **Answer:**\r\n    It is local to the lambda function.\r\n\r\n57. **What is the lifetime of a variable defined in a lambda?**\r\n    \r\n    **Answer:**\r\n    As long as the lambda exists.\r\n\r\n58. **Can a variable be both a parameter and a local variable?**\r\n    \r\n    **Answer:**\r\n    Yes, but the parameter takes precedence inside the function.\r\n\r\n59. **What is the scope of a variable defined in a list comprehension?**\r\n    \r\n    **Answer:**\r\n    It is local to the comprehension.\r\n\r\n60. **What is the lifetime of a variable defined in a list comprehension?**\r\n    \r\n    **Answer:**\r\n    It exists only during the comprehension's execution.\r\n\r\n61. **What is the scope of a variable defined in a generator expression?**\r\n    \r\n    **Answer:**\r\n    It is local to the generator expression.\r\n\r\n62. **What is the lifetime of a variable defined in a generator expression?**\r\n    \r\n    **Answer:**\r\n    It exists only during the generator's execution.\r\n\r\n63. **What is the scope of a variable defined in a try/finally block?**\r\n    \r\n    **Answer:**\r\n    It is accessible after the block ends.\r\n\r\n64. **What is the lifetime of a variable defined in a try/finally block?**\r\n    \r\n    **Answer:**\r\n    From when the block starts until it ends.\r\n\r\n65. **What is the scope of a variable defined in a with block?**\r\n    \r\n    **Answer:**\r\n    It is accessible after the block ends.\r\n\r\n66. **What is the lifetime of a variable defined in a with block?**\r\n    \r\n    **Answer:**\r\n    From when the block starts until it ends.\r\n\r\n67. **What is the scope of a variable defined in a case block (if supported)?**\r\n    \r\n    **Answer:**\r\n    It is local to the case block.\r\n\r\n68. **What is the lifetime of a variable defined in a case block?**\r\n    \r\n    **Answer:**\r\n    From when the block starts until it ends.\r\n\r\n69. **What is the scope of a variable defined in a match block (if supported)?**\r\n    \r\n    **Answer:**\r\n    It is local to the match block.\r\n\r\n70. **What is the lifetime of a variable defined in a match block?**\r\n    \r\n    **Answer:**\r\n    From when the block starts until it ends.\r\n\r\n71. **What is the scope of a variable defined in a for-each loop?**\r\n    \r\n    **Answer:**\r\n    It is accessible after the loop ends.\r\n\r\n72. **What is the lifetime of a variable defined in a for-each loop?**\r\n    \r\n    **Answer:**\r\n    From when the loop starts until it ends.\r\n\r\n73. **What is the scope of a variable defined in a while loop?**\r\n    \r\n    **Answer:**\r\n    It is accessible after the loop ends.\r\n\r\n74. **What is the lifetime of a variable defined in a while loop?**\r\n    \r\n    **Answer:**\r\n    From when the loop starts until it ends.\r\n\r\n75. **What is the scope of a variable defined in a do-while loop (if supported)?**\r\n    \r\n    **Answer:**\r\n    It is accessible after the loop ends.\r\n\r\n76. **What is the lifetime of a variable defined in a do-while loop?**\r\n    \r\n    **Answer:**\r\n    From when the loop starts until it ends.\r\n\r\n77. **What is the scope of a variable defined in a function default parameter?**\r\n    \r\n    **Answer:**\r\n    It is local to the function.\r\n\r\n78. **What is the lifetime of a variable defined in a function default parameter?**\r\n    \r\n    **Answer:**\r\n    As long as the function is in use.\r\n\r\n79. **What is the scope of a variable defined in a decorator (if supported)?**\r\n    \r\n    **Answer:**\r\n    It is local to the decorator function.\r\n\r\n80. **What is the lifetime of a variable defined in a decorator?**\r\n    \r\n    **Answer:**\r\n    As long as the decorator exists.\r\n\r\n---\r\n\r\n### Scope and Lifetime of Variables\r\n**Explanation:**\r\nScope determines where a variable can be used. Lifetime is how long a variable exists in memory.\r\n\r\n#### Coding Questions & Answers\r\n##### Q1\r\n**Question:** What is variable scope?\r\n   \r\n   **Answer:**\r\n   Scope is the part of the program where a variable can be used.\r\n\r\n2. **What is variable lifetime?**\r\n   \r\n   **Answer:**\r\n   Lifetime is how long a variable exists in memory while the program runs.\r\n\r\n3. **What is a global variable?**\r\n   \r\n   **Answer:**\r\n   A variable defined outside any function; it can be used anywhere in the file.\r\n\r\n4. **What is a local variable?**\r\n   \r\n   **Answer:**\r\n   A variable defined inside a function; it can only be used inside that function.\r\n\r\n5. **Can a local variable be used outside its function?**\r\n   \r\n   **Answer:**\r\n   No, it only exists inside the function.\r\n\r\n6. **Can a global variable be used inside a function?**\r\n   \r\n   **Answer:**\r\n   Yes, unless a local variable with the same name is defined.\r\n\r\n7. **What happens if you use a variable before defining it?**\r\n   \r\n   **Answer:**\r\n   You get an error.\r\n\r\n8. **What happens to a local variable after the function ends?**\r\n   \r\n   **Answer:**\r\n   It is destroyed and cannot be used anymore.\r\n\r\n9. **What happens to a global variable after the program ends?**\r\n   \r\n   **Answer:**\r\n   It is destroyed and memory is freed.\r\n\r\n10. **Can two functions have local variables with the same name?**\r\n    \r\n    **Answer:**\r\n    Yes, each function's local variables are separate.\r\n\r\n11. **Can a function change a global variable?**\r\n    \r\n    **Answer:**\r\n    Yes, if you declare it as global inside the function.\r\n\r\n12. **How do you declare a global variable inside a function?**\r\n    \r\n    **Answer:**\r\n    Use the `global` keyword (if supported).\r\n\r\n13. **What is variable shadowing?**\r\n    \r\n    **Answer:**\r\n    When a local variable has the same name as a global variable, the local one is used inside the function.\r\n\r\n14. **What is the scope of a variable defined in a loop?**\r\n    \r\n    **Answer:**\r\n    Usually, it is accessible in the block where it is defined.\r\n\r\n15. **What is the scope of a variable defined in an if statement?**\r\n    \r\n    **Answer:**\r\n    Usually, it is accessible in the block where it is defined.\r\n\r\n16. **What is the lifetime of a variable defined in a function?**\r\n    \r\n    **Answer:**\r\n    From when the function starts until it ends.\r\n\r\n17. **What is the lifetime of a global variable?**\r\n    \r\n    **Answer:**\r\n    From when it is defined until the program ends.\r\n\r\n18. **Can you have a variable with the same name in different scopes?**\r\n    \r\n    **Answer:**\r\n    Yes, but they are different variables.\r\n\r\n19. **What is a block scope?**\r\n    \r\n    **Answer:**\r\n    The area inside curly braces `{}` or indentation where a variable is defined.\r\n\r\n20. **What is a function scope?**\r\n    \r\n    **Answer:**\r\n    The area inside a function definition.\r\n\r\n21. **What is the difference between local and global scope?**\r\n    \r\n    **Answer:**\r\n    Local scope is inside a function; global scope is outside all functions.\r\n\r\n22. **Can a variable be both local and global?**\r\n    \r\n    **Answer:**\r\n    No, it is either local or global in a given context.\r\n\r\n23. **What happens if you change a global variable inside a function without declaring it global?**\r\n    \r\n    **Answer:**\r\n    It creates a new local variable with the same name.\r\n\r\n24. **How do you access a global variable inside a function?**\r\n    \r\n    **Answer:**\r\n    Just use its name, unless a local variable with the same name exists.\r\n\r\n25. **What is the scope of a variable defined in a for loop?**\r\n    \r\n    **Answer:**\r\n    It is usually accessible after the loop ends (unless block scope is enforced).\r\n\r\n26. **What is the scope of a variable defined in an if block?**\r\n    \r\n    **Answer:**\r\n    It is usually accessible after the block ends (unless block scope is enforced).\r\n\r\n27. **What is the lifetime of a variable defined in a function?**\r\n    \r\n    **Answer:**\r\n    From when the function is called until it ends.\r\n\r\n28. **What is the lifetime of a global variable?**\r\n    \r\n    **Answer:**\r\n    As long as the program runs.\r\n\r\n29. **Can a variable be both a parameter and a local variable?**\r\n    \r\n    **Answer:**\r\n    Yes, but the parameter takes precedence inside the function.\r\n\r\n30. **What is the scope of a variable defined in a list comprehension?**\r\n    \r\n    **Answer:**\r\n    It is local to the comprehension.\r\n\r\n31. **What is the lifetime of a variable defined in a list comprehension?**\r\n    \r\n    **Answer:**\r\n    It exists only during the comprehension's execution.\r\n\r\n32. **What is the scope of a variable defined in a generator expression?**\r\n    \r\n    **Answer:**\r\n    It is local to the generator expression.\r\n\r\n33. **What is the lifetime of a variable defined in a generator expression?**\r\n    \r\n    **Answer:**\r\n    It exists only during the generator's execution.\r\n\r\n34. **What is the scope of a variable defined in a try/finally block?**\r\n    \r\n    **Answer:**\r\n    It is accessible after the block ends.\r\n\r\n35. **What is the lifetime of a variable defined in a try/finally block?**\r\n    \r\n    **Answer:**\r\n    From when the block starts until it ends.\r\n\r\n36. **What is the scope of a variable defined in a with block?**\r\n    \r\n    **Answer:**\r\n    It is accessible after the block ends.\r\n\r\n37. **What is the lifetime of a variable defined in a with block?**\r\n    \r\n    **Answer:**\r\n    From when the block starts until it ends.\r\n\r\n38. **What is the scope of a variable defined in a case block (if supported)?**\r\n    \r\n    **Answer:**\r\n    It is local to the case block.\r\n\r\n39. **What is the lifetime of a variable defined in a case block?**\r\n    \r\n    **Answer:**\r\n    From when the block starts until it ends.\r\n\r\n40. **What is the scope of a variable defined in a match block (if supported)?**\r\n    \r\n    **Answer:**\r\n    It is local to the match block.\r\n\r\n41. **What is the lifetime of a variable defined in a match block?**\r\n    \r\n    **Answer:**\r\n    From when the block starts until it ends.\r\n\r\n42. **What is the scope of a variable defined in a for-each loop?**\r\n    \r\n    **Answer:**\r\n    It is accessible after the loop ends.\r\n\r\n43. **What is the lifetime of a variable defined in a for-each loop?**\r\n    \r\n    **Answer:**\r\n    From when the loop starts until it ends.\r\n\r\n44. **What is the scope of a variable defined in a while loop?**\r\n    \r\n    **Answer:**\r\n    It is accessible after the loop ends.\r\n\r\n45. **What is the lifetime of a variable defined in a while loop?**\r\n    \r\n    **Answer:**\r\n    From when the loop starts until it ends.\r\n\r\n46. **What is the scope of a variable defined in a do-while loop (if supported)?**\r\n    \r\n    **Answer:**\r\n    It is accessible after the loop ends.\r\n\r\n47. **What is the lifetime of a variable defined in a do-while loop?**\r\n    \r\n    **Answer:**\r\n    From when the loop starts until it ends.\r\n\r\n48. **What is the scope of a variable defined in a function default parameter?**\r\n    \r\n    **Answer:**\r\n    It is local to the function.\r\n\r\n### AkandeChips vs. Python: Key Differences and Similarities\r\n**Explanation:**\r\nCompare AkandeChips to Python to understand what’s unique and what’s familiar. This helps you transfer skills between languages.\r\n\r\n#### Coding Questions & Answers\r\n\r\n##### Q1\r\n**Question:** Print ""Hello, World!"" in both AkandeChips and Python.\r\n```akandechips\r\nprint(""Hello, World!"")\r\n```\r\n```python\r\nprint(""Hello, World!"")\r\n```\r\n**Expected Output:**\r\n```\r\nHello, World!\r\n```\r\n\r\n##### Q2\r\n**Question:** Assign 5 to a variable and print it (AkandeChips vs. Python).\r\n```akandechips\r\nx = 5\r\nprint(x)\r\n```\r\n```python\r\nx = 5\r\nprint(x)\r\n```\r\n**Expected Output:**\r\n```\r\n5\r\n```\r\n\r\n##### Q3\r\n**Question:** Get user input and print it (AkandeChips vs. Python).\r\n```akandechips\r\nname = input(""Name: "")\r\nprint(name)\r\n```\r\n```python\r\nname = input(""Name: "")\r\nprint(name)\r\n```\r\n**Expected Output:**\r\n```\r\nName: Alex\r\nAlex\r\n```\r\n\r\n##### Q4\r\n**Question:** Print the result of 7 + 3 (AkandeChips vs. Python).\r\n```akandechips\r\nprint(7 + 3)\r\n```\r\n```python\r\nprint(7 + 3)\r\n```\r\n**Expected Output:**\r\n```\r\n10\r\n```\r\n\r\n##### Q5\r\n**Question:** Print a string and a number on the same line (AkandeChips vs. Python).\r\n```akandechips\r\nprint(""Age:"", 21)\r\n```\r\n```python\r\nprint(""Age:"", 21)\r\n```\r\n**Expected Output:**\r\n```\r\nAge: 21\r\n```\r\n\r\n##### Q6\r\n**Question:** Print the result of 10 / 3 (AkandeChips vs. Python).\r\n```akandechips\r\nprint(10 / 3)\r\n```\r\n```python\r\nprint(10 / 3)\r\n```\r\n**Expected Output:**\r\n```\r\n3.3333333333333335\r\n```\r\n\r\n##### Q7\r\n**Question:** Print the result of 10 // 3 (integer division) (AkandeChips vs. Python).\r\n```akandechips\r\nprint(10 // 3)\r\n```\r\n```python\r\nprint(10 // 3)\r\n```\r\n**Expected Output:**\r\n```\r\n3\r\n```\r\n\r\n##### Q8\r\n**Question:** Print the result of 2 ** 4 (power) (AkandeChips vs. Python).\r\n```akandechips\r\nprint(2 ** 4)\r\n```\r\n```python\r\nprint(2 ** 4)\r\n```\r\n**Expected Output:**\r\n```\r\n16\r\n```\r\n\r\n##### Q9\r\n**Question:** Print the result of 15 % 4 (modulo) (AkandeChips vs. Python).\r\n```akandechips\r\nprint(15 % 4)\r\n```\r\n```python\r\nprint(15 % 4)\r\n```\r\n**Expected Output:**\r\n```\r\n3\r\n```\r\n\r\n##### Q10\r\n**Question:** Print a string in uppercase (AkandeChips vs. Python).\r\n```akandechips\r\nprint(""chips"".upper())\r\n```\r\n```python\r\nprint(""chips"".upper())\r\n```\r\n**Expected Output:**\r\n```\r\nCHIPS\r\n```\r\n\r\n##### Q11\r\n**Question:** Print the length of a string (AkandeChips vs. Python).\r\n```akandechips\r\nprint(len(""Akande""))\r\n```\r\n```python\r\nprint(len(""Akande""))\r\n```\r\n**Expected Output:**\r\n```\r\n6\r\n```\r\n\r\n##### Q12\r\n**Question:** Print the first character of a string (AkandeChips vs. Python).\r\n```akandechips\r\nprint(""chips""[0])\r\n```\r\n```python\r\nprint(""chips""[0])\r\n```\r\n**Expected Output:**\r\n```\r\nc\r\n```\r\n\r\n##### Q13\r\n**Question:** Print a list of numbers (AkandeChips vs. Python).\r\n```akandechips\r\nnums = [1, 2, 3]\r\nprint(nums)\r\n```\r\n```python\r\nnums = [1, 2, 3]\r\nprint(nums)\r\n```\r\n**Expected Output:**\r\n```\r\n[1, 2, 3]\r\n```\r\n\r\n##### Q14\r\n**Question:** Print the result of 5 > 2 (AkandeChips vs. Python).\r\n```akandechips\r\nprint(5 > 2)\r\n```\r\n```python\r\nprint(5 > 2)\r\n```\r\n**Expected Output:**\r\n```\r\nTrue\r\n```\r\n\r\n##### Q15\r\n**Question:** Use a for loop to print numbers 1 to 3 (AkandeChips vs. Python).\r\n```akandechips\r\nfor i in range(1, 4):\r\n    print(i)\r\n```\r\n```python\r\nfor i in range(1, 4):\r\n    print(i)\r\n```\r\n**Expected Output:**\r\n```\r\n1\r\n2\r\n3\r\n```\r\n\r\n##### Q16\r\n**Question:** Use an if-else statement to print if a number is positive (AkandeChips vs. Python).\r\n```akandechips\r\nx = 5\r\nif x > 0:\r\n    print(""Positive"")\r\nelse:\r\n    print(""Not positive"")\r\n```\r\n```python\r\nx = 5\r\nif x > 0:\r\n    print(""Positive"")\r\nelse:\r\n    print(""Not positive"")\r\n```\r\n**Expected Output:**\r\n```\r\nPositive\r\n```\r\n\r\n##### Q17\r\n**Question:** Define and call a function (AkandeChips vs. Python).\r\n```akandechips\r\ndef greet():\r\n    print(""Hello!"")\r\ngreet()\r\n```\r\n```python\r\ndef greet():\r\n    print(""Hello!"")\r\ngreet()\r\n```\r\n**Expected Output:**\r\n```\r\nHello!\r\n```\r\n\r\n##### Q18\r\n**Question:** Print the type of a variable (AkandeChips vs. Python).\r\n```akandechips\r\nprint(type(5))\r\n```\r\n```python\r\nprint(type(5))\r\n```\r\n**Expected Output:**\r\n```\r\n<class 'int'>\r\n```\r\n\r\n##### Q19\r\n**Question:** Print a string multiple times using multiplication (AkandeChips vs. Python).\r\n```akandechips\r\nprint(""chips"" * 3)\r\n```\r\n```python\r\nprint(""chips"" * 3)\r\n```\r\n**Expected Output:**\r\n```\r\nchipschipschips\r\n```\r\n\r\n##### Q20\r\n**Question:** Print a string with each letter on a new line (AkandeChips vs. Python).\r\n```akandechips\r\nfor letter in ""chips"":\r\n    print(letter)\r\n```\r\n```python\r\nfor letter in ""chips"":\r\n    print(letter)\r\n```\r\n**Expected Output:**\r\n```\r\nc\r\nh\r\ni\r\np\r\ns\r\n```\r\n\r\n##### Q21\r\n**Question:** Print the result of True and False (AkandeChips vs. Python).\r\n```akandechips\r\nprint(True and False)\r\n```\r\n```python\r\nprint(True and False)\r\n```\r\n**Expected Output:**\r\n```\r\nFalse\r\n```\r\n\r\n##### Q22\r\n**Question:** Print the result of not False (AkandeChips vs. Python).\r\n```akandechips\r\nprint(not False)\r\n```\r\n```python\r\nprint(not False)\r\n```\r\n**Expected Output:**\r\n```\r\nTrue\r\n```\r\n\r\n##### Q23\r\n**Question:** Print the result of 7 <= 7 (AkandeChips vs. Python).\r\n```akandechips\r\nprint(7 <= 7)\r\n```\r\n```python\r\nprint(7 <= 7)\r\n```\r\n**Expected Output:**\r\n```\r\nTrue\r\n```\r\n\r\n##### Q24\r\n**Question:** Print the result of 9 >= 10 (AkandeChips vs. Python).\r\n```akandechips\r\nprint(9 >= 10)\r\n```\r\n```python\r\nprint(9 >= 10)\r\n```\r\n**Expected Output:**\r\n```\r\nFalse\r\n```\r\n\r\n##### Q25\r\n**Question:** Print the result of 10 != 5 (AkandeChips vs. Python).\r\n```akandechips\r\nprint(10 != 5)\r\n```\r\n```python\r\nprint(10 != 5)\r\n```\r\n**Expected Output:**\r\n```\r\nTrue\r\n```\r\n\r\n##### Q26\r\n**Question:** Print the result of 3 == 4 (AkandeChips vs. Python).\r\n```akandechips\r\nprint(3 == 4)\r\n```\r\n```python\r\nprint(3 == 4)\r\n```\r\n**Expected Output:**\r\n```\r\nFalse\r\n```\r\n\r\n##### Q27\r\n**Question:** Print the result of 2 + 3 * 4 - 5 (AkandeChips vs. Python).\r\n```akandechips\r\nprint(2 + 3 * 4 - 5)\r\n```\r\n```python\r\nprint(2 + 3 * 4 - 5)\r\n```\r\n**Expected Output:**\r\n```\r\n9\r\n```\r\n\r\n##### Q28\r\n**Question:** Print the result of (2 + 3) * (4 - 5) (AkandeChips vs. Python).\r\n```akandechips\r\nprint((2 + 3) * (4 - 5))\r\n```\r\n```python\r\nprint((2 + 3) * (4 - 5))\r\n```\r\n**Expected Output:**\r\n```\r\n-5\r\n```\r\n\r\n##### Q29\r\n**Question:** Print the string ""chips"" plus the string ""rocks"" (AkandeChips vs. Python).\r\n```akandechips\r\nprint(""chips"" + ""rocks"")\r\n```\r\n```python\r\nprint(""chips"" + ""rocks"")\r\n```\r\n**Expected Output:**\r\n```\r\nchipsrocks\r\n```\r\n\r\n##### Q30\r\n**Question:** Print the string ""USA"" 5 times, separated by spaces (AkandeChips vs. Python).\r\n```akandechips\r\nprint((""USA "" * 5).strip())\r\n```\r\n```python\r\nprint((""USA "" * 5).strip())\r\n```\r\n**Expected Output:**\r\n```\r\nUSA USA USA USA USA\r\n```\r\n\r\n---\r\n\r\n#### Projects & Solutions\r\n\r\n##### Project 1\r\n**Project:** Write a program that asks for a name and prints a greeting (AkandeChips vs. Python).\r\n```akandechips\r\nname = input(""Name: "")\r\nprint(""Hello,"", name)\r\n```\r\n```python\r\nname = input(""Name: "")\r\nprint(""Hello,"", name)\r\n```\r\n**Expected Output:**\r\n```\r\nName: Alex\r\nHello, Alex\r\n```\r\n\r\n##### Project 2\r\n**Project:** Ask for two numbers and print their sum (AkandeChips vs. Python).\r\n```akandechips\r\na = int(input(""First: ""))\r\nb = int(input(""Second: ""))\r\nprint(a + b)\r\n```\r\n```python\r\na = int(input(""First: ""))\r\nb = int(input(""Second: ""))\r\nprint(a + b)\r\n```\r\n**Expected Output:**\r\n```\r\nFirst: 3\r\nSecond: 7\r\n10\r\n```\r\n\r\n##### Project 3\r\n**Project:** Print the numbers 1 to 5 using a loop (AkandeChips vs. Python).\r\n```akandechips\r\nfor i in range(1, 6):\r\n    print(i)\r\n```\r\n```python\r\nfor i in range(1, 6):\r\n    print(i)\r\n```\r\n**Expected Output:**\r\n```\r\n1\r\n2\r\n3\r\n4\r\n5\r\n```\r\n\r\n##### Project 4\r\n**Project:** Print the length of a user-entered string (AkandeChips vs. Python).\r\n```akandechips\r\ntext = input(""Text: "")\r\nprint(len(text))\r\n```\r\n```python\r\ntext = input(""Text: "")\r\nprint(len(text))\r\n```\r\n**Expected Output:**\r\n```\r\nText: hello\r\n5\r\n```\r\n\r\n##### Project 5\r\n**Project:** Print the square of a user-entered number (AkandeChips vs. Python).\r\n```akandechips\r\nn = int(input(""Number: ""))\r\nprint(n ** 2)\r\n```\r\n```python\r\nn = int(input(""Number: ""))\r\nprint(n ** 2)\r\n```\r\n**Expected Output:**\r\n```\r\nNumber: 4\r\n16\r\n```\r\n\r\n##### Project 6\r\n**Project:** Print a string in reverse (AkandeChips vs. Python).\r\n```akandechips\r\ns = input(""String: "")\r\nprint(s[::-1])\r\n```\r\n```python\r\ns = input(""String: "")\r\nprint(s[::-1])\r\n```\r\n**Expected Output:**\r\n```\r\nString: chips\r\nspihc\r\n```\r\n\r\n##### Project 7\r\n**Project:** Print whether a user-entered number is even or odd (AkandeChips vs. Python).\r\n```akandechips\r\nn = int(input(""Number: ""))\r\nif n % 2 == 0:\r\n    print(""Even"")\r\nelse:\r\n    print(""Odd"")\r\n```\r\n```python\r\nn = int(input(""Number: ""))\r\nif n % 2 == 0:\r\n    print(""Even"")\r\nelse:\r\n    print(""Odd"")\r\n```\r\n**Expected Output:**\r\n```\r\nNumber: 5\r\nOdd\r\n```\r\n\r\n##### Project 8\r\n**Project:** Print the sum of all numbers from 1 to n (user input) (AkandeChips vs. Python).\r\n```akandechips\r\nn = int(input(""n: ""))\r\ntotal = 0\r\nfor i in range(1, n+1):\r\n    total += i\r\nprint(total)\r\n```\r\n```python\r\nn = int(input(""n: ""))\r\ntotal = 0\r\nfor i in range(1, n+1):\r\n    total += i\r\nprint(total)\r\n```\r\n**Expected Output:**\r\n```\r\nn: 5\r\n15\r\n```\r\n\r\n##### Project 9\r\n**Project:** Print a string with each letter separated by a dash (AkandeChips vs. Python).\r\n```akandechips\r\nword = input(""Word: "")\r\nprint(""-"".join(word))\r\n```\r\n```python\r\nword = input(""Word: "")\r\nprint(""-"".join(word))\r\n```\r\n**Expected Output:**\r\n```\r\nWord: chips\r\nc-h-i-p-s\r\n```\r\n\r\n##### Project 10\r\n**Project:** Print the factorial of a user-entered number (AkandeChips vs. Python).\r\n```akandechips\r\nn = int(input(""Number: ""))\r\nfact = 1\r\nfor i in range(1, n+1):\r\n    fact *= i\r\nprint(fact)\r\n```\r\n```python\r\nn = int(input(""Number: ""))\r\nfact = 1\r\nfor i in range(1, n+1):\r\n    fact *= i\r\nprint(fact)\r\n```\r\n**Expected Output:**\r\n```\r\nNumber: 4\r\n24\r\n```\r\n\r\n##### Project 11\r\n**Project:** Print the maximum of three user-entered numbers (AkandeChips vs. Python).\r\n```akandechips\r\na = int(input(""a: ""))\r\nb = int(input(""b: ""))\r\nc = int(input(""c: ""))\r\nprint(max(a, b, c))\r\n```\r\n```python\r\na = int(input(""a: ""))\r\nb = int(input(""b: ""))\r\nc = int(input(""c: ""))\r\nprint(max(a, b, c))\r\n```\r\n**Expected Output:**\r\n```\r\na: 3\r\nb: 7\r\nc: 5\r\n7\r\n```\r\n\r\n##### Project 12\r\n**Project:** Print the average of a list of numbers (AkandeChips vs. Python).\r\n```akandechips\r\nnums = [2, 4, 6, 8]\r\nprint(sum(nums) / len(nums))\r\n```\r\n```python\r\nnums = [2, 4, 6, 8]\r\nprint(sum(nums) / len(nums))\r\n```\r\n**Expected Output:**\r\n```\r\n5.0\r\n```\r\n\r\n##### Project 13\r\n**Project:** Print a string in title case (AkandeChips vs. Python).\r\n```akandechips\r\ntext = input(""Text: "")\r\nprint(text.title())\r\n```\r\n```python\r\ntext = input(""Text: "")\r\nprint(text.title())\r\n```\r\n**Expected Output:**\r\n```\r\nText: chips are cool\r\nChips Are Cool\r\n```\r\n\r\n##### Project 14\r\n**Project:** Print the reverse of a list (AkandeChips vs. Python).\r\n```akandechips\r\nnums = [1, 2, 3]\r\nprint(nums[::-1])\r\n```\r\n```python\r\nnums = [1, 2, 3]\r\nprint(nums[::-1])\r\n```\r\n**Expected Output:**\r\n```\r\n[3, 2, 1]\r\n```\r\n\r\n##### Project 15\r\n**Project:** Print whether a string is a palindrome (AkandeChips vs. Python).\r\n```akandechips\r\ns = input(""String: "")\r\nprint(s == s[::-1])\r\n```\r\n```python\r\ns = input(""String: "")\r\nprint(s == s[::-1])\r\n```\r\n**Expected Output:**\r\n```\r\nString: level\r\nTrue\r\n```\r\n\r\n##### Project 16\r\n**Project:** Print the sum of even numbers from 1 to 10 (AkandeChips vs. Python).\r\n```akandechips\r\ntotal = 0\r\nfor i in range(1, 11):\r\n    if i % 2 == 0:\r\n        total += i\r\nprint(total)\r\n```\r\n```python\r\ntotal = 0\r\nfor i in range(1, 11):\r\n    if i % 2 == 0:\r\n        total += i\r\nprint(total)\r\n```\r\n**Expected Output:**\r\n```\r\n30\r\n```\r\n\r\n##### Project 17\r\n**Project:** Print the minimum of a list (AkandeChips vs. Python).\r\n```akandechips\r\nnums = [5, 2, 9]\r\nprint(min(nums))\r\n```\r\n```python\r\nnums = [5, 2, 9]\r\nprint(min(nums))\r\n```\r\n**Expected Output:**\r\n```\r\n2\r\n```\r\n\r\n##### Project 18\r\n**Project:** Print the result of 2 to the power of 10 (AkandeChips vs. Python).\r\n```akandechips\r\nprint(2 ** 10)\r\n```\r\n```python\r\nprint(2 ** 10)\r\n```\r\n**Expected Output:**\r\n```\r\n1024\r\n```\r\n\r\n##### Project 19\r\n**Project:** Print the result of dividing 100 by 8, rounded to 2 decimals (AkandeChips vs. Python).\r\n```akandechips\r\nprint(round(100 / 8, 2))\r\n```\r\n```python\r\nprint(round(100 / 8, 2))\r\n```\r\n**Expected Output:**\r\n```\r\n12.5\r\n```\r\n\r\n##### Project 20\r\n**Project:** Print the string ""chips"" with each letter separated by a space (AkandeChips vs. Python).\r\n```akandechips\r\nprint("" "".join(""chips""))\r\n```\r\n```python\r\nprint("" "".join(""chips""))\r\n```\r\n**Expected Output:**\r\n```\r\nc h i p s\r\n```\r\n\r\n\r\n### Practice Tests and Review Sections\r\n**Explanation:**\r\nTest your knowledge and review key concepts before moving on.\r\n\r\n#### Coding Questions & Answers\r\n<!-- 30+ practice test questions, answers, and outputs go here -->\r\n\r\n#### Projects & Solutions\r\n<!-- 30+ review projects, solutions, and outputs go here -->\r\n- Your First Program\r\n- Variables and Types\r\n- Basic Operations\r\n- Control Flow\r\n\r\nEach section contains:\r\n- Detailed Explanation\r\n- 30+ Coding Questions & Answers (with code and expected output)\r\n- 30+ Projects & Solutions (with code and expected output)\r\n- Room for future topic expansion\r\n\r\n---\r\n\r\n## What is AkandeChips?\r\n**Explanation:**\r\nAkandeChips is a modern language for hardware and software co-design, inspired by Python and HDL. It is designed to be easy to learn, readable, and powerful for both beginners and professionals. AkandeChips is especially important for the US, where there is a growing need for skilled chip designers and programmers.\r\n\r\n---\r\n\r\n## Your First Program\r\n**Explanation:**\r\nThe first program in any language is usually a simple print statement. In AkandeChips, you use the `print()` function to display text in the terminal.\r\n\r\n**Example:**\r\n```akandechips\r\nprint(""Hello, AkandeChips!"")\r\n```\r\n\r\n## Essential Topics for a Comprehensive Beginner Textbook\r\n\r\nThe following sections are especially important for American students and the US chips workforce. Each topic includes explanations, coding questions, and projects to build real-world skills.\r\n\r\n---\r\n\r\n### Input and Output (User Input, Reading/Writing Files)\r\n**Explanation:**\r\nInput and output are how programs interact with users and the outside world. This includes reading user input, displaying output, and working with files.\r\n\r\n#### Coding Questions & Answers\r\n##### Q1\r\n**Question:** Ask the user for their name and print it.\r\n```akandechips\r\nname = input(""What is your name? "")\r\nprint(name)\r\n```\r\n**Expected Output:**\r\n```\r\nAlex\r\n```\r\n\r\n##### Q2\r\n**Question:** Ask the user for a number and print double its value.\r\n```akandechips\r\nnum = int(input(""Enter a number: ""))\r\nprint(num * 2)\r\n```\r\n**Expected Output:**\r\n```\r\nEnter a number: 5\r\n10\r\n```\r\n\r\n##### Q3\r\n**Question:** Print a message and then ask the user for their favorite color.\r\n```akandechips\r\nprint(""Let's talk about colors!"")\r\ncolor = input(""Favorite color? "")\r\nprint(color)\r\n```\r\n**Expected Output:**\r\n```\r\nLet's talk about colors!\r\nFavorite color? blue\r\nblue\r\n```\r\n\r\n##### Q4\r\n**Question:** Ask the user for two numbers and print their sum.\r\n```akandechips\r\na = int(input(""First number: ""))\r\nb = int(input(""Second number: ""))\r\nprint(a + b)\r\n```\r\n**Expected Output:**\r\n```\r\nFirst number: 3\r\nSecond number: 7\r\n10\r\n```\r\n\r\n##### Q5\r\n**Question:** Print a welcome message, then ask for the user's city and print it.\r\n```akandechips\r\nprint(""Welcome!"")\r\ncity = input(""Which city do you live in? "")\r\nprint(city)\r\n```\r\n**Expected Output:**\r\n```\r\nWelcome!\r\nWhich city do you live in? Dallas\r\nDallas\r\n```\r\n\r\n##### Q6\r\n**Question:** Ask the user for a filename, then print a message (file reading not implemented in this example).\r\n```akandechips\r\nfilename = input(""Enter filename: "")\r\nprint(""You entered:"", filename)\r\n```\r\n**Expected Output:**\r\n```\r\nEnter filename: data.txt\r\nYou entered: data.txt\r\n```\r\n\r\n##### Q7\r\n**Question:** Print a prompt, then ask for the user's age and print a message with it.\r\n```akandechips\r\nprint(""How old are you?"")\r\nage = int(input())\r\nprint(""You are"", age, ""years old."")\r\n```\r\n**Expected Output:**\r\n```\r\nHow old are you?\r\n18\r\nYou are 18 years old.\r\n```\r\n\r\n##### Q8\r\n**Question:** Ask the user for a word and print it in uppercase.\r\n```akandechips\r\nword = input(""Enter a word: "")\r\nprint(word.upper())\r\n```\r\n**Expected Output:**\r\n```\r\nEnter a word: chips\r\nCHIPS\r\n```\r\n\r\n##### Q9\r\n**Question:** Ask the user for a number and print whether it is even or odd.\r\n```akandechips\r\nnum = int(input(""Number: ""))\r\nif num % 2 == 0:\r\n    print(""Even"")\r\nelse:\r\n    print(""Odd"")\r\n```\r\n**Expected Output:**\r\n```\r\nNumber: 7\r\nOdd\r\n```\r\n\r\n##### Q10\r\n**Question:** Print a prompt, ask for a string, and print its length.\r\n```akandechips\r\ntext = input(""Type something: "")\r\nprint(len(text))\r\n```\r\n**Expected Output:**\r\n```\r\nType something: AkandeChips\r\n12\r\n```\r\n\r\n##### Q11\r\n**Question:** Ask the user for their favorite animal and print a message.\r\n```akandechips\r\nanimal = input(""Favorite animal: "")\r\nprint(""You like"", animal)\r\n```\r\n**Expected Output:**\r\n```\r\nFavorite animal: dog\r\nYou like dog\r\n```\r\n\r\n##### Q12\r\n**Question:** Ask the user for a number and print the next number.\r\n```akandechips\r\nn = int(input(""Number: ""))\r\nprint(n + 1)\r\n```\r\n**Expected Output:**\r\n```\r\nNumber: 9\r\n10\r\n```\r\n\r\n##### Q13\r\n**Question:** Ask the user for a string and print it three times.\r\n```akandechips\r\ns = input(""Say something: "")\r\nprint(s)\r\nprint(s)\r\nprint(s)\r\n```\r\n**Expected Output:**\r\n```\r\nSay something: hello\r\nhello\r\nhello\r\nhello\r\n```\r\n\r\n##### Q14\r\n**Question:** Ask the user for a number and print if it is greater than 10.\r\n```akandechips\r\nnum = int(input(""Number: ""))\r\nif num > 10:\r\n    print(""Greater than 10"")\r\nelse:\r\n    print(""10 or less"")\r\n```\r\n**Expected Output:**\r\n```\r\nNumber: 12\r\nGreater than 10\r\n```\r\n\r\n##### Q15\r\n**Question:** Ask the user for their state and print a greeting.\r\n```akandechips\r\nstate = input(""State: "")\r\nprint(""Hello from"", state)\r\n```\r\n**Expected Output:**\r\n```\r\nState: Texas\r\nHello from Texas\r\n```\r\n\r\n##### Q16\r\n**Question:** Ask the user for a decimal number and print it rounded to the nearest integer.\r\n```akandechips\r\nnum = float(input(""Decimal: ""))\r\nprint(round(num))\r\n```\r\n**Expected Output:**\r\n```\r\nDecimal: 7.8\r\n8\r\n```\r\n\r\n##### Q17\r\n**Question:** Ask the user for a word and print its first character.\r\n```akandechips\r\nword = input(""Word: "")\r\nprint(word[0])\r\n```\r\n**Expected Output:**\r\n```\r\nWord: chips\r\nc\r\n```\r\n\r\n##### Q18\r\n**Question:** Ask the user for a sentence and print the number of words.\r\n```akandechips\r\nsentence = input(""Sentence: "")\r\nprint(len(sentence.split()))\r\n```\r\n**Expected Output:**\r\n```\r\nSentence: chips are cool\r\n3\r\n```\r\n\r\n##### Q19\r\n**Question:** Ask the user for a number and print its absolute value.\r\n```akandechips\r\nnum = int(input(""Number: ""))\r\nprint(abs(num))\r\n```\r\n**Expected Output:**\r\n```\r\nNumber: -5\r\n5\r\n```\r\n\r\n##### Q20\r\n**Question:** Ask the user for a string and print it in reverse.\r\n```akandechips\r\ns = input(""String: "")\r\nprint(s[::-1])\r\n```\r\n**Expected Output:**\r\n```\r\nString: Akande\r\nednakA\r\n```\r\n\r\n##### Q21\r\n**Question:** Ask the user for a number and print ""Even"" if even, ""Odd"" if odd.\r\n```akandechips\r\nn = int(input(""Number: ""))\r\nprint(""Even"" if n % 2 == 0 else ""Odd"")\r\n```\r\n**Expected Output:**\r\n```\r\nNumber: 8\r\nEven\r\n```\r\n\r\n##### Q22\r\n**Question:** Ask the user for a string and print its length.\r\n```akandechips\r\ntext = input(""Text: "")\r\nprint(len(text))\r\n```\r\n**Expected Output:**\r\n```\r\nText: hello\r\n5\r\n```\r\n\r\n##### Q23\r\n**Question:** Ask the user for a number and print its square root (rounded).\r\n```akandechips\r\nimport math\r\nn = int(input(""Number: ""))\r\nprint(round(math.sqrt(n)))\r\n```\r\n**Expected Output:**\r\n```\r\nNumber: 25\r\n5\r\n```\r\n\r\n##### Q24\r\n**Question:** Ask the user for a word and print it in lowercase.\r\n```akandechips\r\nword = input(""Word: "")\r\nprint(word.lower())\r\n```\r\n**Expected Output:**\r\n```\r\nWord: CHIPS\r\nchips\r\n```\r\n\r\n##### Q25\r\n**Question:** Ask the user for a number and print ""Positive"" if positive, ""Negative"" if negative, or ""Zero"" if zero.\r\n```akandechips\r\nn = int(input(""Number: ""))\r\nif n > 0:\r\n    print(""Positive"")\r\nelif n < 0:\r\n    print(""Negative"")\r\nelse:\r\n    print(""Zero"")\r\n```\r\n**Expected Output:**\r\n```\r\nNumber: 0\r\nZero\r\n```\r\n\r\n##### Q26\r\n**Question:** Ask the user for a string and print the last character.\r\n```akandechips\r\ns = input(""String: "")\r\nprint(s[-1])\r\n```\r\n**Expected Output:**\r\n```\r\nString: Akande\r\ne\r\n```\r\n\r\n##### Q27\r\n**Question:** Ask the user for a number and print the result of dividing it by 2.\r\n```akandechips\r\nn = int(input(""Number: ""))\r\nprint(n / 2)\r\n```\r\n**Expected Output:**\r\n```\r\nNumber: 9\r\n4.5\r\n```\r\n\r\n##### Q28\r\n**Question:** Ask the user for a string and print it with spaces between each character.\r\n```akandechips\r\ntext = input(""Text: "")\r\nprint("" "".join(text))\r\n```\r\n**Expected Output:**\r\n```\r\nText: chips\r\nc h i p s\r\n```\r\n\r\n##### Q29\r\n**Question:** Ask the user for a number and print the cube of that number.\r\n```akandechips\r\nn = int(input(""Number: ""))\r\nprint(n ** 3)\r\n```\r\n**Expected Output:**\r\n```\r\nNumber: 4\r\n64\r\n```\r\n\r\n##### Q30\r\n**Question:** Ask the user for a word and print it twice, separated by a space.\r\n```akandechips\r\nword = input(""Word: "")\r\nprint(word, word)\r\n```\r\n**Expected Output:**\r\n```\r\nWord: Akande\r\nAkande Akande\r\n```\r\n\r\n#### Projects & Solutions\r\n##### Project 1\r\n**Project:** Ask the user for their favorite food and print a message with it.\r\n```akandechips\r\nfood = input(""Favorite food: "")\r\nprint(""I like"", food, ""too!"")\r\n```\r\n**Expected Output:**\r\n```\r\nFavorite food: pizza\r\nI like pizza too!\r\n```\r\n\r\n##### Project 2\r\n**Project:** Ask the user for their birth year and print their age (assuming current year is 2025).\r\n```akandechips\r\nyear = int(input(""Birth year: ""))\r\nprint(2025 - year)\r\n```\r\n**Expected Output:**\r\n```\r\nBirth year: 2000\r\n25\r\n```\r\n\r\n##### Project 3\r\n**Project:** Ask the user for a temperature in Celsius and print it in Fahrenheit.\r\n```akandechips\r\nc = float(input(""Celsius: ""))\r\nf = c * 9/5 + 32\r\nprint(f)\r\n```\r\n**Expected Output:**\r\n```\r\nCelsius: 0\r\n32.0\r\n```\r\n\r\n##### Project 4\r\n**Project:** Ask the user for a filename and print a message that the file was ""saved"" (simulation).\r\n```akandechips\r\nfilename = input(""Save as: "")\r\nprint(""File"", filename, ""saved!"")\r\n```\r\n**Expected Output:**\r\n```\r\nSave as: report.txt\r\nFile report.txt saved!\r\n```\r\n\r\n##### Project 5\r\n**Project:** Ask the user for two numbers and print their product.\r\n```akandechips\r\na = int(input(""First: ""))\r\nb = int(input(""Second: ""))\r\nprint(a * b)\r\n```\r\n**Expected Output:**\r\n```\r\nFirst: 4\r\nSecond: 5\r\n20\r\n```\r\n\r\n##### Project 6\r\n**Project:** Ask the user for a sentence and print it backwards.\r\n```akandechips\r\nsentence = input(""Type a sentence: "")\r\nprint(sentence[::-1])\r\n```\r\n**Expected Output:**\r\n```\r\nType a sentence: chips are cool\r\nlooc era spihc\r\n```\r\n\r\n##### Project 7\r\n**Project:** Ask the user for a number and print the square of that number.\r\n```akandechips\r\nnum = int(input(""Number: ""))\r\nprint(num ** 2)\r\n```\r\n**Expected Output:**\r\n```\r\nNumber: 6\r\n36\r\n```\r\n\r\n##### Project 8\r\n**Project:** Ask the user for their first and last name, then print them together.\r\n```akandechips\r\nfirst = input(""First name: "")\r\nlast = input(""Last name: "")\r\nprint(first, last)\r\n```\r\n**Expected Output:**\r\n```\r\nFirst name: Sam\r\nLast name: Lee\r\nSam Lee\r\n```\r\n\r\n##### Project 9\r\n**Project:** Ask the user for a number and print if it is positive, negative, or zero.\r\n```akandechips\r\nnum = int(input(""Enter a number: ""))\r\nif num > 0:\r\n    print(""Positive"")\r\nelif num < 0:\r\n    print(""Negative"")\r\nelse:\r\n    print(""Zero"")\r\n```\r\n**Expected Output:**\r\n```\r\nEnter a number: -3\r\nNegative\r\n```\r\n\r\n##### Project 10\r\n**Project:** Ask the user for a word and print the first and last character.\r\n```akandechips\r\nword = input(""Word: "")\r\nprint(word[0], word[-1])\r\n```\r\n**Expected Output:**\r\n```\r\nWord: Akande\r\nA e\r\n```\r\n\r\n##### Project 11\r\n**Project:** Ask the user for a number and print the result of multiplying it by 10.\r\n```akandechips\r\nn = int(input(""Number: ""))\r\nprint(n * 10)\r\n```\r\n**Expected Output:**\r\n```\r\nNumber: 3\r\n30\r\n```\r\n\r\n##### Project 12\r\n**Project:** Ask the user for a string and print it with dashes between each character.\r\n```akandechips\r\ntext = input(""Text: "")\r\nprint(""-"".join(text))\r\n```\r\n**Expected Output:**\r\n```\r\nText: chips\r\nc-h-i-p-s\r\n```\r\n\r\n##### Project 13\r\n**Project:** Ask the user for a number and print the sum of that number and 100.\r\n```akandechips\r\nnum = int(input(""Number: ""))\r\nprint(num + 100)\r\n```\r\n**Expected Output:**\r\n```\r\nNumber: 25\r\n125\r\n```\r\n\r\n##### Project 14\r\n**Project:** Ask the user for a word and print it in title case.\r\n```akandechips\r\nword = input(""Word: "")\r\nprint(word.title())\r\n```\r\n**Expected Output:**\r\n```\r\nWord: akandechips\r\nAkandechips\r\n```\r\n\r\n##### Project 15\r\n**Project:** Ask the user for a number and print the result of raising it to the power of 4.\r\n```akandechips\r\nn = int(input(""Number: ""))\r\nprint(n ** 4)\r\n```\r\n**Expected Output:**\r\n```\r\nNumber: 2\r\n16\r\n```\r\n\r\n##### Project 16\r\n**Project:** Ask the user for a string and print the string repeated 5 times.\r\n```akandechips\r\ntext = input(""Text: "")\r\nprint(text * 5)\r\n```\r\n**Expected Output:**\r\n```\r\nText: chip\r\nchipchipchipchipchip\r\n```\r\n\r\n##### Project 17\r\n**Project:** Ask the user for a number and print the remainder when divided by 3.\r\n```akandechips\r\nn = int(input(""Number: ""))\r\nprint(n % 3)\r\n```\r\n**Expected Output:**\r\n```\r\nNumber: 10\r\n1\r\n```\r\n\r\n##### Project 18\r\n**Project:** Ask the user for a word and print the word with each letter on a new line.\r\n```akandechips\r\nword = input(""Word: "")\r\nfor letter in word:\r\n    print(letter)\r\n```\r\n**Expected Output:**\r\n```\r\nWord: chips\r\nc\r\nh\r\ni\r\np\r\ns\r\n```\r\n\r\n##### Project 19\r\n**Project:** Ask the user for a number and print the result of subtracting 50 from it.\r\n```akandechips\r\nnum = int(input(""Number: ""))\r\nprint(num - 50)\r\n```\r\n**Expected Output:**\r\n```\r\nNumber: 75\r\n25\r\n```\r\n\r\n##### Project 20\r\n**Project:** Ask the user for a string and print whether it contains the letter 'a'.\r\n```akandechips\r\ntext = input(""Text: "")\r\nif 'a' in text:\r\n    print(""Contains 'a'"")\r\nelse:\r\n    print(""Does not contain 'a'"")\r\n```\r\n**Expected Output:**\r\n```\r\nText: chips\r\nDoes not contain 'a'\r\n```\r\n\r\n##### Project 21\r\n**Project:** Ask the user for a number and print the result of integer division by 5.\r\n```akandechips\r\nn = int(input(""Number: ""))\r\nprint(n // 5)\r\n```\r\n**Expected Output:**\r\n```\r\nNumber: 23\r\n4\r\n```\r\n\r\n##### Project 22\r\n**Project:** Ask the user for a word and print the word in reverse order.\r\n```akandechips\r\nword = input(""Word: "")\r\nprint(word[::-1])\r\n```\r\n**Expected Output:**\r\n```\r\nWord: hello\r\nolleh\r\n```\r\n\r\n##### Project 23\r\n**Project:** Ask the user for a number and print the result of multiplying it by itself.\r\n```akandechips\r\nn = int(input(""Number: ""))\r\nprint(n * n)\r\n```\r\n**Expected Output:**\r\n```\r\nNumber: 11\r\n121\r\n```\r\n\r\n##### Project 24\r\n**Project:** Ask the user for a string and print the string with all vowels removed.\r\n```akandechips\r\ntext = input(""Text: "")\r\nvowels = 'aeiouAEIOU'\r\nresult = ''.join([c for c in text if c not in vowels])\r\nprint(result)\r\n```\r\n**Expected Output:**\r\n```\r\nText: chips are cool\r\nchps r cl\r\n```\r\n\r\n##### Project 25\r\n**Project:** Ask the user for a number and print the result of adding 7 to it.\r\n```akandechips\r\nn = int(input(""Number: ""))\r\nprint(n + 7)\r\n```\r\n**Expected Output:**\r\n```\r\nNumber: 8\r\n15\r\n```\r\n\r\n##### Project 26\r\n**Project:** Ask the user for a word and print the word with all consonants removed.\r\n```akandechips\r\nword = input(""Word: "")\r\nvowels = 'aeiouAEIOU'\r\nresult = ''.join([c for c in word if c in vowels])\r\nprint(result)\r\n```\r\n**Expected Output:**\r\n```\r\nWord: Akande\r\nAae\r\n```\r\n\r\n##### Project 27\r\n**Project:** Ask the user for a number and print the result of dividing it by 4 (rounded to 2 decimals).\r\n```akandechips\r\nn = int(input(""Number: ""))\r\nprint(round(n / 4, 2))\r\n```\r\n**Expected Output:**\r\n```\r\nNumber: 10\r\n2.5\r\n```\r\n\r\n##### Project 28\r\n**Project:** Ask the user for a string and print the string with each word capitalized.\r\n```akandechips\r\ntext = input(""Text: "")\r\nprint(text.title())\r\n```\r\n**Expected Output:**\r\n```\r\nText: chips are cool\r\nChips Are Cool\r\n```\r\n\r\n##### Project 29\r\n**Project:** Ask the user for a number and print the result of subtracting 100 from it.\r\n```akandechips\r\nn = int(input(""Number: ""))\r\nprint(n - 100)\r\n```\r\n**Expected Output:**\r\n```\r\nNumber: 150\r\n50\r\n```\r\n\r\n##### Project 30\r\n**Project:** Ask the user for a word and print the word with each letter separated by a dash.\r\n```akandechips\r\nword = input(""Word: "")\r\nprint(""-"".join(word))\r\n```\r\n**Expected Output:**\r\n```\r\nWord: chips\r\nc-h-i-p-s\r\n```\r\n\r\n---\r\n\r\n### Comments and Documentation\r\n**Explanation:**\r\nComments help explain code to humans. Documentation makes programs easier to understand and maintain.\r\n\r\n#### Coding Questions & Answers\r\n\r\n1. **What is a comment in AkandeChips?**\r\n   \r\n   **Answer:**\r\n   A comment is text in the code that is ignored by the computer but helps humans understand the code. In AkandeChips, comments start with `#`.\r\n   \r\n   **Example:**\r\n   ```akandechips\r\n   # This is a comment\r\n   print ""Hello!""\r\n   ```\r\n   **Output:**\r\n   ```\r\n   Hello!\r\n   ```\r\n\r\n2. **How do you write a single-line comment?**\r\n   \r\n   **Answer:**\r\n   Start the line with `#`.\r\n   \r\n   **Example:**\r\n   ```akandechips\r\n   # This is a single-line comment\r\n   print ""Done""\r\n   ```\r\n   **Output:**\r\n   ```\r\n   Done\r\n   ```\r\n\r\n3. **Can you put a comment after code on the same line?**\r\n   \r\n   **Answer:**\r\n   Yes, just add `#` after the code.\r\n   \r\n   **Example:**\r\n   ```akandechips\r\n   print ""Hi"" # This prints Hi\r\n   ```\r\n   **Output:**\r\n   ```\r\n   Hi\r\n   ```\r\n\r\n4. **What happens if you forget the `#` before a comment?**\r\n   \r\n   **Answer:**\r\n   The program will try to run the text as code and may give an error.\r\n\r\n5. **How do you write a multi-line comment?**\r\n   \r\n   **Answer:**\r\n   Use `#` at the start of each line.\r\n   \r\n   **Example:**\r\n   ```akandechips\r\n   # This is a comment\r\n   # that spans multiple lines\r\n   print ""Go!""\r\n   ```\r\n   **Output:**\r\n   ```\r\n   Go!\r\n   ```\r\n\r\n6. **Can comments be placed before, after, or between code lines?**\r\n   \r\n   **Answer:**\r\n   Yes, comments can be placed anywhere in the code.\r\n\r\n7. **Do comments affect the output of a program?**\r\n   \r\n   **Answer:**\r\n   No, comments are ignored by the computer.\r\n\r\n8. **How do you document what a function does?**\r\n   \r\n   **Answer:**\r\n   Place a comment above the function explaining its purpose.\r\n   \r\n   **Example:**\r\n   ```akandechips\r\n   # Adds two numbers\r\n   function add(a, b):\r\n       return a + b\r\n   ```\r\n\r\n9. **How do you write a comment to explain a tricky part of code?**\r\n   \r\n   **Answer:**\r\n   Place a comment right before or on the same line as the tricky code.\r\n\r\n10. **What is documentation?**\r\n    \r\n    **Answer:**\r\n    Documentation is text that explains how code works, what it does, and how to use it. It can be comments or separate files.\r\n\r\n11. **Why is documentation important?**\r\n    \r\n    **Answer:**\r\n    It helps others (and your future self) understand and use your code.\r\n\r\n12. **How do you write a comment to describe what a variable stores?**\r\n    \r\n    **Answer:**\r\n    Place a comment next to the variable assignment.\r\n    \r\n    **Example:**\r\n    ```akandechips\r\n    age = 16 # User's age\r\n    ```\r\n\r\n13. **Can you use comments to temporarily disable code?**\r\n    \r\n    **Answer:**\r\n    Yes, by commenting out the code line.\r\n    \r\n    **Example:**\r\n    ```akandechips\r\n    # print ""This won't run""\r\n    print ""This will run""\r\n    ```\r\n    **Output:**\r\n    ```\r\n    This will run\r\n    ```\r\n\r\n14. **How do you write a comment at the end of a function?**\r\n    \r\n    **Answer:**\r\n    Add `#` and your comment after the last line of the function.\r\n\r\n15. **What is a docstring?**\r\n    \r\n    **Answer:**\r\n    In AkandeChips, use comments for documentation. (Docstrings are a Python feature.)\r\n\r\n16. **How do you write a comment to explain a loop?**\r\n    \r\n    **Answer:**\r\n    Place a comment before or inside the loop.\r\n    \r\n    **Example:**\r\n    ```akandechips\r\n    # Loop from 1 to 3\r\n    for i in 1 to 3:\r\n        print i\r\n    ```\r\n    **Output:**\r\n    ```\r\n    1\r\n    2\r\n    3\r\n    ```\r\n\r\n17. **Can comments be used to mark TODOs?**\r\n    \r\n    **Answer:**\r\n    Yes, write `# TODO: ...` to mark things to do later.\r\n\r\n18. **How do you write a comment to explain a function parameter?**\r\n    \r\n    **Answer:**\r\n    Place a comment next to the parameter in the function definition.\r\n\r\n19. **How do you write a comment to explain a return value?**\r\n    \r\n    **Answer:**\r\n    Place a comment before the return statement.\r\n\r\n20. **How do you write a comment to explain why code is written a certain way?**\r\n    \r\n    **Answer:**\r\n    Place a comment before or after the code, explaining your reasoning.\r\n\r\n21. **Can you use comments to separate sections of code?**\r\n    \r\n    **Answer:**\r\n    Yes, use comments like `# --- Section Name ---`.\r\n\r\n22. **How do you write a comment to explain an error message?**\r\n    \r\n    **Answer:**\r\n    Place a comment above the code that might cause the error, explaining what to watch for.\r\n\r\n23. **How do you write a comment to explain a constant value?**\r\n    \r\n    **Answer:**\r\n    Place a comment next to the constant definition.\r\n\r\n24. **How do you write a comment to explain a calculation?**\r\n    \r\n    **Answer:**\r\n    Place a comment before or after the calculation.\r\n\r\n25. **How do you write a comment to explain a conditional statement?**\r\n    \r\n    **Answer:**\r\n    Place a comment before or inside the conditional block.\r\n\r\n26. **How do you write a comment to explain a list or array?**\r\n    \r\n    **Answer:**\r\n    Place a comment next to the list definition.\r\n\r\n27. **How do you write a comment to explain a class?**\r\n    \r\n    **Answer:**\r\n    Place a comment above the class definition.\r\n\r\n28. **How do you write a comment to explain a module or file?**\r\n    \r\n    **Answer:**\r\n    Place a comment at the top of the file.\r\n\r\n29. **How do you write a comment to explain a bug fix?**\r\n    \r\n    **Answer:**\r\n    Place a comment above the fixed code, explaining what was fixed.\r\n\r\n30. **How do you write a comment to explain a shortcut or trick?**\r\n    \r\n    **Answer:**\r\n    Place a comment before or after the code, explaining the trick.\r\n\r\n31. **How do you write a comment to explain a code example?**\r\n    \r\n    **Answer:**\r\n    Place a comment above the example code.\r\n\r\n32. **How do you write a comment to explain a deprecated feature?**\r\n    \r\n    **Answer:**\r\n    Place a comment above the code, noting it is deprecated.\r\n\r\n33. **How do you write a comment to explain a performance consideration?**\r\n    \r\n    **Answer:**\r\n    Place a comment before the code, explaining the performance issue.\r\n\r\n34. **How do you write a comment to explain a security consideration?**\r\n    \r\n    **Answer:**\r\n    Place a comment before the code, explaining the security concern.\r\n\r\n35. **How do you write a comment to explain a user input?**\r\n    \r\n    **Answer:**\r\n    Place a comment next to the input statement.\r\n\r\n36. **How do you write a comment to explain a file operation?**\r\n    \r\n    **Answer:**\r\n    Place a comment before or after the file operation code.\r\n\r\n37. **How do you write a comment to explain a network operation?**\r\n    \r\n    **Answer:**\r\n    Place a comment before or after the network code.\r\n\r\n38. **How do you write a comment to explain a database operation?**\r\n    \r\n    **Answer:**\r\n    Place a comment before or after the database code.\r\n\r\n39. **How do you write a comment to explain a test case?**\r\n    \r\n    **Answer:**\r\n    Place a comment above the test code.\r\n\r\n40. **How do you write a comment to explain a configuration setting?**\r\n    \r\n    **Answer:**\r\n    Place a comment next to the setting.\r\n\r\n\r\n#### Projects & Solutions\r\n\r\n1. **Project:** Add comments to explain a program that prints your name.\r\n   \r\n   **Solution:**\r\n   ```akandechips\r\n   # Print the user's name\r\n   print ""Akande""\r\n   ```\r\n   **Output:**\r\n   ```\r\n   Akande\r\n   ```\r\n\r\n2. **Project:** Write a program with comments explaining each step: ask for age, add 1, print result.\r\n   \r\n   **Solution:**\r\n   ```akandechips\r\n   # Ask for the user's age\r\n   age = input ""Enter your age: ""\r\n   # Add 1 to the age\r\n   next_year = age + 1\r\n   # Print the result\r\n   print next_year\r\n   ```\r\n   **Output:**\r\n   (If input is 15)\r\n   ```\r\n   16\r\n   ```\r\n\r\n3. **Project:** Add comments to a program that prints numbers 1 to 5.\r\n   \r\n   **Solution:**\r\n   ```akandechips\r\n   # Print numbers 1 to 5\r\n   for i in 1 to 5:\r\n       print i\r\n   ```\r\n   **Output:**\r\n   ```\r\n   1\r\n   2\r\n   3\r\n   4\r\n   5\r\n   ```\r\n\r\n4. **Project:** Write a program with a comment explaining a calculation.\r\n   \r\n   **Solution:**\r\n   ```akandechips\r\n   # Calculate area of a rectangle\r\n   width = 4\r\n   height = 3\r\n   area = width * height # area formula\r\n   print area\r\n   ```\r\n   **Output:**\r\n   ```\r\n   12\r\n   ```\r\n\r\n5. **Project:** Add a comment to explain a conditional statement.\r\n   \r\n   **Solution:**\r\n   ```akandechips\r\n   age = 18\r\n   # Check if age is 18 or older\r\n   if age >= 18:\r\n       print ""Adult""\r\n   else:\r\n       print ""Minor""\r\n   ```\r\n   **Output:**\r\n   ```\r\n   Adult\r\n   ```\r\n\r\n6. **Project:** Write a program with comments marking TODOs.\r\n   \r\n   **Solution:**\r\n   ```akandechips\r\n   # TODO: Ask for user input\r\n   # TODO: Validate input\r\n   print ""Feature coming soon!""\r\n   ```\r\n   **Output:**\r\n   ```\r\n   Feature coming soon!\r\n   ```\r\n\r\n7. **Project:** Add comments to explain a function and its parameters.\r\n   \r\n   **Solution:**\r\n   ```akandechips\r\n   # Adds two numbers\r\n   function add(a, b):\r\n       # a: first number\r\n       # b: second number\r\n       return a + b\r\n   print add(2, 3)\r\n   ```\r\n   **Output:**\r\n   ```\r\n   5\r\n   ```\r\n\r\n8. **Project:** Write a program with comments explaining a loop.\r\n   \r\n   **Solution:**\r\n   ```akandechips\r\n   # Loop through even numbers from 2 to 10\r\n   for i in 2 to 10 step 2:\r\n       print i\r\n   ```\r\n   **Output:**\r\n   ```\r\n   2\r\n   4\r\n   6\r\n   8\r\n   10\r\n   ```\r\n\r\n9. **Project:** Add comments to explain a list.\r\n   \r\n   **Solution:**\r\n   ```akandechips\r\n   # List of fruits\r\n   fruits = [""apple"", ""banana"", ""cherry""]\r\n   print fruits\r\n   ```\r\n   **Output:**\r\n   ```\r\n   [""apple"", ""banana"", ""cherry""]\r\n   ```\r\n\r\n10. **Project:** Write a program with a comment explaining a bug fix.\r\n    \r\n    **Solution:**\r\n    ```akandechips\r\n    # Fixed: changed == to =\r\n    x = 5\r\n    print x\r\n    ```\r\n    **Output:**\r\n    ```\r\n    5\r\n    ```\r\n\r\n11. **Project:** Add comments to explain a shortcut in code.\r\n    \r\n    **Solution:**\r\n    ```akandechips\r\n    # Shortcut: print numbers 1 to 3 in one line\r\n    print 1, 2, 3\r\n    ```\r\n    **Output:**\r\n    ```\r\n    1 2 3\r\n    ```\r\n\r\n12. **Project:** Write a program with comments explaining a file operation.\r\n    \r\n    **Solution:**\r\n    ```akandechips\r\n    # Open file for writing\r\n    file = open ""data.txt"" write\r\n    # Write text to file\r\n    file.write ""Hello file!""\r\n    # Close file\r\n    file.close\r\n    ```\r\n\r\n13. **Project:** Add comments to explain a configuration setting.\r\n    \r\n    **Solution:**\r\n    ```akandechips\r\n    # Set debug mode\r\n    debug = true # enables debug output\r\n    ```\r\n\r\n14. **Project:** Write a program with comments explaining a test case.\r\n    \r\n    **Solution:**\r\n    ```akandechips\r\n    # Test: add(2, 2) should return 4\r\n    function add(a, b):\r\n        return a + b\r\n    print add(2, 2)\r\n    ```\r\n    **Output:**\r\n    ```\r\n    4\r\n    ```\r\n\r\n15. **Project:** Add comments to explain a deprecated feature.\r\n    \r\n    **Solution:**\r\n    ```akandechips\r\n    # Deprecated: use new_function instead\r\n    function old_function():\r\n        print ""Old!""\r\n    ```\r\n\r\n16. **Project:** Write a program with comments explaining a performance consideration.\r\n    \r\n    **Solution:**\r\n    ```akandechips\r\n    # Performance: avoid using slow_function in loops\r\n    for i in 1 to 100:\r\n        # slow_function(i)\r\n        pass\r\n    ```\r\n\r\n17. **Project:** Add comments to explain a security consideration.\r\n    \r\n    **Solution:**\r\n    ```akandechips\r\n    # Security: never print passwords\r\n    password = input ""Enter password: ""\r\n    # print password  # Don't do this!\r\n    ```\r\n\r\n18. **Project:** Write a program with comments explaining a user input.\r\n    \r\n    **Solution:**\r\n    ```akandechips\r\n    # Ask for user's favorite color\r\n    color = input ""Favorite color: ""\r\n    print color\r\n    ```\r\n    **Output:**\r\n    (If input is blue)\r\n    ```\r\n    blue\r\n    ```\r\n\r\n19. **Project:** Add comments to explain a network operation.\r\n    \r\n    **Solution:**\r\n    ```akandechips\r\n    # Connect to server\r\n    connect ""example.com""\r\n    ```\r\n\r\n20. **Project:** Write a program with comments explaining a database operation.\r\n    \r\n    **Solution:**\r\n    ```akandechips\r\n    # Connect to database\r\n    db = connect ""mydb""\r\n    # Query data\r\n    data = db.query ""SELECT * FROM users""\r\n    ```\r\n\r\n21. **Project:** Add comments to explain a constant value.\r\n    \r\n    **Solution:**\r\n    ```akandechips\r\n    # Pi constant\r\n    PI = 3.14159\r\n    ```\r\n\r\n22. **Project:** Write a program with comments explaining a class.\r\n    \r\n    **Solution:**\r\n    ```akandechips\r\n    # User class\r\n    class User:\r\n        # User's name\r\n        name = """"\r\n    ```\r\n\r\n23. **Project:** Add comments to explain a module or file.\r\n    \r\n    **Solution:**\r\n    ```akandechips\r\n    # Math utilities module\r\n    # Provides math functions\r\n    ```\r\n\r\n24. **Project:** Write a program with comments explaining a tricky part of code.\r\n    \r\n    **Solution:**\r\n    ```akandechips\r\n    # Trick: swap two variables\r\n    a = 5\r\n    b = 7\r\n    # Swap\r\n    a, b = b, a\r\n    print a, b\r\n    ```\r\n    **Output:**\r\n    ```\r\n    7 5\r\n    ```\r\n\r\n25. **Project:** Add comments to explain a shortcut or trick.\r\n    \r\n    **Solution:**\r\n    ```akandechips\r\n    # Shortcut: print even numbers\r\n    print [i for i in 2 to 10 step 2]\r\n    ```\r\n    **Output:**\r\n    ```\r\n    [2, 4, 6, 8, 10]\r\n    ```\r\n\r\n26. **Project:** Write a program with comments explaining a calculation.\r\n    \r\n    **Solution:**\r\n    ```akandechips\r\n    # Calculate average\r\n    total = 10\r\n    count = 2\r\n    average = total / count # average formula\r\n    print average\r\n    ```\r\n    **Output:**\r\n    ```\r\n    5\r\n    ```\r\n\r\n27. **Project:** Add comments to explain a conditional statement.\r\n    \r\n    **Solution:**\r\n    ```akandechips\r\n    # Check if number is even\r\n    num = 4\r\n    if num % 2 == 0:\r\n        print ""Even""\r\n    else:\r\n        print ""Odd""\r\n    ```\r\n    **Output:**\r\n    ```\r\n    Even\r\n    ```\r\n\r\n28. **Project:** Write a program with comments explaining a list or array.\r\n    \r\n    **Solution:**\r\n    ```akandechips\r\n    # List of scores\r\n    scores = [90, 85, 78]\r\n    print scores\r\n    ```\r\n    **Output:**\r\n    ```\r\n    [90, 85, 78]\r\n    ```\r\n\r\n29. **Project:** Add comments to explain a function return value.\r\n    \r\n    **Solution:**\r\n    ```akandechips\r\n    # Returns the square of a number\r\n    function square(x):\r\n        return x * x # result\r\n    print square(4)\r\n    ```\r\n    **Output:**\r\n    ```\r\n    16\r\n    ```\r\n\r\n30. **Project:** Write a program with comments explaining a configuration setting.\r\n    \r\n    **Solution:**\r\n    ```akandechips\r\n    # Set max users\r\n    MAX_USERS = 100 # maximum allowed\r\n    ```\r\n\r\n31. **Project:** Add comments to explain a test case.\r\n    \r\n    **Solution:**\r\n    ```akandechips\r\n    # Test: square(3) should return 9\r\n    print square(3)\r\n    ```\r\n    **Output:**\r\n    ```\r\n    9\r\n    ```\r\n\r\n32. **Project:** Write a program with comments explaining a deprecated feature.\r\n    \r\n    **Solution:**\r\n    ```akandechips\r\n    # Deprecated: use new_add instead\r\n    function old_add(a, b):\r\n        return a + b\r\n    ```\r\n\r\n33. **Project:** Add comments to explain a performance consideration.\r\n    \r\n    **Solution:**\r\n    ```akandechips\r\n    # Performance: avoid recalculating inside loop\r\n    total = 0\r\n    for i in 1 to 100:\r\n        total = total + i\r\n    print total\r\n    ```\r\n    **Output:**\r\n    ```\r\n    5050\r\n    ```\r\n\r\n34. **Project:** Write a program with comments explaining a security consideration.\r\n    \r\n    **Solution:**\r\n    ```akandechips\r\n    # Security: validate user input\r\n    age = input ""Enter age: ""\r\n    if age < 0:\r\n        print ""Invalid age!""\r\n    ```\r\n    **Output:**\r\n    (If input is -1)\r\n    ```\r\n    Invalid age!\r\n    ```\r\n\r\n35. **Project:** Add comments to explain a user input.\r\n    \r\n    **Solution:**\r\n    ```akandechips\r\n    # Ask for user's city\r\n    city = input ""City: ""\r\n    print city\r\n    ```\r\n    **Output:**\r\n    (If input is Dallas)\r\n    ```\r\n    Dallas\r\n    ```\r\n\r\n36. **Project:** Write a program with comments explaining a file operation.\r\n    \r\n    **Solution:**\r\n    ```akandechips\r\n    # Read from file\r\n    file = open ""data.txt"" read\r\n    data = file.read\r\n    print data\r\n    file.close\r\n    ```\r\n\r\n37. **Project:** Add comments to explain a network operation.\r\n    \r\n    **Solution:**\r\n    ```akandechips\r\n    # Download data from server\r\n    download ""http://example.com/data""\r\n    ```\r\n\r\n38. **Project:** Write a program with comments explaining a database operation.\r\n    \r\n    **Solution:**\r\n    ```akandechips\r\n    # Insert new user into database\r\n    db = connect ""mydb""\r\n    db.insert ""users"", {""name"": ""Akande""}\r\n    ```\r\n\r\n39. **Project:** Add comments to explain a test case.\r\n    \r\n    **Solution:**\r\n    ```akandechips\r\n    # Test: add(5, 7) should return 12\r\n    print add(5, 7)\r\n    ```\r\n    **Output:**\r\n    ```\r\n    12\r\n    ```\r\n\r\n40. **Project:** Write a program with comments explaining a configuration setting.\r\n    \r\n    **Solution:**\r\n    ```akandechips\r\n    # Set language\r\n    LANGUAGE = ""en-US""\r\n    ```\r\n\r\n---\r\n\r\n### Error Handling (try/except, Basic Debugging)\r\n**Explanation:**\r\nError handling lets your program deal with unexpected situations without crashing. Debugging helps you find and fix mistakes.\r\n\r\n#### Coding Questions & Answers\r\n\r\n1. **What is error handling?**\r\n   \r\n   **Answer:**\r\n   Error handling is writing code to deal with problems that might happen while your program runs, so it doesn't crash.\r\n\r\n2. **How do you handle errors in AkandeChips?**\r\n   \r\n   **Answer:**\r\n   Use `try` and `except` blocks.\r\n   \r\n   **Example:**\r\n   ```akandechips\r\n   try:\r\n       print 10 / 0\r\n   except:\r\n       print ""Error!""\r\n   ```\r\n   **Output:**\r\n   ```\r\n   Error!\r\n   ```\r\n\r\n3. **What happens if you don't handle an error?**\r\n   \r\n   **Answer:**\r\n   The program will stop and show an error message.\r\n\r\n4. **How do you catch division by zero?**\r\n   \r\n   **Answer:**\r\n   Use `try`/`except` around the division.\r\n   \r\n   **Example:**\r\n   ```akandechips\r\n   try:\r\n       print 5 / 0\r\n   except:\r\n       print ""Cannot divide by zero!""\r\n   ```\r\n   **Output:**\r\n   ```\r\n   Cannot divide by zero!\r\n   ```\r\n\r\n5. **How do you print the error message?**\r\n   \r\n   **Answer:**\r\n   Use `except error as e:` and print `e`.\r\n   \r\n   **Example:**\r\n   ```akandechips\r\n   try:\r\n       print 1 / 0\r\n   except error as e:\r\n       print e\r\n   ```\r\n   **Output:**\r\n   ```\r\n   DivisionByZeroError\r\n   ```\r\n\r\n6. **What is debugging?**\r\n   \r\n   **Answer:**\r\n   Debugging is finding and fixing mistakes (bugs) in your code.\r\n\r\n7. **How do you find where an error happened?**\r\n   \r\n   **Answer:**\r\n   Read the error message and check the line number.\r\n\r\n8. **How do you use print statements to debug?**\r\n   \r\n   **Answer:**\r\n   Add `print` statements to show variable values and program flow.\r\n\r\n9. **How do you handle invalid user input?**\r\n   \r\n   **Answer:**\r\n   Use `try`/`except` when converting input.\r\n   \r\n   **Example:**\r\n   ```akandechips\r\n   try:\r\n       age = int(input ""Enter age: "")\r\n       print age\r\n   except:\r\n       print ""Invalid input!""\r\n   ```\r\n   **Output:**\r\n   (If input is ""abc"")\r\n   ```\r\n   Invalid input!\r\n   ```\r\n\r\n10. **How do you handle file not found errors?**\r\n    \r\n    **Answer:**\r\n    Use `try`/`except` when opening files.\r\n    \r\n    **Example:**\r\n    ```akandechips\r\n    try:\r\n        file = open ""nofile.txt"" read\r\n    except:\r\n        print ""File not found!""\r\n    ```\r\n    **Output:**\r\n    ```\r\n    File not found!\r\n    ```\r\n\r\n11. **How do you handle multiple types of errors?**\r\n    \r\n    **Answer:**\r\n    Use multiple `except` blocks for different errors.\r\n\r\n12. **What is a bug?**\r\n    \r\n    **Answer:**\r\n    A bug is a mistake in your code that causes it to work incorrectly.\r\n\r\n13. **How do you fix a bug?**\r\n    \r\n    **Answer:**\r\n    Find the cause and change the code to correct it.\r\n\r\n14. **How do you avoid bugs?**\r\n    \r\n    **Answer:**\r\n    Test your code, use comments, and write clear code.\r\n\r\n15. **How do you handle errors in a loop?**\r\n    \r\n    **Answer:**\r\n    Put the `try`/`except` inside the loop.\r\n\r\n16. **How do you handle errors in a function?**\r\n    \r\n    **Answer:**\r\n    Use `try`/`except` inside the function.\r\n\r\n17. **How do you make your program keep running after an error?**\r\n    \r\n    **Answer:**\r\n    Use `try`/`except` so the program doesn't stop.\r\n\r\n18. **How do you show a custom error message?**\r\n    \r\n    **Answer:**\r\n    Print your own message in the `except` block.\r\n\r\n19. **How do you handle errors when converting types?**\r\n    \r\n    **Answer:**\r\n    Use `try`/`except` when converting.\r\n\r\n20. **How do you handle errors when accessing a list index?**\r\n    \r\n    **Answer:**\r\n    Use `try`/`except` when accessing the list.\r\n\r\n21. **How do you handle errors when dividing numbers?**\r\n    \r\n    **Answer:**\r\n    Use `try`/`except` around the division.\r\n\r\n22. **How do you handle errors when calling a function?**\r\n    \r\n    **Answer:**\r\n    Use `try`/`except` around the function call.\r\n\r\n23. **How do you handle errors when reading from a file?**\r\n    \r\n    **Answer:**\r\n    Use `try`/`except` when reading.\r\n\r\n24. **How do you handle errors when writing to a file?**\r\n    \r\n    **Answer:**\r\n    Use `try`/`except` when writing.\r\n\r\n25. **How do you handle errors when importing modules?**\r\n    \r\n    **Answer:**\r\n    Use `try`/`except` when importing.\r\n\r\n26. **How do you handle errors when using user input?**\r\n    \r\n    **Answer:**\r\n    Use `try`/`except` when using input.\r\n\r\n27. **How do you handle errors when parsing data?**\r\n    \r\n    **Answer:**\r\n    Use `try`/`except` when parsing.\r\n\r\n28. **How do you handle errors when connecting to a server?**\r\n    \r\n    **Answer:**\r\n    Use `try`/`except` when connecting.\r\n\r\n29. **How do you handle errors when sending data?**\r\n    \r\n    **Answer:**\r\n    Use `try`/`except` when sending.\r\n\r\n30. **How do you handle errors when receiving data?**\r\n    \r\n    **Answer:**\r\n    Use `try`/`except` when receiving.\r\n\r\n31. **How do you handle errors when closing a file?**\r\n    \r\n    **Answer:**\r\n    Use `try`/`except` when closing.\r\n\r\n32. **How do you handle errors when deleting a file?**\r\n    \r\n    **Answer:**\r\n    Use `try`/`except` when deleting.\r\n\r\n33. **How do you handle errors when updating a record?**\r\n    \r\n    **Answer:**\r\n    Use `try`/`except` when updating.\r\n\r\n34. **How do you handle errors when creating a new file?**\r\n    \r\n    **Answer:**\r\n    Use `try`/`except` when creating.\r\n\r\n35. **How do you handle errors when saving data?**\r\n    \r\n    **Answer:**\r\n    Use `try`/`except` when saving.\r\n\r\n36. **How do you handle errors when loading data?**\r\n    \r\n    **Answer:**\r\n    Use `try`/`except` when loading.\r\n\r\n37. **How do you handle errors when using external libraries?**\r\n    \r\n    **Answer:**\r\n    Use `try`/`except` when using libraries.\r\n\r\n38. **How do you handle errors when running code from the internet?**\r\n    \r\n    **Answer:**\r\n    Use `try`/`except` when running code.\r\n\r\n39. **How do you handle errors when working with dates?**\r\n    \r\n    **Answer:**\r\n    Use `try`/`except` when working with dates.\r\n\r\n40. **How do you handle errors when using math operations?**\r\n    \r\n    **Answer:**\r\n    Use `try`/`except` around math operations.\r\n\r\n\r\n#### Projects & Solutions\r\n\r\n1. **Project:** Write a program that divides two numbers and handles division by zero.\r\n   \r\n   **Solution:**\r\n   ```akandechips\r\n   try:\r\n       a = 10\r\n       b = 0\r\n       print a / b\r\n   except:\r\n       print ""Cannot divide by zero!""\r\n   ```\r\n   **Output:**\r\n   ```\r\n   Cannot divide by zero!\r\n   ```\r\n\r\n2. **Project:** Write a program that asks for a number and prints its square. Handle invalid input.\r\n   \r\n   **Solution:**\r\n   ```akandechips\r\n   try:\r\n       num = int(input ""Enter a number: "")\r\n       print num * num\r\n   except:\r\n       print ""Invalid input!""\r\n   ```\r\n   **Output:**\r\n   (If input is ""hi"")\r\n   ```\r\n   Invalid input!\r\n   ```\r\n\r\n3. **Project:** Write a program that opens a file and handles file not found errors.\r\n   \r\n   **Solution:**\r\n   ```akandechips\r\n   try:\r\n       file = open ""nofile.txt"" read\r\n   except:\r\n       print ""File not found!""\r\n   ```\r\n   **Output:**\r\n   ```\r\n   File not found!\r\n   ```\r\n\r\n4. **Project:** Write a program that tries to access an invalid list index and handles the error.\r\n   \r\n   **Solution:**\r\n   ```akandechips\r\n   try:\r\n       nums = [1, 2, 3]\r\n       print nums[5]\r\n   except:\r\n       print ""Index out of range!""\r\n   ```\r\n   **Output:**\r\n   ```\r\n   Index out of range!\r\n   ```\r\n\r\n5. **Project:** Write a program that tries to convert a string to an integer and handles errors.\r\n   \r\n   **Solution:**\r\n   ```akandechips\r\n   try:\r\n       x = int(""abc"")\r\n       print x\r\n   except:\r\n       print ""Conversion error!""\r\n   ```\r\n   **Output:**\r\n   ```\r\n   Conversion error!\r\n   ```\r\n\r\n6. **Project:** Write a program that tries to read from a file and handles errors.\r\n   \r\n   **Solution:**\r\n   ```akandechips\r\n   try:\r\n       file = open ""nofile.txt"" read\r\n       data = file.read\r\n   except:\r\n       print ""Read error!""\r\n   ```\r\n   **Output:**\r\n   ```\r\n   Read error!\r\n   ```\r\n\r\n7. **Project:** Write a program that tries to write to a file and handles errors.\r\n   \r\n   **Solution:**\r\n   ```akandechips\r\n   try:\r\n       file = open ""readonly.txt"" write\r\n       file.write ""Hello""\r\n   except:\r\n       print ""Write error!""\r\n   ```\r\n   **Output:**\r\n   ```\r\n   Write error!\r\n   ```\r\n\r\n8. **Project:** Write a program that tries to delete a file and handles errors.\r\n   \r\n   **Solution:**\r\n   ```akandechips\r\n   try:\r\n       delete ""nofile.txt""\r\n   except:\r\n       print ""Delete error!""\r\n   ```\r\n   **Output:**\r\n   ```\r\n   Delete error!\r\n   ```\r\n\r\n9. **Project:** Write a program that tries to update a record and handles errors.\r\n   \r\n   **Solution:**\r\n   ```akandechips\r\n   try:\r\n       db = connect ""mydb""\r\n       db.update ""users"", {""id"": 1, ""name"": ""New""}\r\n   except:\r\n       print ""Update error!""\r\n   ```\r\n   **Output:**\r\n   ```\r\n   Update error!\r\n   ```\r\n\r\n10. **Project:** Write a program that tries to create a new file and handles errors.\r\n    \r\n    **Solution:**\r\n    ```akandechips\r\n    try:\r\n        file = open ""newfile.txt"" write\r\n    except:\r\n        print ""Create error!""\r\n    ```\r\n    **Output:**\r\n    ```\r\n    Create error!\r\n    ```\r\n\r\n11. **Project:** Write a program that tries to save data and handles errors.\r\n    \r\n    **Solution:**\r\n    ```akandechips\r\n    try:\r\n        save ""data.txt"", ""Hello""\r\n    except:\r\n        print ""Save error!""\r\n    ```\r\n    **Output:**\r\n    ```\r\n    Save error!\r\n    ```\r\n\r\n12. **Project:** Write a program that tries to load data and handles errors.\r\n    \r\n    **Solution:**\r\n    ```akandechips\r\n    try:\r\n        load ""data.txt""\r\n    except:\r\n        print ""Load error!""\r\n    ```\r\n    **Output:**\r\n    ```\r\n    Load error!\r\n    ```\r\n\r\n13. **Project:** Write a program that tries to import a module and handles errors.\r\n    \r\n    **Solution:**\r\n    ```akandechips\r\n    try:\r\n        import math\r\n    except:\r\n        print ""Import error!""\r\n    ```\r\n    **Output:**\r\n    ```\r\n    Import error!\r\n    ```\r\n\r\n14. **Project:** Write a program that tries to connect to a server and handles errors.\r\n    \r\n    **Solution:**\r\n    ```akandechips\r\n    try:\r\n        connect ""badserver""\r\n    except:\r\n        print ""Connection error!""\r\n    ```\r\n    **Output:**\r\n    ```\r\n    Connection error!\r\n    ```\r\n\r\n15. **Project:** Write a program that tries to send data and handles errors.\r\n    \r\n    **Solution:**\r\n    ```akandechips\r\n    try:\r\n        send ""badserver"", ""data""\r\n    except:\r\n        print ""Send error!""\r\n    ```\r\n    **Output:**\r\n    ```\r\n    Send error!\r\n    ```\r\n\r\n16. **Project:** Write a program that tries to receive data and handles errors.\r\n    \r\n    **Solution:**\r\n    ```akandechips\r\n    try:\r\n        receive ""badserver""\r\n    except:\r\n        print ""Receive error!""\r\n    ```\r\n    **Output:**\r\n    ```\r\n    Receive error!\r\n    ```\r\n\r\n17. **Project:** Write a program that tries to close a file and handles errors.\r\n    \r\n    **Solution:**\r\n    ```akandechips\r\n    try:\r\n        file = open ""nofile.txt"" read\r\n        file.close\r\n    except:\r\n        print ""Close error!""\r\n    ```\r\n    **Output:**\r\n    ```\r\n    Close error!\r\n    ```\r\n\r\n18. **Project:** Write a program that tries to parse data and handles errors.\r\n    \r\n    **Solution:**\r\n    ```akandechips\r\n    try:\r\n        parse ""bad data""\r\n    except:\r\n        print ""Parse error!""\r\n    ```\r\n    **Output:**\r\n    ```\r\n    Parse error!\r\n    ```\r\n\r\n19. **Project:** Write a program that tries to use an external library and handles errors.\r\n    \r\n    **Solution:**\r\n    ```akandechips\r\n    try:\r\n        use ""badlib""\r\n    except:\r\n        print ""Library error!""\r\n    ```\r\n    **Output:**\r\n    ```\r\n    Library error!\r\n    ```\r\n\r\n20. **Project:** Write a program that tries to run code from the internet and handles errors.\r\n    \r\n    **Solution:**\r\n    ```akandechips\r\n    try:\r\n        run ""http://badurl""\r\n    except:\r\n        print ""Run error!""\r\n    ```\r\n    **Output:**\r\n    ```\r\n    Run error!\r\n    ```\r\n\r\n21. **Project:** Write a program that tries to work with dates and handles errors.\r\n    \r\n    **Solution:**\r\n    ```akandechips\r\n    try:\r\n        date = parse_date(""bad date"")\r\n    except:\r\n        print ""Date error!""\r\n    ```\r\n    **Output:**\r\n    ```\r\n    Date error!\r\n    ```\r\n\r\n22. **Project:** Write a program that tries a math operation and handles errors.\r\n    \r\n    **Solution:**\r\n    ```akandechips\r\n    try:\r\n        print sqrt(-1)\r\n    except:\r\n        print ""Math error!""\r\n    ```\r\n    **Output:**\r\n    ```\r\n    Math error!\r\n    ```\r\n\r\n23. **Project:** Write a program that tries to access a dictionary key and handles errors.\r\n    \r\n    **Solution:**\r\n    ```akandechips\r\n    try:\r\n        d = {""a"": 1}\r\n        print d[""b""]\r\n    except:\r\n        print ""Key error!""\r\n    ```\r\n    **Output:**\r\n    ```\r\n    Key error!\r\n    ```\r\n\r\n24. **Project:** Write a program that tries to use a variable before assigning it and handles errors.\r\n    \r\n    **Solution:**\r\n    ```akandechips\r\n    try:\r\n        print x\r\n    except:\r\n        print ""Variable error!""\r\n    ```\r\n    **Output:**\r\n    ```\r\n    Variable error!\r\n    ```\r\n\r\n25. **Project:** Write a program that tries to use a function that doesn't exist and handles errors.\r\n    \r\n    **Solution:**\r\n    ```akandechips\r\n    try:\r\n        not_a_function()\r\n    except:\r\n        print ""Function error!""\r\n    ```\r\n    **Output:**\r\n    ```\r\n    Function error!\r\n    ```\r\n\r\n26. **Project:** Write a program that tries to use a class that doesn't exist and handles errors.\r\n    \r\n    **Solution:**\r\n    ```akandechips\r\n    try:\r\n        obj = NoClass()\r\n    except:\r\n        print ""Class error!""\r\n    ```\r\n    **Output:**\r\n    ```\r\n    Class error!\r\n    ```\r\n\r\n27. **Project:** Write a program that tries to use a method that doesn't exist and handles errors.\r\n    \r\n    **Solution:**\r\n    ```akandechips\r\n    try:\r\n        obj = {}\r\n        obj.no_method()\r\n    except:\r\n        print ""Method error!""\r\n    ```\r\n    **Output:**\r\n    ```\r\n    Method error!\r\n    ```\r\n\r\n28. **Project:** Write a program that tries to use a property that doesn't exist and handles errors.\r\n    \r\n    **Solution:**\r\n    ```akandechips\r\n    try:\r\n        obj = {}\r\n        print obj.no_property\r\n    except:\r\n        print ""Property error!""\r\n    ```\r\n    **Output:**\r\n    ```\r\n    Property error!\r\n    ```\r\n\r\n29. **Project:** Write a program that tries to use a module that doesn't exist and handles errors.\r\n    \r\n    **Solution:**\r\n    ```akandechips\r\n    try:\r\n        import badmodule\r\n    except:\r\n        print ""Module error!""\r\n    ```\r\n    **Output:**\r\n    ```\r\n    Module error!\r\n    ```\r\n\r\n30. **Project:** Write a program that tries to use a resource that doesn't exist and handles errors.\r\n    \r\n    **Solution:**\r\n    ```akandechips\r\n    try:\r\n        use ""badresource""\r\n    except:\r\n        print ""Resource error!""\r\n    ```\r\n    **Output:**\r\n    ```\r\n    Resource error!\r\n    ```\r\n\r\n31. **Project:** Write a program that tries to use a network resource and handles errors.\r\n    \r\n    **Solution:**\r\n    ```akandechips\r\n    try:\r\n        connect ""badnetwork""\r\n    except:\r\n        print ""Network error!""\r\n    ```\r\n    **Output:**\r\n    ```\r\n    Network error!\r\n    ```\r\n\r\n32. **Project:** Write a program that tries to use a database resource and handles errors.\r\n    \r\n    **Solution:**\r\n    ```akandechips\r\n    try:\r\n        db = connect ""baddb""\r\n    except:\r\n        print ""Database error!""\r\n    ```\r\n    **Output:**\r\n    ```\r\n    Database error!\r\n    ```\r\n\r\n33. **Project:** Write a program that tries to use a configuration setting that doesn't exist and handles errors.\r\n    \r\n    **Solution:**\r\n    ```akandechips\r\n    try:\r\n        print config[""badsetting""]\r\n    except:\r\n        print ""Config error!""\r\n    ```\r\n    **Output:**\r\n    ```\r\n    Config error!\r\n    ```\r\n\r\n34. **Project:** Write a program that tries to use a setting that is not allowed and handles errors.\r\n    \r\n    **Solution:**\r\n    ```akandechips\r\n    try:\r\n        set ""badsetting"", 1\r\n    except:\r\n        print ""Setting error!""\r\n    ```\r\n    **Output:**\r\n    ```\r\n    Setting error!\r\n    ```\r\n\r\n35. **Project:** Write a program that tries to use a feature that is not supported and handles errors.\r\n    \r\n    **Solution:**\r\n    ```akandechips\r\n    try:\r\n        use ""badfeature""\r\n    except:\r\n        print ""Feature error!""\r\n    ```\r\n    **Output:**\r\n    ```\r\n    Feature error!\r\n    ```\r\n\r\n36. **Project:** Write a program that tries to use a command that is not allowed and handles errors.\r\n    \r\n    **Solution:**\r\n    ```akandechips\r\n    try:\r\n        command ""badcommand""\r\n    except:\r\n        print ""Command error!""\r\n    ```\r\n    **Output:**\r\n    ```\r\n    Command error!\r\n    ```\r\n\r\n37. **Project:** Write a program that tries to use a tool that is not installed and handles errors.\r\n    \r\n    **Solution:**\r\n    ```akandechips\r\n    try:\r\n        tool ""badtool""\r\n    except:\r\n        print ""Tool error!""\r\n    ```\r\n    **Output:**\r\n    ```\r\n    Tool error!\r\n    ```\r\n\r\n38. **Project:** Write a program that tries to use a plugin that is not installed and handles errors.\r\n    \r\n    **Solution:**\r\n    ```akandechips\r\n    try:\r\n        plugin ""badplugin""\r\n    except:\r\n        print ""Plugin error!""\r\n    ```\r\n    **Output:**\r\n    ```\r\n    Plugin error!\r\n    ```\r\n\r\n39. **Project:** Write a program that tries to use a driver that is not installed and handles errors.\r\n    \r\n    **Solution:**\r\n    ```akandechips\r\n    try:\r\n        driver ""baddriver""\r\n    except:\r\n        print ""Driver error!""\r\n    ```\r\n    **Output:**\r\n    ```\r\n    Driver error!\r\n    ```\r\n\r\n40. **Project:** Write a program that tries to use a service that is not running and handles errors.\r\n    \r\n    **Solution:**\r\n    ```akandechips\r\n    try:\r\n        service ""badservice""\r\n    except:\r\n        print ""Service error!""\r\n    ```\r\n    **Output:**\r\n    ```\r\n    Service error!\r\n    ```\r\n\r\n---\r\n\r\n### Functions and Procedures (Defining, Calling, Parameters, Return Values)\r\n**Explanation:**\r\nFunctions let you organize code into reusable blocks. They can take inputs (parameters) and return outputs (return values).\r\n\r\n#### Coding Questions & Answers\r\n\r\n1. **What is a function?**\r\n   \r\n   **Answer:**\r\n   A function is a named block of code that performs a specific task and can be reused.\r\n\r\n2. **How do you define a function in AkandeChips?**\r\n   \r\n   **Answer:**\r\n   Use the `function` keyword.\r\n   \r\n   **Example:**\r\n   ```akandechips\r\n   function greet():\r\n       print ""Hello!""\r\n   ```\r\n\r\n3. **How do you call a function?**\r\n   \r\n   **Answer:**\r\n   Write the function name followed by parentheses.\r\n   \r\n   **Example:**\r\n   ```akandechips\r\n   greet()\r\n   ```\r\n   **Output:**\r\n   ```\r\n   Hello!\r\n   ```\r\n\r\n4. **What is a parameter?**\r\n   \r\n   **Answer:**\r\n   A parameter is a variable in a function definition that receives a value when the function is called.\r\n\r\n5. **How do you define a function with parameters?**\r\n   \r\n   **Answer:**\r\n   List the parameters in parentheses after the function name.\r\n   \r\n   **Example:**\r\n   ```akandechips\r\n   function add(a, b):\r\n       print a + b\r\n   ```\r\n\r\n6. **How do you call a function with arguments?**\r\n   \r\n   **Answer:**\r\n   Pass values inside the parentheses.\r\n   \r\n   **Example:**\r\n   ```akandechips\r\n   add(2, 3)\r\n   ```\r\n   **Output:**\r\n   ```\r\n   5\r\n   ```\r\n\r\n7. **What is a return value?**\r\n   \r\n   **Answer:**\r\n   A return value is the result a function gives back to the code that called it.\r\n\r\n8. **How do you return a value from a function?**\r\n   \r\n   **Answer:**\r\n   Use the `return` keyword.\r\n   \r\n   **Example:**\r\n   ```akandechips\r\n   function square(x):\r\n       return x * x\r\n   print square(4)\r\n   ```\r\n   **Output:**\r\n   ```\r\n   16\r\n   ```\r\n\r\n9. **Can a function have more than one parameter?**\r\n   \r\n   **Answer:**\r\n   Yes.\r\n\r\n10. **Can a function return more than one value?**\r\n    \r\n    **Answer:**\r\n    Yes, return a list or tuple.\r\n\r\n11. **What is a procedure?**\r\n    \r\n    **Answer:**\r\n    A procedure is a function that does not return a value (just performs actions).\r\n\r\n12. **How do you write a procedure?**\r\n    \r\n    **Answer:**\r\n    Define a function without a return statement.\r\n\r\n13. **How do you document a function?**\r\n    \r\n    **Answer:**\r\n    Add a comment above the function explaining what it does.\r\n\r\n14. **How do you use default parameter values?**\r\n    \r\n    **Answer:**\r\n    Assign a value in the parameter list (if supported).\r\n\r\n15. **How do you call a function from inside another function?**\r\n    \r\n    **Answer:**\r\n    Just use the function name and parentheses inside the other function.\r\n\r\n16. **What happens if you call a function with the wrong number of arguments?**\r\n    \r\n    **Answer:**\r\n    You get an error.\r\n\r\n17. **Can functions call themselves?**\r\n    \r\n    **Answer:**\r\n    Yes, this is called recursion.\r\n\r\n18. **How do you return early from a function?**\r\n    \r\n    **Answer:**\r\n    Use the `return` statement before the end of the function.\r\n\r\n19. **How do you store a function's return value in a variable?**\r\n    \r\n    **Answer:**\r\n    Assign the function call to a variable.\r\n    \r\n    **Example:**\r\n    ```akandechips\r\n    result = square(5)\r\n    print result\r\n    ```\r\n    **Output:**\r\n    ```\r\n    25\r\n    ```\r\n\r\n20. **Can you pass variables as arguments to functions?**\r\n    \r\n    **Answer:**\r\n    Yes.\r\n\r\n21. **Can you return a function from another function?**\r\n    \r\n    **Answer:**\r\n    Advanced: If supported, yes.\r\n\r\n22. **How do you write a function that takes no parameters?**\r\n    \r\n    **Answer:**\r\n    Leave the parentheses empty.\r\n\r\n23. **How do you write a function that does nothing?**\r\n    \r\n    **Answer:**\r\n    Use an empty function body or a `pass` statement.\r\n\r\n24. **How do you call a function multiple times?**\r\n    \r\n    **Answer:**\r\n    Call it as many times as needed.\r\n\r\n25. **How do you use a function in a loop?**\r\n    \r\n    **Answer:**\r\n    Call the function inside the loop.\r\n\r\n26. **How do you return different values based on a condition?**\r\n    \r\n    **Answer:**\r\n    Use `if` statements inside the function.\r\n\r\n27. **How do you write a function that prints a message?**\r\n    \r\n    **Answer:**\r\n    Use `print` inside the function.\r\n\r\n28. **How do you write a function that adds two numbers and returns the result?**\r\n    \r\n    **Answer:**\r\n    Define the function with two parameters and use `return a + b`.\r\n\r\n29. **How do you write a function that returns the maximum of two numbers?**\r\n    \r\n    **Answer:**\r\n    Use an `if` statement to compare and return the larger value.\r\n\r\n30. **How do you write a function that returns the length of a list?**\r\n    \r\n    **Answer:**\r\n    Use the `len` function inside your function.\r\n\r\n31. **How do you write a function that reverses a string?**\r\n    \r\n    **Answer:**\r\n    Use slicing or a loop to reverse the string.\r\n\r\n32. **How do you write a function that checks if a number is even?**\r\n    \r\n    **Answer:**\r\n    Use `return n % 2 == 0`.\r\n\r\n33. **How do you write a function that repeats a string n times?**\r\n    \r\n    **Answer:**\r\n    Use `return s * n` or a loop.\r\n\r\n34. **How do you write a function that sums all numbers in a list?**\r\n    \r\n    **Answer:**\r\n    Use a loop to add up the numbers and return the sum.\r\n\r\n35. **How do you write a function that finds the smallest number in a list?**\r\n    \r\n    **Answer:**\r\n    Use a loop to compare and return the smallest value.\r\n\r\n36. **How do you write a function that returns True if a string is a palindrome?**\r\n    \r\n    **Answer:**\r\n    Compare the string to its reverse.\r\n\r\n37. **How do you write a function that counts vowels in a string?**\r\n    \r\n    **Answer:**\r\n    Loop through the string and count vowels.\r\n\r\n38. **How do you write a function that returns the factorial of a number?**\r\n    \r\n    **Answer:**\r\n    Use a loop or recursion to multiply numbers up to n.\r\n\r\n39. **How do you write a function that returns the average of a list?**\r\n    \r\n    **Answer:**\r\n    Sum the list and divide by its length.\r\n\r\n40. **How do you write a function that prints each item in a list?**\r\n    \r\n    **Answer:**\r\n    Loop through the list and print each item.\r\n\r\n\r\n#### Projects & Solutions\r\n\r\n1. **Project:** Write a function that prints ""Welcome!"" and call it.\r\n   \r\n   **Solution:**\r\n   ```akandechips\r\n   function welcome():\r\n       print ""Welcome!""\r\n   welcome()\r\n   ```\r\n   **Output:**\r\n   ```\r\n   Welcome!\r\n   ```\r\n\r\n2. **Project:** Write a function that takes a name and prints ""Hello, name!"" Call it with your name.\r\n   \r\n   **Solution:**\r\n   ```akandechips\r\n   function greet(name):\r\n       print ""Hello, "" + name + ""!""\r\n   greet(""Akande"")\r\n   ```\r\n   **Output:**\r\n   ```\r\n   Hello, Akande!\r\n   ```\r\n\r\n3. **Project:** Write a function that adds two numbers and returns the result. Print the result of adding 5 and 7.\r\n   \r\n   **Solution:**\r\n   ```akandechips\r\n   function add(a, b):\r\n       return a + b\r\n   print add(5, 7)\r\n   ```\r\n   **Output:**\r\n   ```\r\n   12\r\n   ```\r\n\r\n4. **Project:** Write a function that returns the square of a number. Print the square of 6.\r\n   \r\n   **Solution:**\r\n   ```akandechips\r\n   function square(x):\r\n       return x * x\r\n   print square(6)\r\n   ```\r\n   **Output:**\r\n   ```\r\n   36\r\n   ```\r\n\r\n5. **Project:** Write a function that checks if a number is even. Print the result for 4 and 7.\r\n   \r\n   **Solution:**\r\n   ```akandechips\r\n   function is_even(n):\r\n       return n % 2 == 0\r\n   print is_even(4)\r\n   print is_even(7)\r\n   ```\r\n   **Output:**\r\n   ```\r\n   True\r\n   False\r\n   ```\r\n\r\n6. **Project:** Write a function that returns the maximum of two numbers. Print the maximum of 8 and 3.\r\n   \r\n   **Solution:**\r\n   ```akandechips\r\n   function maximum(a, b):\r\n       if a > b:\r\n           return a\r\n       else:\r\n           return b\r\n   print maximum(8, 3)\r\n   ```\r\n   **Output:**\r\n   ```\r\n   8\r\n   ```\r\n\r\n7. **Project:** Write a function that returns the length of a list. Print the length of [1, 2, 3, 4].\r\n   \r\n   **Solution:**\r\n   ```akandechips\r\n   function list_length(lst):\r\n       return len(lst)\r\n   print list_length([1, 2, 3, 4])\r\n   ```\r\n   **Output:**\r\n   ```\r\n   4\r\n   ```\r\n\r\n8. **Project:** Write a function that reverses a string. Print the reverse of ""chips"".\r\n   \r\n   **Solution:**\r\n   ```akandechips\r\n   function reverse(s):\r\n       return s[::-1]\r\n   print reverse(""chips"")\r\n   ```\r\n   **Output:**\r\n   ```\r\n   spihc\r\n   ```\r\n\r\n9. **Project:** Write a function that repeats a string n times. Print ""ha"" 3 times.\r\n   \r\n   **Solution:**\r\n   ```akandechips\r\n   function repeat(s, n):\r\n       return s * n\r\n   print repeat(""ha"", 3)\r\n   ```\r\n   **Output:**\r\n   ```\r\n   hahaha\r\n   ```\r\n\r\n10. **Project:** Write a function that sums all numbers in a list. Print the sum of [2, 4, 6].\r\n    \r\n    **Solution:**\r\n    ```akandechips\r\n    function sum_list(lst):\r\n        total = 0\r\n        for x in lst:\r\n            total = total + x\r\n        return total\r\n    print sum_list([2, 4, 6])\r\n    ```\r\n    **Output:**\r\n    ```\r\n    12\r\n    ```\r\n\r\n11. **Project:** Write a function that finds the smallest number in a list. Print the smallest of [5, 3, 9].\r\n    \r\n    **Solution:**\r\n    ```akandechips\r\n    function min_list(lst):\r\n        min_val = lst[0]\r\n        for x in lst:\r\n            if x < min_val:\r\n                min_val = x\r\n        return min_val\r\n    print min_list([5, 3, 9])\r\n    ```\r\n    **Output:**\r\n    ```\r\n    3\r\n    ```\r\n\r\n12. **Project:** Write a function that returns True if a string is a palindrome. Print the result for ""level"" and ""chips"".\r\n    \r\n    **Solution:**\r\n    ```akandechips\r\n    function is_palindrome(s):\r\n        return s == s[::-1]\r\n    print is_palindrome(""level"")\r\n    print is_palindrome(""chips"")\r\n    ```\r\n    **Output:**\r\n    ```\r\n    True\r\n    False\r\n    ```\r\n\r\n13. **Project:** Write a function that counts vowels in a string. Print the number of vowels in ""Akande"".\r\n    \r\n    **Solution:**\r\n    ```akandechips\r\n    function count_vowels(s):\r\n        count = 0\r\n        for c in s:\r\n            if c in ""aeiouAEIOU"":\r\n                count = count + 1\r\n        return count\r\n    print count_vowels(""Akande"")\r\n    ```\r\n    **Output:**\r\n    ```\r\n    3\r\n    ```\r\n\r\n14. **Project:** Write a function that returns the factorial of a number. Print the factorial of 5.\r\n    \r\n    **Solution:**\r\n    ```akandechips\r\n    function factorial(n):\r\n        result = 1\r\n        for i in 1 to n:\r\n            result = result * i\r\n        return result\r\n    print factorial(5)\r\n    ```\r\n    **Output:**\r\n    ```\r\n    120\r\n    ```\r\n\r\n15. **Project:** Write a function that returns the average of a list. Print the average of [2, 4, 6].\r\n    \r\n    **Solution:**\r\n    ```akandechips\r\n    function average(lst):\r\n        return sum_list(lst) / len(lst)\r\n    print average([2, 4, 6])\r\n    ```\r\n    **Output:**\r\n    ```\r\n    4\r\n    ```\r\n\r\n16. **Project:** Write a function that prints each item in a list. Use it for [""a"", ""b"", ""c""].\r\n    \r\n    **Solution:**\r\n    ```akandechips\r\n    function print_items(lst):\r\n        for item in lst:\r\n            print item\r\n    print_items([""a"", ""b"", ""c""])\r\n    ```\r\n    **Output:**\r\n    ```\r\n    a\r\n    b\r\n    c\r\n    ```\r\n\r\n17. **Project:** Write a function that returns the product of all numbers in a list. Print the product of [2, 3, 4].\r\n    \r\n    **Solution:**\r\n    ```akandechips\r\n    function product_list(lst):\r\n        result = 1\r\n        for x in lst:\r\n            result = result * x\r\n        return result\r\n    print product_list([2, 3, 4])\r\n    ```\r\n    **Output:**\r\n    ```\r\n    24\r\n    ```\r\n\r\n18. **Project:** Write a function that returns the first item in a list. Print the first item of [10, 20, 30].\r\n    \r\n    **Solution:**\r\n    ```akandechips\r\n    function first_item(lst):\r\n        return lst[0]\r\n    print first_item([10, 20, 30])\r\n    ```\r\n    **Output:**\r\n    ```\r\n    10\r\n    ```\r\n\r\n19. **Project:** Write a function that returns the last item in a list. Print the last item of [10, 20, 30].\r\n    \r\n    **Solution:**\r\n    ```akandechips\r\n    function last_item(lst):\r\n        return lst[-1]\r\n    print last_item([10, 20, 30])\r\n    ```\r\n    **Output:**\r\n    ```\r\n    30\r\n    ```\r\n\r\n20. **Project:** Write a function that returns the sum of even numbers in a list. Print the sum for [1, 2, 3, 4].\r\n    \r\n    **Solution:**\r\n    ```akandechips\r\n    function sum_even(lst):\r\n        total = 0\r\n        for x in lst:\r\n            if x % 2 == 0:\r\n                total = total + x\r\n        return total\r\n    print sum_even([1, 2, 3, 4])\r\n    ```\r\n    **Output:**\r\n    ```\r\n    6\r\n    ```\r\n\r\n21. **Project:** Write a function that returns the sum of odd numbers in a list. Print the sum for [1, 2, 3, 4].\r\n    \r\n    **Solution:**\r\n    ```akandechips\r\n    function sum_odd(lst):\r\n        total = 0\r\n        for x in lst:\r\n            if x % 2 != 0:\r\n                total = total + x\r\n        return total\r\n    print sum_odd([1, 2, 3, 4])\r\n    ```\r\n    **Output:**\r\n    ```\r\n    4\r\n    ```\r\n\r\n22. **Project:** Write a function that returns the largest number in a list. Print the largest of [5, 9, 2].\r\n    \r\n    **Solution:**\r\n    ```akandechips\r\n    function max_list(lst):\r\n        max_val = lst[0]\r\n        for x in lst:\r\n            if x > max_val:\r\n                max_val = x\r\n        return max_val\r\n    print max_list([5, 9, 2])\r\n    ```\r\n    **Output:**\r\n    ```\r\n    9\r\n    ```\r\n\r\n23. **Project:** Write a function that returns the index of an item in a list. Print the index of 7 in [3, 7, 9].\r\n    \r\n    **Solution:**\r\n    ```akandechips\r\n    function index_of(lst, item):\r\n        for i in 0 to len(lst)-1:\r\n            if lst[i] == item:\r\n                return i\r\n        return -1\r\n    print index_of([3, 7, 9], 7)\r\n    ```\r\n    **Output:**\r\n    ```\r\n    1\r\n    ```\r\n\r\n24. **Project:** Write a function that returns True if a list contains a value. Print the result for 5 in [1, 2, 5].\r\n    \r\n    **Solution:**\r\n    ```akandechips\r\n    function contains(lst, value):\r\n        for x in lst:\r\n            if x == value:\r\n                return True\r\n        return False\r\n    print contains([1, 2, 5], 5)\r\n    ```\r\n    **Output:**\r\n    ```\r\n    True\r\n    ```\r\n\r\n25. **Project:** Write a function that returns a list of even numbers from a list. Print the result for [1, 2, 3, 4].\r\n    \r\n    **Solution:**\r\n    ```akandechips\r\n    function evens(lst):\r\n        result = []\r\n        for x in lst:\r\n            if x % 2 == 0:\r\n                result.append(x)\r\n        return result\r\n    print evens([1, 2, 3, 4])\r\n    ```\r\n    **Output:**\r\n    ```\r\n    [2, 4]\r\n    ```\r\n\r\n26. **Project:** Write a function that returns a list of odd numbers from a list. Print the result for [1, 2, 3, 4].\r\n    \r\n    **Solution:**\r\n    ```akandechips\r\n    function odds(lst):\r\n        result = []\r\n        for x in lst:\r\n            if x % 2 != 0:\r\n                result.append(x)\r\n        return result\r\n    print odds([1, 2, 3, 4])\r\n    ```\r\n    **Output:**\r\n    ```\r\n    [1, 3]\r\n    ```\r\n\r\n27. **Project:** Write a function that returns a list with each string in a list uppercased. Print the result for [""a"", ""b""].\r\n    \r\n    **Solution:**\r\n    ```akandechips\r\n    function upper_all(lst):\r\n        result = []\r\n        for s in lst:\r\n            result.append(s.upper())\r\n        return result\r\n    print upper_all([""a"", ""b""])\r\n    ```\r\n    **Output:**\r\n    ```\r\n    [""A"", ""B""]\r\n    ```\r\n\r\n28. **Project:** Write a function that returns a list with each number doubled. Print the result for [1, 2, 3].\r\n    \r\n    **Solution:**\r\n    ```akandechips\r\n    function double_all(lst):\r\n        result = []\r\n        for x in lst:\r\n            result.append(x * 2)\r\n        return result\r\n    print double_all([1, 2, 3])\r\n    ```\r\n    **Output:**\r\n    ```\r\n    [2, 4, 6]\r\n    ```\r\n\r\n29. **Project:** Write a function that returns a list of strings longer than 3 characters. Print the result for [""hi"", ""chips"", ""ok""]\r\n    \r\n    **Solution:**\r\n    ```akandechips\r\n    function longer_than_3(lst):\r\n        result = []\r\n        for s in lst:\r\n            if len(s) > 3:\r\n                result.append(s)\r\n        return result\r\n    print longer_than_3([""hi"", ""chips"", ""ok""])\r\n    ```\r\n    **Output:**\r\n    ```\r\n    [""chips""]\r\n    ```\r\n\r\n30. **Project:** Write a function that returns the sum of all digits in a number. Print the sum for 1234.\r\n    \r\n    **Solution:**\r\n    ```akandechips\r\n    function sum_digits(n):\r\n        total = 0\r\n        for d in str(n):\r\n            total = total + int(d)\r\n        return total\r\n    print sum_digits(1234)\r\n    ```\r\n    **Output:**\r\n    ```\r\n    10\r\n    ```\r\n\r\n31. **Project:** Write a function that returns the number of words in a string. Print the result for ""chips are fun"".\r\n    \r\n    **Solution:**\r\n    ```akandechips\r\n    function word_count(s):\r\n        return len(s.split())\r\n    print word_count(""chips are fun"")\r\n    ```\r\n    **Output:**\r\n    ```\r\n    3\r\n    ```\r\n\r\n32. **Project:** Write a function that returns a list of the lengths of each word in a string. Print the result for ""chips are fun"".\r\n    \r\n    **Solution:**\r\n    ```akandechips\r\n    function word_lengths(s):\r\n        return [len(word) for word in s.split()]\r\n    print word_lengths(""chips are fun"")\r\n    ```\r\n    **Output:**\r\n    ```\r\n    [5, 3, 3]\r\n    ```\r\n\r\n33. **Project:** Write a function that returns True if all numbers in a list are positive. Print the result for [1, 2, 3] and [-1, 2, 3].\r\n    \r\n    **Solution:**\r\n    ```akandechips\r\n    function all_positive(lst):\r\n        for x in lst:\r\n            if x <= 0:\r\n                return False\r\n        return True\r\n    print all_positive([1, 2, 3])\r\n    print all_positive([-1, 2, 3])\r\n    ```\r\n    **Output:**\r\n    ```\r\n    True\r\n    False\r\n    ```\r\n\r\n34. **Project:** Write a function that returns True if any number in a list is negative. Print the result for [1, 2, 3] and [-1, 2, 3].\r\n    \r\n    **Solution:**\r\n    ```akandechips\r\n    function any_negative(lst):\r\n        for x in lst:\r\n            if x < 0:\r\n                return True\r\n        return False\r\n    print any_negative([1, 2, 3])\r\n    print any_negative([-1, 2, 3])\r\n    ```\r\n    **Output:**\r\n    ```\r\n    False\r\n    True\r\n    ```\r\n\r\n35. **Project:** Write a function that returns a list of numbers squared. Print the result for [1, 2, 3].\r\n    \r\n    **Solution:**\r\n    ```akandechips\r\n    function squares(lst):\r\n        result = []\r\n        for x in lst:\r\n            result.append(x * x)\r\n        return result\r\n    print squares([1, 2, 3])\r\n    ```\r\n    **Output:**\r\n    ```\r\n    [1, 4, 9]\r\n    ```\r\n\r\n36. **Project:** Write a function that returns a list of strings reversed. Print the result for [""chips"", ""fun""].\r\n    \r\n    **Solution:**\r\n    ```akandechips\r\n    function reverse_all(lst):\r\n        result = []\r\n        for s in lst:\r\n            result.append(s[::-1])\r\n        return result\r\n    print reverse_all([""chips"", ""fun""])\r\n    ```\r\n    **Output:**\r\n    ```\r\n    [""spihc"", ""nuf""]\r\n    ```\r\n\r\n37. **Project:** Write a function that returns a list of numbers greater than 5. Print the result for [2, 6, 8, 3].\r\n    \r\n    **Solution:**\r\n    ```akandechips\r\n    function greater_than_5(lst):\r\n        result = []\r\n        for x in lst:\r\n            if x > 5:\r\n                result.append(x)\r\n        return result\r\n    print greater_than_5([2, 6, 8, 3])\r\n    ```\r\n    **Output:**\r\n    ```\r\n    [6, 8]\r\n    ```\r\n\r\n38. **Project:** Write a function that returns a list of numbers less than 5. Print the result for [2, 6, 8, 3].\r\n    \r\n    **Solution:**\r\n    ```akandechips\r\n    function less_than_5(lst):\r\n        result = []\r\n        for x in lst:\r\n            if x < 5:\r\n                result.append(x)\r\n        return result\r\n    print less_than_5([2, 6, 8, 3])\r\n    ```\r\n    **Output:**\r\n    ```\r\n    [2, 3]\r\n    ```\r\n\r\n39. **Project:** Write a function that returns a list of numbers between 3 and 7. Print the result for [2, 4, 6, 8].\r\n    \r\n    **Solution:**\r\n    ```akandechips\r\n    function between_3_and_7(lst):\r\n        result = []\r\n        for x in lst:\r\n            if x >= 3 and x <= 7:\r\n                result.append(x)\r\n        return result\r\n    print between_3_and_7([2, 4, 6, 8])\r\n    ```\r\n    **Output:**\r\n    ```\r\n    [4, 6]\r\n    ```\r\n\r\n40. **Project:** Write a function that returns a list of numbers divided by 2. Print the result for [2, 4, 6].\r\n    \r\n    **Solution:**\r\n    ```akandechips\r\n    function half_all(lst):\r\n        result = []\r\n        for x in lst:\r\n            result.append(x / 2)\r\n        return result\r\n    print half_all([2, 4, 6])\r\n    ```\r\n    **Output:**\r\n    ```\r\n    [1, 2, 3]\r\n    ```\r\n\r\n---\r\n\r\n### Scope and Lifetime of Variables\r\n**Explanation:**\r\nScope determines where a variable can be used. Lifetime is how long a variable exists in memory.\r\n\r\n#### Coding Questions & Answers\r\n<!-- 30+ scope/lifetime questions, answers, and outputs go here -->\r\n\r\n#### Projects & Solutions\r\n<!-- 30+ scope/lifetime projects, solutions, and outputs go here -->\r\n\r\n---\r\n\r\n### Data Structures (Expand Lists, Introduce Tuples, Dictionaries, Sets)\r\n**Explanation:**\r\nData structures organize and store data efficiently. Lists, tuples, dictionaries, and sets each have unique uses.\r\n\r\n#### Coding Questions & Answers\r\n<!-- 30+ data structures questions, answers, and outputs go here -->\r\n\r\n#### Projects & Solutions\r\n<!-- 30+ data structures projects, solutions, and outputs go here -->\r\n\r\n---\r\n\r\n### Loops (for, while, break, continue)\r\n**Explanation:**\r\nLoops let you repeat actions. The `for` and `while` loops are essential for automation and data processing.\r\n\r\n#### Coding Questions & Answers\r\n<!-- 30+ loops questions, answers, and outputs go here -->\r\n\r\n#### Projects & Solutions\r\n<!-- 30+ loops projects, solutions, and outputs go here -->\r\n\r\n---\r\n\r\n### Comparison and Logical Operators (Deeper Dive)\r\n**Explanation:**\r\nComparison and logical operators help your program make decisions. This section explores them in detail.\r\n\r\n#### Coding Questions & Answers\r\n<!-- 30+ comparison/logical operator questions, answers, and outputs go here -->\r\n\r\n#### Projects & Solutions\r\n<!-- 30+ comparison/logical operator projects, solutions, and outputs go here -->\r\n\r\n---\r\n\r\n### Simple Algorithms (Sorting, Searching, etc.)\r\n**Explanation:**\r\nAlgorithms are step-by-step instructions for solving problems. Sorting and searching are common examples.\r\n\r\n#### Coding Questions & Answers\r\n<!-- 30+ algorithm questions, answers, and outputs go here -->\r\n\r\n#### Projects & Solutions\r\n<!-- 30+ algorithm projects, solutions, and outputs go here -->\r\n\r\n---\r\n\r\n### Introduction to Modules and Imports\r\n**Explanation:**\r\nModules let you organize code into separate files. Imports allow you to use code from other modules or libraries.\r\n\r\n#### Coding Questions & Answers\r\n<!-- 30+ modules/imports questions, answers, and outputs go here -->\r\n\r\n#### Projects & Solutions\r\n<!-- 30+ modules/imports projects, solutions, and outputs go here -->\r\n\r\n---\r\n\r\n### Simple Hardware Concepts (Logic Gates, Truth Tables, HDL Basics)\r\n**Explanation:**\r\nUnderstanding hardware basics is key for chip design. This section covers logic gates, truth tables, and simple HDL concepts.\r\n\r\n#### Coding Questions & Answers\r\n<!-- 30+ hardware concept questions, answers, and outputs go here -->\r\n\r\n#### Projects & Solutions\r\n<!-- 30+ hardware concept projects, solutions, and outputs go here -->\r\n\r\n---\r\n\r\n### AkandeChips vs. Python: Key Differences and Similarities\r\n**Explanation:**\r\nCompare AkandeChips to Python to understand what’s unique and what’s familiar. This helps you transfer skills between languages.\r\n\r\n#### Coding Questions & Answers\r\n<!-- 30+ comparison questions, answers, and outputs go here -->\r\n\r\n#### Projects & Solutions\r\n<!-- 30+ comparison projects, solutions, and outputs go here -->\r\n\r\n---\r\n\r\n### Real-World Mini-Projects (Blinking LED, Simple Calculator, etc.)\r\n**Explanation:**\r\nApply your skills to real-world problems. These mini-projects are great for practice and portfolios.\r\n\r\n#### Coding Questions & Answers\r\n<!-- 30+ mini-project questions, answers, and outputs go here -->\r\n\r\n#### Projects & Solutions\r\n<!-- 30+ mini-projects, solutions, and outputs go here -->\r\n\r\n---\r\n\r\n### Practice Tests and Review Sections\r\n**Explanation:**\r\nTest your knowledge and review key concepts before moving on.\r\n\r\n#### Coding Questions & Answers\r\n<!-- 30+ practice test questions, answers, and outputs go here -->\r\n\r\n#### Projects & Solutions\r\n<!-- 30+ review projects, solutions, and outputs go here -->\r\n```\r\n```\r\n\r\n\r\n### Coding Questions & Answers\r\n#### Q1\r\n**Question:** Write a program to print ""Welcome to AkandeChips!""\r\n```akandechips\r\nprint(""Welcome to AkandeChips!"")\r\n```\r\n**Expected Output:**\r\n```\r\nWelcome to AkandeChips!\r\n```\r\n\r\n#### Q2\r\n**Question:** Print the number 42.\r\n```akandechips\r\nprint(42)\r\n```\r\n**Expected Output:**\r\n```\r\n42\r\n```\r\n\r\n#### Q3\r\n```akandechips\r\nprint(""Alex"")\r\n```\r\n**Expected Output:**\r\n```\r\nAlex\r\n```\r\n\r\n#### Q4\r\n**Question:** Print the result of 5 + 7.\r\n```akandechips\r\nprint(5 + 7)\r\n```\r\n**Expected Output:**\r\n```\r\n12\r\n```\r\n\r\n#### Q5\r\n**Question:** Print the string ""chips are cool!""\r\n```akandechips\r\nprint(""chips are cool!"")\r\n```\r\n```\r\nchips are cool!\r\n```\r\n\r\n**Question:** Print the result of 10 - 3.\r\n```akandechips\r\nprint(10 - 3)\r\n```\r\n**Expected Output:**\r\n```\r\n7\r\n```\r\n\r\n#### Q7\r\n**Question:** Print the result of 4 * 6.\r\n```akandechips\r\nprint(4 * 6)\r\n```\r\n**Expected Output:**\r\n```\r\n24\r\n```\r\n\r\n#### Q8\r\n**Question:** Print the result of 20 / 5.\r\n```akandechips\r\nprint(20 / 5)\r\n```\r\n**Expected Output:**\r\n```\r\n4.0\r\n```\r\n\r\n#### Q9\r\n**Question:** Print the result of 2 ** 3 (2 to the power of 3).\r\n```akandechips\r\nprint(2 ** 3)\r\n```\r\n**Expected Output:**\r\n```\r\n8\r\n```\r\n\r\n#### Q10\r\n**Question:** Print the result of 15 % 4 (remainder of 15 divided by 4).\r\n```akandechips\r\nprint(15 % 4)\r\n```\r\n**Expected Output:**\r\n```\r\n3\r\n```\r\n\r\n#### Q11\r\n**Question:** Print the result of 100 // 9 (integer division).\r\n```akandechips\r\nprint(100 // 9)\r\n```\r\n**Expected Output:**\r\n```\r\n11\r\n```\r\n\r\n#### Q12\r\n**Question:** Print the string ""Hello"" and the number 5 on the same line.\r\n```akandechips\r\nprint(""Hello"", 5)\r\n```\r\n**Expected Output:**\r\n```\r\nHello 5\r\n```\r\n\r\n#### Q13\r\n**Question:** Print the result of 7 + 8 * 2.\r\n```akandechips\r\nprint(7 + 8 * 2)\r\n```\r\n**Expected Output:**\r\n```\r\n23\r\n```\r\n\r\n#### Q14\r\n**Question:** Print the result of (7 + 8) * 2.\r\n```akandechips\r\nprint((7 + 8) * 2)\r\n```\r\n**Expected Output:**\r\n```\r\n30\r\n```\r\n\r\n#### Q15\r\n**Question:** Print the string ""chips"" three times using multiplication.\r\n```akandechips\r\nprint(""chips"" * 3)\r\n```\r\n**Expected Output:**\r\n```\r\nchipschipschips\r\n```\r\n\r\n#### Q16\r\n**Question:** Print the result of 5 > 2.\r\n```akandechips\r\nprint(5 > 2)\r\n```\r\n**Expected Output:**\r\n```\r\nTrue\r\n```\r\n\r\n#### Q17\r\n**Question:** Print the result of 3 == 4.\r\n```akandechips\r\nprint(3 == 4)\r\n```\r\n**Expected Output:**\r\n```\r\nFalse\r\n```\r\n\r\n#### Q18\r\n**Question:** Print the result of 10 != 5.\r\n```akandechips\r\nprint(10 != 5)\r\n```\r\n**Expected Output:**\r\n```\r\nTrue\r\n```\r\n\r\n#### Q19\r\n**Question:** Print the result of 7 <= 7.\r\n```akandechips\r\nprint(7 <= 7)\r\n```\r\n**Expected Output:**\r\n```\r\nTrue\r\n```\r\n\r\n#### Q20\r\n**Question:** Print the result of 9 >= 10.\r\n```akandechips\r\nprint(9 >= 10)\r\n```\r\n**Expected Output:**\r\n```\r\nFalse\r\n```\r\n\r\n#### Q21\r\n**Question:** Print the result of not False.\r\n```akandechips\r\nprint(not False)\r\n```\r\n**Expected Output:**\r\n```\r\nTrue\r\n```\r\n\r\n#### Q22\r\n**Question:** Print the result of True and False.\r\n```akandechips\r\nprint(True and False)\r\n```\r\n**Expected Output:**\r\n```\r\nFalse\r\n```\r\n\r\n#### Q23\r\n**Question:** Print the result of True or False.\r\n```akandechips\r\nprint(True or False)\r\n```\r\n**Expected Output:**\r\n```\r\nTrue\r\n```\r\n\r\n#### Q24\r\n**Question:** Print the string ""Akande"" and ""Chips"" separated by a space.\r\n```akandechips\r\nprint(""Akande"", ""Chips"")\r\n```\r\n**Expected Output:**\r\n```\r\nAkande Chips\r\n```\r\n\r\n#### Q25\r\n**Question:** Print the result of 2 + 3 * 4 - 5.\r\n```akandechips\r\nprint(2 + 3 * 4 - 5)\r\n```\r\n**Expected Output:**\r\n```\r\n9\r\n```\r\n\r\n#### Q26\r\n**Question:** Print the result of (2 + 3) * (4 - 5).\r\n```akandechips\r\nprint((2 + 3) * (4 - 5))\r\n```\r\n**Expected Output:**\r\n```\r\n-5\r\n```\r\n\r\n#### Q27\r\n**Question:** Print the string ""chips"" plus the string ""rocks"".\r\n```akandechips\r\nprint(""chips"" + ""rocks"")\r\n```\r\n**Expected Output:**\r\n```\r\nchipsrocks\r\n```\r\n\r\n#### Q28\r\n**Question:** Print the result of 100 / 4 + 6.\r\n```akandechips\r\nprint(100 / 4 + 6)\r\n```\r\n**Expected Output:**\r\n```\r\n31.0\r\n```\r\n\r\n#### Q29\r\n**Question:** Print the result of 2 * 2 * 2 * 2.\r\n```akandechips\r\nprint(2 * 2 * 2 * 2)\r\n```\r\n**Expected Output:**\r\n```\r\n16\r\n```\r\n\r\n#### Q30\r\n**Question:** Print the string ""USA"" 5 times, separated by spaces.\r\n```akandechips\r\nprint((""USA "" * 5).strip())\r\n```\r\n**Expected Output:**\r\n```\r\nUSA USA USA USA USA\r\n```\r\n\r\n\r\n### Projects & Solutions\r\n\r\n#### Project 1\r\n**Project:** Write a program to print your favorite quote.\r\n```akandechips\r\nprint(""The future belongs to those who believe in the beauty of their dreams."")\r\n```\r\n**Expected Output:**\r\n```\r\nThe future belongs to those who believe in the beauty of their dreams.\r\n```\r\n\r\n#### Project 2\r\n**Project:** Print the sum, difference, and product of 8 and 3.\r\n```akandechips\r\nprint(8 + 3)\r\nprint(8 - 3)\r\nprint(8 * 3)\r\n```\r\n**Expected Output:**\r\n```\r\n11\r\n5\r\n24\r\n```\r\n\r\n#### Project 3\r\n**Project:** Print ""chips"" on three separate lines.\r\n```akandechips\r\nprint(""chips"")\r\nprint(""chips"")\r\nprint(""chips"")\r\n```\r\n**Expected Output:**\r\n```\r\nchips\r\nchips\r\nchips\r\n```\r\n\r\n#### Project 4\r\n**Project:** Print the result of 5 squared.\r\n```akandechips\r\nprint(5 ** 2)\r\n```\r\n**Expected Output:**\r\n```\r\n25\r\n```\r\n\r\n#### Project 5\r\n**Project:** Print your name and age on the same line.\r\n```akandechips\r\nprint(""Alex"", 21)\r\n```\r\n**Expected Output:**\r\n```\r\nAlex 21\r\n```\r\n\r\n#### Project 6\r\n**Project:** Print the result of 100 divided by 8, rounded to 2 decimal places.\r\n```akandechips\r\nprint(round(100 / 8, 2))\r\n```\r\n**Expected Output:**\r\n```\r\n12.5\r\n```\r\n\r\n#### Project 7\r\n**Project:** Print the result of 7 times 6 minus 4.\r\n```akandechips\r\nprint(7 * 6 - 4)\r\n```\r\n**Expected Output:**\r\n```\r\n38\r\n```\r\n\r\n#### Project 8\r\n**Project:** Print the string ""chips"" and the number 2025 on separate lines.\r\n```akandechips\r\nprint(""chips"")\r\nprint(2025)\r\n```\r\n**Expected Output:**\r\n```\r\nchips\r\n2025\r\n```\r\n\r\n#### Project 9\r\n**Project:** Print the result of 9 + 8 + 7 + 6 + 5.\r\n```akandechips\r\nprint(9 + 8 + 7 + 6 + 5)\r\n```\r\n**Expected Output:**\r\n```\r\n35\r\n```\r\n\r\n#### Project 10\r\n**Project:** Print the string ""AkandeChips"" in all uppercase letters.\r\n```akandechips\r\nprint(""AkandeChips"".upper())\r\n```\r\n**Expected Output:**\r\n```\r\nAKANDECHIPS\r\n```\r\n\r\n#### Project 11\r\n**Project:** Print the string ""chips"" repeated 4 times, each on a new line.\r\n```akandechips\r\nfor i in range(4):\r\n    print(""chips"")\r\n```\r\n**Expected Output:**\r\n```\r\nchips\r\nchips\r\nchips\r\nchips\r\n```\r\n\r\n#### Project 12\r\n**Project:** Print the result of 50 divided by 7, rounded to the nearest integer.\r\n```akandechips\r\nprint(round(50 / 7))\r\n```\r\n**Expected Output:**\r\n```\r\n7\r\n```\r\n\r\n#### Project 13\r\n**Project:** Print the string ""Hello"" and ""World"" on the same line, separated by a comma.\r\n```akandechips\r\nprint(""Hello, World"")\r\n```\r\n**Expected Output:**\r\n```\r\nHello, World\r\n```\r\n\r\n#### Project 14\r\n**Project:** Print the result of 2 to the power of 10.\r\n```akandechips\r\nprint(2 ** 10)\r\n```\r\n**Expected Output:**\r\n```\r\n1024\r\n```\r\n\r\n#### Project 15\r\n**Project:** Print the result of 100 minus 45 plus 12.\r\n```akandechips\r\nprint(100 - 45 + 12)\r\n```\r\n**Expected Output:**\r\n```\r\n67\r\n```\r\n\r\n#### Project 16\r\n**Project:** Print the string ""chips"" in lowercase.\r\n```akandechips\r\nprint(""CHIPS"".lower())\r\n```\r\n**Expected Output:**\r\n```\r\nchips\r\n```\r\n\r\n#### Project 17\r\n**Project:** Print the result of 3 * 3 * 3.\r\n```akandechips\r\nprint(3 * 3 * 3)\r\n```\r\n**Expected Output:**\r\n```\r\n27\r\n```\r\n\r\n#### Project 18\r\n**Project:** Print the string ""Akande"" and ""Chips"" on two separate lines.\r\n```akandechips\r\nprint(""Akande"")\r\nprint(""Chips"")\r\n```\r\n**Expected Output:**\r\n```\r\nAkande\r\nChips\r\n```\r\n\r\n#### Project 19\r\n**Project:** Print the result of 99 + 1.\r\n```akandechips\r\nprint(99 + 1)\r\n```\r\n**Expected Output:**\r\n```\r\n100\r\n```\r\n\r\n#### Project 20\r\n**Project:** Print the string ""chips"" with an exclamation mark.\r\n```akandechips\r\nprint(""chips!"")\r\n```\r\n**Expected Output:**\r\n```\r\nchips!\r\n```\r\n\r\n#### Project 21\r\n**Project:** Print the result of 5 * 5 + 5.\r\n```akandechips\r\nprint(5 * 5 + 5)\r\n```\r\n**Expected Output:**\r\n```\r\n30\r\n```\r\n\r\n#### Project 22\r\n**Project:** Print the string ""AkandeChips"" five times, separated by commas.\r\n```akandechips\r\nprint("", "".join([""AkandeChips""] * 5))\r\n```\r\n**Expected Output:**\r\n```\r\nAkandeChips, AkandeChips, AkandeChips, AkandeChips, AkandeChips\r\n```\r\n\r\n#### Project 23\r\n**Project:** Print the result of 12345 + 54321.\r\n```akandechips\r\nprint(12345 + 54321)\r\n```\r\n**Expected Output:**\r\n```\r\n66666\r\n```\r\n\r\n#### Project 24\r\n**Project:** Print the string ""chips"" with each letter on a new line.\r\n```akandechips\r\nfor letter in ""chips"":\r\n    print(letter)\r\n```\r\n**Expected Output:**\r\n```\r\nh\r\ni\r\np\r\ns\r\n```\r\n#### Project 25\r\n**Project:** Print the result of 2 + 2 * 2 + 2.\r\n```akandechips\r\nprint(2 + 2 * 2 + 2)\r\n```\r\n**Expected Output:**\r\n```\r\n8\r\n```\r\n\r\n#### Project 26\r\n```akandechips\r\nprint(""AkandeChips""[::-1])\r\n```\r\n**Expected Output:**\r\n```\r\nspihCednakA\r\n```\r\n\r\n#### Project 27\r\n**Project:** Print the result of 10 * 10 * 10.\r\n```akandechips\r\n```\r\n**Expected Output:**\r\n```\r\n1000\r\n```\r\n\r\n#### Project 28\r\n**Project:** Print the string ""chips"" with a space between each letter.\r\n```akandechips\r\nprint("" "".join(""chips""))\r\n```\r\n```\r\nc h i p s\r\n```\r\n\r\n#### Project 29\r\n**Project:** Print the result of 7 + 7 + 7 + 7 + 7.\r\n```akandechips\r\nprint(7 + 7 + 7 + 7 + 7)\r\n```\r\n**Expected Output:**\r\n```\r\n```\r\n\r\n#### Project 30\r\n**Project:** Print the string ""chips"" 10 times, each on a new line.\r\n```akandechips\r\nfor i in range(10):\r\n    print(""chips"")\r\n```\r\n**Expected Output:**\r\n```\r\nchips\r\nchips\r\nchips\r\nchips\r\nchips\r\nchips\r\nchips\r\nchips\r\nchips\r\n```\r\n\r\n---\r\n\r\n## Variables and Types\r\nVariables are used to store data in AkandeChips. Each variable has a type, which determines what kind of data it can hold. This section covers the main types, with explanations, examples, questions, and projects for each.\r\n\r\n---\r\n\r\n### Integer Variables\r\n**Explanation:**\r\nIntegers are whole numbers (positive, negative, or zero) without a decimal point.\r\n\r\n**Example:**\r\ncount = 10\r\nyear = 2025\r\ntemperature = -5\r\n```\r\n**Expected Output:**\r\n```\r\nNo output (variables are stored in memory)\r\n```\r\n\r\n\r\n#### Coding Questions & Answers\r\n##### Q1\r\n**Question:** Assign the value 5 to a variable called `num` and print it.\r\n```akandechips\r\nnum = 5\r\nprint(num)\r\n```\r\n**Expected Output:**\r\n```\r\n5\r\n```\r\n\r\n**Question:** Assign -10 to `temperature` and print it.\r\n```akandechips\r\ntemperature = -10\r\nprint(temperature)\r\n```\r\n**Expected Output:**\r\n```\r\n-10\r\n```\r\n\r\n##### Q3\r\n```akandechips\r\nyear = 2025\r\nprint(year)\r\n```\r\n**Expected Output:**\r\n```\r\n2025\r\n```\r\n\r\n##### Q4\r\n**Question:** Assign 0 to `count` and print it.\r\ncount = 0\r\nprint(count)\r\n```\r\n**Expected Output:**\r\n```\r\n0\r\n```\r\n\r\n##### Q5\r\n**Question:** Assign 7 to `a`, 3 to `b`, print their sum.\r\n```akandechips\r\nb = 3\r\nprint(a + b)\r\n```\r\n**Expected Output:**\r\n```\r\n10\r\n```\r\n\r\n##### Q6\r\n**Question:** Assign 15 to `x`, subtract 4, print the result.\r\n```akandechips\r\nprint(x - 4)\r\n```\r\n**Expected Output:**\r\n```\r\n11\r\n```\r\n\r\n##### Q7\r\n**Question:** Assign 6 to `n`, multiply by 5, print the result.\r\n```akandechips\r\nn = 6\r\n```\r\n**Expected Output:**\r\n```\r\n30\r\n```\r\n\r\n##### Q8\r\n**Question:** Assign 20 to `total`, divide by 4, print the result.\r\n```akandechips\r\ntotal = 20\r\nprint(total / 4)\r\n```\r\n**Expected Output:**\r\n```\r\n5.0\r\n```\r\n\r\n##### Q9\r\n**Question:** Assign 9 to `a`, 2 to `b`, print the remainder of a divided by b.\r\n```akandechips\r\na = 9\r\nb = 2\r\nprint(a % b)\r\n```\r\n**Expected Output:**\r\n```\r\n1\r\n```\r\n\r\n##### Q10\r\n**Question:** Assign 3 to `base`, 4 to `exp`, print base to the power of exp.\r\n```akandechips\r\nbase = 3\r\nexp = 4\r\nprint(base ** exp)\r\n```\r\n**Expected Output:**\r\n```\r\n81\r\n```\r\n\r\n##### Q11\r\n**Question:** Assign 100 to `big`, 9 to `small`, print integer division result.\r\n```akandechips\r\nbig = 100\r\nsmall = 9\r\nprint(big // small)\r\n```\r\n**Expected Output:**\r\n```\r\n11\r\n```\r\n\r\n##### Q12\r\n**Question:** Assign 1 to `a`, 2 to `b`, 3 to `c`, print their sum.\r\n```akandechips\r\na = 1\r\nb = 2\r\nc = 3\r\nprint(a + b + c)\r\n```\r\n**Expected Output:**\r\n```\r\n6\r\n```\r\n\r\n##### Q13\r\n**Question:** Assign 50 to `score`, print score minus 25.\r\n```akandechips\r\nscore = 50\r\nprint(score - 25)\r\n```\r\n**Expected Output:**\r\n```\r\n25\r\n```\r\n\r\n##### Q14\r\n**Question:** Assign 8 to `a`, 2 to `b`, print a divided by b.\r\n```akandechips\r\na = 8\r\nb = 2\r\nprint(a / b)\r\n```\r\n**Expected Output:**\r\n```\r\n4.0\r\n```\r\n\r\n##### Q15\r\n**Question:** Assign 7 to `n`, print n squared.\r\n```akandechips\r\nn = 7\r\nprint(n ** 2)\r\n```\r\n**Expected Output:**\r\n```\r\n49\r\n```\r\n\r\n##### Q16\r\n**Question:** Assign 12 to `a`, 5 to `b`, print a plus b times 2.\r\n```akandechips\r\na = 12\r\nb = 5\r\nprint(a + b * 2)\r\n```\r\n**Expected Output:**\r\n```\r\n22\r\n```\r\n\r\n##### Q17\r\n**Question:** Assign 10 to `x`, print x minus 3 times 2.\r\n```akandechips\r\nx = 10\r\nprint(x - 3 * 2)\r\n```\r\n**Expected Output:**\r\n```\r\n4\r\n```\r\n\r\n##### Q18\r\n**Question:** Assign 4 to `a`, 3 to `b`, print a times b plus 1.\r\n```akandechips\r\na = 4\r\nb = 3\r\nprint(a * b + 1)\r\n```\r\n**Expected Output:**\r\n```\r\n13\r\n```\r\n\r\n##### Q19\r\n**Question:** Assign 9 to `n`, print n cubed.\r\n```akandechips\r\nn = 9\r\nprint(n ** 3)\r\n```\r\n**Expected Output:**\r\n```\r\n729\r\n```\r\n\r\n##### Q20\r\n**Question:** Assign 15 to `a`, 4 to `b`, print the remainder of a divided by b.\r\n```akandechips\r\na = 15\r\nb = 4\r\nprint(a % b)\r\n```\r\n**Expected Output:**\r\n```\r\n3\r\n```\r\n\r\n##### Q21\r\n**Question:** Assign 100 to `a`, 25 to `b`, print a divided by b.\r\n```akandechips\r\na = 100\r\nb = 25\r\nprint(a / b)\r\n```\r\n**Expected Output:**\r\n```\r\n4.0\r\n```\r\n\r\n##### Q22\r\n**Question:** Assign 2 to `x`, 3 to `y`, print x to the power of y.\r\n```akandechips\r\nx = 2\r\ny = 3\r\nprint(x ** y)\r\n```\r\n**Expected Output:**\r\n```\r\n8\r\n```\r\n\r\n##### Q23\r\n**Question:** Assign 11 to `a`, 2 to `b`, print integer division result.\r\n```akandechips\r\na = 11\r\nb = 2\r\nprint(a // b)\r\n```\r\n**Expected Output:**\r\n```\r\n5\r\n```\r\n\r\n##### Q24\r\n**Question:** Assign 7 to `n`, print n plus 10.\r\n```akandechips\r\nn = 7\r\nprint(n + 10)\r\n```\r\n**Expected Output:**\r\n```\r\n17\r\n```\r\n\r\n##### Q25\r\n**Question:** Assign 20 to `a`, 5 to `b`, print a minus b times 2.\r\n```akandechips\r\na = 20\r\nb = 5\r\nprint(a - b * 2)\r\n```\r\n**Expected Output:**\r\n```\r\n10\r\n```\r\n\r\n##### Q26\r\n**Question:** Assign 3 to `a`, 4 to `b`, print a times b times 2.\r\n```akandechips\r\na = 3\r\nb = 4\r\nprint(a * b * 2)\r\n```\r\n**Expected Output:**\r\n```\r\n24\r\n```\r\n\r\n##### Q27\r\n**Question:** Assign 8 to `n`, print n minus 2.\r\n```akandechips\r\nn = 8\r\nprint(n - 2)\r\n```\r\n**Expected Output:**\r\n```\r\n6\r\n```\r\n\r\n##### Q28\r\n**Question:** Assign 5 to `a`, 2 to `b`, print a plus b plus a.\r\n```akandechips\r\na = 5\r\nb = 2\r\nprint(a + b + a)\r\n```\r\n**Expected Output:**\r\n```\r\n12\r\n```\r\n\r\n##### Q29\r\n**Question:** Assign 9 to `x`, print x times x.\r\n```akandechips\r\nx = 9\r\nprint(x * x)\r\n```\r\n**Expected Output:**\r\n```\r\n81\r\n```\r\n\r\n##### Q30\r\n**Question:** Assign 100 to `big`, 1 to `small`, print big minus small.\r\n```akandechips\r\nbig = 100\r\nsmall = 1\r\nprint(big - small)\r\n```\r\n**Expected Output:**\r\n```\r\n99\r\n```\r\n\r\n\r\n#### Projects & Solutions\r\n\r\n##### Project 1\r\n**Project:** Write a program to assign your age to a variable and print it.\r\n```akandechips\r\nage = 18\r\nprint(age)\r\n```\r\n**Expected Output:**\r\n```\r\n18\r\n```\r\n\r\n##### Project 2\r\n**Project:** Assign the number of US states to a variable and print it.\r\n```akandechips\r\nstates = 50\r\nprint(states)\r\n```\r\n**Expected Output:**\r\n```\r\n50\r\n```\r\n\r\n##### Project 3\r\n**Project:** Assign the year the first microchip was invented (1958) to a variable and print it.\r\n```akandechips\r\ninvention_year = 1958\r\nprint(invention_year)\r\n```\r\n**Expected Output:**\r\n```\r\n1958\r\n```\r\n\r\n##### Project 4\r\n**Project:** Assign the number of days in a week to a variable and print it.\r\n```akandechips\r\ndays = 7\r\nprint(days)\r\n```\r\n**Expected Output:**\r\n```\r\n7\r\n```\r\n\r\n##### Project 5\r\n**Project:** Assign the number of hours in a day to a variable and print it.\r\n```akandechips\r\nhours = 24\r\nprint(hours)\r\n```\r\n**Expected Output:**\r\n```\r\n24\r\n```\r\n\r\n##### Project 6\r\n**Project:** Assign the number of minutes in an hour to a variable and print it.\r\n```akandechips\r\nminutes = 60\r\nprint(minutes)\r\n```\r\n**Expected Output:**\r\n```\r\n60\r\n```\r\n\r\n##### Project 7\r\n**Project:** Assign the number of seconds in a minute to a variable and print it.\r\n```akandechips\r\nseconds = 60\r\nprint(seconds)\r\n```\r\n**Expected Output:**\r\n```\r\n60\r\n```\r\n\r\n##### Project 8\r\n**Project:** Assign the number of months in a year to a variable and print it.\r\n```akandechips\r\nmonths = 12\r\nprint(months)\r\n```\r\n**Expected Output:**\r\n```\r\n12\r\n```\r\n\r\n##### Project 9\r\n**Project:** Assign the number of days in February (non-leap year) to a variable and print it.\r\n```akandechips\r\nfeb_days = 28\r\nprint(feb_days)\r\n```\r\n**Expected Output:**\r\n```\r\n28\r\n```\r\n\r\n##### Project 10\r\n**Project:** Assign the number of bits in a byte to a variable and print it.\r\n```akandechips\r\nbits = 8\r\nprint(bits)\r\n```\r\n**Expected Output:**\r\n```\r\n8\r\n```\r\n\r\n##### Project 11\r\n**Project:** Assign the number of pins on a standard DIP-14 chip to a variable and print it.\r\n```akandechips\r\npins = 14\r\nprint(pins)\r\n```\r\n**Expected Output:**\r\n```\r\n14\r\n```\r\n\r\n##### Project 12\r\n**Project:** Assign the number of nanoseconds in a microsecond to a variable and print it.\r\n```akandechips\r\nnanoseconds = 1000\r\nprint(nanoseconds)\r\n```\r\n**Expected Output:**\r\n```\r\n1000\r\n```\r\n\r\n##### Project 13\r\n**Project:** Assign the number of transistors in a simple CPU (e.g., 5000) to a variable and print it.\r\n```akandechips\r\ntransistors = 5000\r\nprint(transistors)\r\n```\r\n**Expected Output:**\r\n```\r\n5000\r\n```\r\n\r\n##### Project 14\r\n**Project:** Assign the number of logic gates in a basic AND gate IC (e.g., 4) to a variable and print it.\r\n```akandechips\r\ngates = 4\r\nprint(gates)\r\n```\r\n**Expected Output:**\r\n```\r\n4\r\n```\r\n\r\n##### Project 15\r\n**Project:** Assign the number of cores in a quad-core processor to a variable and print it.\r\n```akandechips\r\ncores = 4\r\nprint(cores)\r\n```\r\n**Expected Output:**\r\n```\r\n4\r\n```\r\n\r\n##### Project 16\r\n**Project:** Assign the number of wheels on a car to a variable and print it.\r\n```akandechips\r\nwheels = 4\r\nprint(wheels)\r\n```\r\n**Expected Output:**\r\n```\r\n4\r\n```\r\n\r\n##### Project 17\r\n**Project:** Assign the number of students in a class (e.g., 30) to a variable and print it.\r\n```akandechips\r\nstudents = 30\r\nprint(students)\r\n```\r\n**Expected Output:**\r\n```\r\n30\r\n```\r\n\r\n##### Project 18\r\n**Project:** Assign the number of computers in a lab (e.g., 20) to a variable and print it.\r\n```akandechips\r\ncomputers = 20\r\nprint(computers)\r\n```\r\n**Expected Output:**\r\n```\r\n20\r\n```\r\n\r\n##### Project 19\r\n**Project:** Assign the number of floors in a building (e.g., 10) to a variable and print it.\r\n```akandechips\r\nfloors = 10\r\nprint(floors)\r\n```\r\n**Expected Output:**\r\n```\r\n10\r\n```\r\n\r\n##### Project 20\r\n**Project:** Assign the number of LEDs on a board (e.g., 8) to a variable and print it.\r\n```akandechips\r\nleds = 8\r\nprint(leds)\r\n```\r\n**Expected Output:**\r\n```\r\n8\r\n```\r\n\r\n##### Project 21\r\n**Project:** Assign the number of resistors in a kit (e.g., 100) to a variable and print it.\r\n```akandechips\r\nresistors = 100\r\nprint(resistors)\r\n```\r\n**Expected Output:**\r\n```\r\n100\r\n```\r\n\r\n##### Project 22\r\n**Project:** Assign the number of capacitors in a kit (e.g., 50) to a variable and print it.\r\n```akandechips\r\ncapacitors = 50\r\nprint(capacitors)\r\n```\r\n**Expected Output:**\r\n```\r\n50\r\n```\r\n\r\n##### Project 23\r\n**Project:** Assign the number of switches on a board (e.g., 6) to a variable and print it.\r\n```akandechips\r\nswitches = 6\r\nprint(switches)\r\n```\r\n**Expected Output:**\r\n```\r\n6\r\n```\r\n\r\n##### Project 24\r\n**Project:** Assign the number of sensors in a robot (e.g., 5) to a variable and print it.\r\n```akandechips\r\nsensors = 5\r\nprint(sensors)\r\n```\r\n**Expected Output:**\r\n```\r\n5\r\n```\r\n\r\n##### Project 25\r\n**Project:** Assign the number of microcontrollers in a project (e.g., 2) to a variable and print it.\r\n```akandechips\r\nmicrocontrollers = 2\r\nprint(microcontrollers)\r\n```\r\n**Expected Output:**\r\n```\r\n2\r\n```\r\n\r\n##### Project 26\r\n**Project:** Assign the number of USB ports on a computer (e.g., 4) to a variable and print it.\r\n```akandechips\r\nusb_ports = 4\r\nprint(usb_ports)\r\n```\r\n**Expected Output:**\r\n```\r\n4\r\n```\r\n\r\n##### Project 27\r\n**Project:** Assign the number of fans in a server (e.g., 3) to a variable and print it.\r\n```akandechips\r\nfans = 3\r\nprint(fans)\r\n```\r\n**Expected Output:**\r\n```\r\n3\r\n```\r\n\r\n##### Project 28\r\n**Project:** Assign the number of batteries in a device (e.g., 2) to a variable and print it.\r\n```akandechips\r\nbatteries = 2\r\nprint(batteries)\r\n```\r\n**Expected Output:**\r\n```\r\n2\r\n```\r\n\r\n##### Project 29\r\n**Project:** Assign the number of speakers in a sound system (e.g., 5) to a variable and print it.\r\n```akandechips\r\nspeakers = 5\r\nprint(speakers)\r\n```\r\n**Expected Output:**\r\n```\r\n5\r\n```\r\n\r\n##### Project 30\r\n**Project:** Assign the number of keys on a standard keyboard (e.g., 104) to a variable and print it.\r\n```akandechips\r\nkeys = 104\r\nprint(keys)\r\n```\r\n**Expected Output:**\r\n```\r\n104\r\n```\r\n\r\n---\r\n\r\n### Float Variables\r\n**Explanation:**\r\nFloats are numbers with a decimal point. They are used for measurements, calculations, and any value that isn’t a whole number.\r\n\r\n**Example:**\r\n```akandechips\r\npi = 3.14159\r\nheight = -2.5\r\nscore = 99.9\r\n```\r\n**Expected Output:**\r\n```\r\nNo output (variables are stored in memory)\r\n```\r\n\r\n#### Coding Questions & Answers\r\n<!-- 30 float variable questions, answers, and outputs go here -->\r\n\r\n#### Projects & Solutions\r\n<!-- 30 float variable projects, solutions, and outputs go here -->\r\n\r\n---\r\n\r\n### String Variables\r\n**Explanation:**\r\nStrings are sequences of characters, used to store text.\r\n\r\n**Example:**\r\n```akandechips\r\nname = ""Akande""\r\nmessage = ""Hello, world!""\r\nchip_type = ""FPGA""\r\n```\r\n**Expected Output:**\r\n```\r\nNo output (variables are stored in memory)\r\n```\r\n\r\n#### Coding Questions & Answers\r\n<!-- 30 string variable questions, answers, and outputs go here -->\r\n\r\n#### Projects & Solutions\r\n<!-- 30 string variable projects, solutions, and outputs go here -->\r\n\r\n---\r\n\r\n### Boolean Variables\r\n**Explanation:**\r\nBooleans represent True or False values. They are used for logic and decision making.\r\n\r\n**Example:**\r\n```akandechips\r\nis_on = True\r\nis_chip_ready = False\r\n```\r\n**Expected Output:**\r\n```\r\nNo output (variables are stored in memory)\r\n```\r\n\r\n#### Coding Questions & Answers\r\n<!-- 30 boolean variable questions, answers, and outputs go here -->\r\n\r\n#### Projects & Solutions\r\n<!-- 30 boolean variable projects, solutions, and outputs go here -->\r\n\r\n---\r\n\r\n### List Variables\r\n**Explanation:**\r\nLists are ordered collections of items. They can store numbers, strings, or other lists.\r\n\r\n**Example:**\r\n```akandechips\r\nchips = [""FPGA"", ""ASIC"", ""CPU""]\r\nnumbers = [1, 2, 3, 4, 5]\r\nmixed = [1, ""chips"", True]\r\n```\r\n**Expected Output:**\r\n```\r\nNo output (variables are stored in memory)\r\n```\r\n\r\n#### Coding Questions & Answers\r\n<!-- 30 list variable questions, answers, and outputs go here -->\r\n\r\n#### Projects & Solutions\r\n<!-- 30 list variable projects, solutions, and outputs go here -->\r\n\r\n---\r\n\r\n## [Room for More Types]\r\n<!-- Add new types (e.g., dictionaries, sets) as the language evolves -->\r\n\r\n---\r\n\r\n## Basic Operations\r\n**Explanation:**\r\nYou can perform arithmetic and other operations on variables. This is essential for calculations and data processing.\r\n\r\n**Example:**\r\n```akandechips\r\nsum = a + b\r\nprint(sum)\r\n```\r\n**Expected Output:**\r\n```\r\n8.14\r\n```\r\n\r\n### Coding Questions & Answers\r\n<!-- Q1-Q30 with code, answer, and output go here -->\r\n\r\n### Projects & Solutions\r\n<!-- P1-P30 with code, solution, and output go here -->\r\n\r\n---\r\n\r\n## Control Flow\r\n**Explanation:**\r\nControl flow lets you make decisions and repeat actions. This is how programs become dynamic and interactive.\r\n\r\n**Example:**\r\n```akandechips\r\nif a > 3:\r\n    print(""a is greater than 3"")\r\nelse:\r\n    print(""a is 3 or less"")\r\n```\r\n**Expected Output:**\r\n```\r\na is greater than 3\r\n```\r\n\r\n### Coding Questions & Answers\r\n<!-- Q1-Q30 with code, answer, and output go here -->\r\n\r\n### Projects & Solutions\r\n<!-- P1-P30 with code, solution, and output go here -->\r\n\r\n---\r\n\r\n## [Room for Future Topics]\r\n<!-- Add new topics and subtopics here as the language and curriculum grow -->\r\n\r\n---\r\n\r\nContinue to the [Getting Started](./getting_started.md) guide for more!\r\n",markdown,tab
2,124,"akandes_docs/beginner_tutorial.md",125602,60,"49. **What is the lifetime of a variable defined in a function default parameter?**",markdown,content
3,157,"akandes_docs/beginner_tutorial.md",125687,16,"    ",markdown,content
4,211,"akandes_docs/beginner_tutorial.md",125693,128,"    **Answer:**",markdown,content
5,268,"akandes_docs/beginner_tutorial.md",125710,0,"    As long as the function is in use.",markdown,content
6,501,"akandes_docs/beginner_tutorial.md",125750,31,"",markdown,content
7,542,"akandes_docs/beginner_tutorial.md",125752,0,"50. **What is the scope of a variable defined in a decorator (if supported)?**",markdown,content
8,574,"akandes_docs/beginner_tutorial.md",125832,8,"    ",markdown,content
9,595,"akandes_docs/beginner_tutorial.md",125838,67,"    **Answer:**",markdown,content
10,684,"akandes_docs/beginner_tutorial.md",125855,14,"    It is local to the decorator function.",markdown,content
11,966,"akandes_docs/beginner_tutorial.md",125899,22,"",markdown,content
12,1010,"akandes_docs/beginner_tutorial.md",125901,3,"51. **What is the lifetime of a variable defined in a decorator?**",markdown,content
13,1052,"akandes_docs/beginner_tutorial.md",125969,9,"    ",markdown,content
14,1075,"akandes_docs/beginner_tutorial.md",125975,22,"    **Answer:**",markdown,content
15,1122,"akandes_docs/beginner_tutorial.md",125992,3,"    As long as the decorator exists.",markdown,content
16,1376,"akandes_docs/beginner_tutorial.md",126030,20,"",markdown,content
17,1427,"akandes_docs/beginner_tutorial.md",126032,3,"52. **What is the scope of a variable defined in a static method?**",markdown,content
18,1479,"akandes_docs/beginner_tutorial.md",126101,13,"    ",markdown,content
19,1515,"akandes_docs/beginner_tutorial.md",126107,3,"    **Answer:**",markdown,content
20,1568,"akandes_docs/beginner_tutorial.md",126124,0,"    It is local to the static method.",markdown,content
21,1755,"akandes_docs/beginner_tutorial.md",126163,8,"",markdown,content
22,1796,"akandes_docs/beginner_tutorial.md",126165,75,"53. **What is the lifetime of a variable defined in a static method?**",markdown,content
23,1839,"akandes_docs/beginner_tutorial.md",126237,14,"    ",markdown,content
24,1864,"akandes_docs/beginner_tutorial.md",126243,5,"    **Answer:**",markdown,content
25,1883,"akandes_docs/beginner_tutorial.md",126260,8,"    From when the method is called until it ends.",markdown,content
26,2113,"akandes_docs/beginner_tutorial.md",126311,3,"",markdown,content
27,2171,"akandes_docs/beginner_tutorial.md",126313,9,"54. **What is the scope of a variable defined in a class method?**",markdown,content
28,2230,"akandes_docs/beginner_tutorial.md",126381,5,"    ",markdown,content
29,2256,"akandes_docs/beginner_tutorial.md",126387,8,"    **Answer:**",markdown,content
30,2385,"akandes_docs/beginner_tutorial.md",126404,3,"    It is local to the class method unless declared as a class variable.",markdown,content
31,2514,"akandes_docs/beginner_tutorial.md",126478,20,"",markdown,content
32,2555,"akandes_docs/beginner_tutorial.md",126480,3,"55. **What is the lifetime of a variable defined in a class method?**",markdown,content
33,2591,"akandes_docs/beginner_tutorial.md",126551,1,"    ",markdown,content
34,2635,"akandes_docs/beginner_tutorial.md",126557,3,"    **Answer:**",markdown,content
35,2764,"akandes_docs/beginner_tutorial.md",126574,0,"    From when the method is called until it ends.",markdown,content
36,3007,"akandes_docs/beginner_tutorial.md",126625,8,"",markdown,content
37,3040,"akandes_docs/beginner_tutorial.md",126627,67,"56. **What is the scope of a variable defined in a lambda?**",markdown,content
38,3076,"akandes_docs/beginner_tutorial.md",126689,14,"    ",markdown,content
39,3096,"akandes_docs/beginner_tutorial.md",126695,22,"    **Answer:**",markdown,content
40,3189,"akandes_docs/beginner_tutorial.md",126712,11,"    It is local to the lambda function.",markdown,content
41,3250,"akandes_docs/beginner_tutorial.md",126753,3,"",markdown,content
42,3291,"akandes_docs/beginner_tutorial.md",126755,9,"57. **What is the lifetime of a variable defined in a lambda?**",markdown,content
43,3387,"akandes_docs/beginner_tutorial.md",126820,22,"    ",markdown,content
44,3443,"akandes_docs/beginner_tutorial.md",126826,11,"    **Answer:**",markdown,content
45,3527,"akandes_docs/beginner_tutorial.md",126843,3,"    As long as the lambda exists.",markdown,content
46,3633,"akandes_docs/beginner_tutorial.md",126878,20,"",markdown,content
47,3685,"akandes_docs/beginner_tutorial.md",126880,3,"58. **Can a variable be both a parameter and a local variable?**",markdown,content
48,3743,"akandes_docs/beginner_tutorial.md",126946,10,"    ",markdown,content
49,3780,"akandes_docs/beginner_tutorial.md",126952,4,"    **Answer:**",markdown,content
50,3883,"akandes_docs/beginner_tutorial.md",126969,3,"    Yes, but the parameter takes precedence inside the function.",markdown,content
51,4157,"akandes_docs/beginner_tutorial.md",127037,8,"59. **What is the scope of a variable defined in a list comprehension?**",markdown,content
52,4203,"akandes_docs/beginner_tutorial.md",127111,65,"    ",markdown,content
53,4236,"akandes_docs/beginner_tutorial.md",127117,14,"    **Answer:**",markdown,content
54,4298,"akandes_docs/beginner_tutorial.md",127134,12,"    It is local to the comprehension.",markdown,content
55,4546,"akandes_docs/beginner_tutorial.md",127173,3,"",markdown,content
56,4583,"akandes_docs/beginner_tutorial.md",127175,9,"60. **What is the lifetime of a variable defined in a list comprehension?**",markdown,content
57,4618,"akandes_docs/beginner_tutorial.md",127252,12,"    ",markdown,content
58,4635,"akandes_docs/beginner_tutorial.md",127258,3,"    **Answer:**",markdown,content
59,4681,"akandes_docs/beginner_tutorial.md",127275,20,"    It exists only during the comprehension's execution.",markdown,content
60,4933,"akandes_docs/beginner_tutorial.md",127333,3,"",markdown,content
61,4972,"akandes_docs/beginner_tutorial.md",127335,2,"61. **What is the scope of a variable defined in a generator expression?**",markdown,content
62,5009,"akandes_docs/beginner_tutorial.md",127411,3,"    ",markdown,content
63,5026,"akandes_docs/beginner_tutorial.md",127417,0,"    **Answer:**",markdown,content
64,5048,"akandes_docs/beginner_tutorial.md",127434,8,"    It is local to the generator expression.",markdown,content
65,5316,"akandes_docs/beginner_tutorial.md",127480,84,"",markdown,content
66,5360,"akandes_docs/beginner_tutorial.md",127482,14,"62. **What is the lifetime of a variable defined in a generator expression?**",markdown,content
67,5395,"akandes_docs/beginner_tutorial.md",127561,17,"    ",markdown,content
68,5416,"akandes_docs/beginner_tutorial.md",127567,3,"    **Answer:**",markdown,content
69,5456,"akandes_docs/beginner_tutorial.md",127584,9,"    It exists only during the generator's execution.",markdown,content
70,5714,"akandes_docs/beginner_tutorial.md",127638,17,"",markdown,content
71,5757,"akandes_docs/beginner_tutorial.md",127640,3,"63. **What is the scope of a variable defined in a try/finally block?**",markdown,content
72,5796,"akandes_docs/beginner_tutorial.md",127713,20,"    ",markdown,content
73,5860,"akandes_docs/beginner_tutorial.md",127719,3,"    **Answer:**",markdown,content
74,5964,"akandes_docs/beginner_tutorial.md",127736,7,"    It is accessible after the block ends.",markdown,content
75,6096,"akandes_docs/beginner_tutorial.md",127780,3,"",markdown,content
76,6134,"akandes_docs/beginner_tutorial.md",127782,0,"64. **What is the lifetime of a variable defined in a try/finally block?**",markdown,content
77,6216,"akandes_docs/beginner_tutorial.md",127858,8,"    ",markdown,content
78,6251,"akandes_docs/beginner_tutorial.md",127864,66,"    **Answer:**",markdown,content
79,6364,"akandes_docs/beginner_tutorial.md",127881,14,"    From when the block starts until it ends.",markdown,content
80,6627,"akandes_docs/beginner_tutorial.md",127928,13,"",markdown,content
81,6674,"akandes_docs/beginner_tutorial.md",127930,3,"65. **What is the scope of a variable defined in a with block?**",markdown,content
82,6715,"akandes_docs/beginner_tutorial.md",127996,9,"    ",markdown,content
83,6849,"akandes_docs/beginner_tutorial.md",128002,13,"    **Answer:**",markdown,content
83,6849,"akandes_docs/beginner_tutorial.md",128002,13,"    **Answer:**",markdown,content
84,6884,"akandes_docs/beginner_tutorial.md",128019,3,"    It is accessible after the block ends.",markdown,content
85,7091,"akandes_docs/beginner_tutorial.md",128063,20,"",markdown,content
86,7130,"akandes_docs/beginner_tutorial.md",128065,3,"66. **What is the lifetime of a variable defined in a with block?**",markdown,content
87,7177,"akandes_docs/beginner_tutorial.md",128134,18,"    ",markdown,content
88,7208,"akandes_docs/beginner_tutorial.md",128140,3,"    **Answer:**",markdown,content
89,7246,"akandes_docs/beginner_tutorial.md",128157,0,"    From when the block starts until it ends.",markdown,content
90,7455,"akandes_docs/beginner_tutorial.md",128204,8,"",markdown,content
91,7488,"akandes_docs/beginner_tutorial.md",128206,86,"67. **What is the scope of a variable defined in a case block (if supported)?**",markdown,content
92,7527,"akandes_docs/beginner_tutorial.md",128287,14,"    ",markdown,content
93,7582,"akandes_docs/beginner_tutorial.md",128293,14,"    **Answer:**",markdown,content
94,7619,"akandes_docs/beginner_tutorial.md",128310,3,"    It is local to the case block.",markdown,content
95,7872,"akandes_docs/beginner_tutorial.md",128346,9,"",markdown,content
96,7918,"akandes_docs/beginner_tutorial.md",128348,14,"68. **What is the lifetime of a variable defined in a case block?**",markdown,content
97,7959,"akandes_docs/beginner_tutorial.md",128417,3,"    ",markdown,content
98,8000,"akandes_docs/beginner_tutorial.md",128423,20,"    **Answer:**",markdown,content
99,8117,"akandes_docs/beginner_tutorial.md",128440,3,"    From when the block starts until it ends.",markdown,content
100,8282,"akandes_docs/beginner_tutorial.md",128487,1,"",markdown,content
101,8317,"akandes_docs/beginner_tutorial.md",128489,3,"69. **What is the scope of a variable defined in a match block (if supported)?**",markdown,content
102,8399,"akandes_docs/beginner_tutorial.md",128571,0,"    ",markdown,content
103,8437,"akandes_docs/beginner_tutorial.md",128577,8,"    **Answer:**",markdown,content
104,8529,"akandes_docs/beginner_tutorial.md",128594,74,"    It is local to the match block.",markdown,content
105,8800,"akandes_docs/beginner_tutorial.md",128631,14,"",markdown,content
106,8837,"akandes_docs/beginner_tutorial.md",128633,13,"70. **What is the lifetime of a variable defined in a match block?**",markdown,content
107,8879,"akandes_docs/beginner_tutorial.md",128703,3,"    ",markdown,content
108,9028,"akandes_docs/beginner_tutorial.md",128709,9,"    **Answer:**",markdown,content
108,9028,"akandes_docs/beginner_tutorial.md",128709,9,"    **Answer:**",markdown,content
109,9053,"akandes_docs/beginner_tutorial.md",128726,13,"    From when the block starts until it ends.",markdown,content
110,9137,"akandes_docs/beginner_tutorial.md",128773,3,"",markdown,content
111,9177,"akandes_docs/beginner_tutorial.md",128775,20,"71. **What is the scope of a variable defined in a for-each loop?**",markdown,content
112,9226,"akandes_docs/beginner_tutorial.md",128844,3,"    ",markdown,content
113,9251,"akandes_docs/beginner_tutorial.md",128850,2,"    **Answer:**",markdown,content
114,9272,"akandes_docs/beginner_tutorial.md",128867,3,"    It is accessible after the loop ends.",markdown,content
115,9560,"akandes_docs/beginner_tutorial.md",128912,8,"72. **What is the lifetime of a variable defined in a for-each loop?**",markdown,content
116,9598,"akandes_docs/beginner_tutorial.md",128984,75,"    ",markdown,content
117,9649,"akandes_docs/beginner_tutorial.md",128990,14,"    **Answer:**",markdown,content
118,9794,"akandes_docs/beginner_tutorial.md",129007,13,"    From when the loop starts until it ends.",markdown,content
119,9883,"akandes_docs/beginner_tutorial.md",129053,3,"",markdown,content
120,9933,"akandes_docs/beginner_tutorial.md",129055,9,"73. **What is the scope of a variable defined in a while loop?**",markdown,content
121,9984,"akandes_docs/beginner_tutorial.md",129121,13,"    ",markdown,content
122,10015,"akandes_docs/beginner_tutorial.md",129127,3,"    **Answer:**",markdown,content
123,10184,"akandes_docs/beginner_tutorial.md",129144,20,"    It is accessible after the loop ends.",markdown,content
124,10333,"akandes_docs/beginner_tutorial.md",129187,3,"",markdown,content
125,10370,"akandes_docs/beginner_tutorial.md",129189,1,"74. **What is the lifetime of a variable defined in a while loop?**",markdown,content
126,10403,"akandes_docs/beginner_tutorial.md",129258,3,"    ",markdown,content
127,10449,"akandes_docs/beginner_tutorial.md",129264,0,"    **Answer:**",markdown,content
128,10562,"akandes_docs/beginner_tutorial.md",129281,9,"    From when the loop starts until it ends.",markdown,content
129,10843,"akandes_docs/beginner_tutorial.md",129327,67,"",markdown,content
130,10881,"akandes_docs/beginner_tutorial.md",129329,14,"75. **What is the scope of a variable defined in a do-while loop (if supported)?**",markdown,content
131,10926,"akandes_docs/beginner_tutorial.md",129413,22,"    ",markdown,content
131,10926,"akandes_docs/beginner_tutorial.md",129413,22,"    ",markdown,content
132,11045,"akandes_docs/beginner_tutorial.md",129419,3,"    **Answer:**",markdown,content
132,11045,"akandes_docs/beginner_tutorial.md",129419,3,"    **Answer:**",markdown,content
133,11065,"akandes_docs/beginner_tutorial.md",129436,9,"    It is accessible after the loop ends.",markdown,content
134,11244,"akandes_docs/beginner_tutorial.md",129479,22,"",markdown,content
135,11281,"akandes_docs/beginner_tutorial.md",129481,3,"76. **What is the lifetime of a variable defined in a do-while loop?**",markdown,content
136,11326,"akandes_docs/beginner_tutorial.md",129553,20,"    ",markdown,content
137,11361,"akandes_docs/beginner_tutorial.md",129559,3,"    **Answer:**",markdown,content
138,11478,"akandes_docs/beginner_tutorial.md",129576,5,"    From when the loop starts until it ends.",markdown,content
139,11609,"akandes_docs/beginner_tutorial.md",129622,3,"",markdown,content
140,11652,"akandes_docs/beginner_tutorial.md",129624,0,"77. **What is the scope of a variable defined in a function default parameter?**",markdown,content
141,11689,"akandes_docs/beginner_tutorial.md",129706,9,"    ",markdown,content
142,11731,"akandes_docs/beginner_tutorial.md",129712,68,"    **Answer:**",markdown,content
143,11879,"akandes_docs/beginner_tutorial.md",129729,14,"    It is local to the function.",markdown,content
144,11998,"akandes_docs/beginner_tutorial.md",129763,20,"",markdown,content
145,12035,"akandes_docs/beginner_tutorial.md",129765,3,"78. **What is the lifetime of a variable defined in a function default parameter?**",markdown,content
146,12073,"akandes_docs/beginner_tutorial.md",129850,9,"    ",markdown,content
147,12114,"akandes_docs/beginner_tutorial.md",129856,20,"    **Answer:**",markdown,content
148,12230,"akandes_docs/beginner_tutorial.md",129873,3,"    As long as the function is in use.",markdown,content
149,12481,"akandes_docs/beginner_tutorial.md",129913,20,"",markdown,content
150,12514,"akandes_docs/beginner_tutorial.md",129915,3,"79. **What is the scope of a variable defined in a decorator (if supported)?**",markdown,content
151,12548,"akandes_docs/beginner_tutorial.md",129995,1,"    ",markdown,content
152,12566,"akandes_docs/beginner_tutorial.md",130001,3,"    **Answer:**",markdown,content
153,12669,"akandes_docs/beginner_tutorial.md",130018,0,"    It is local to the decorator function.",markdown,content
154,12845,"akandes_docs/beginner_tutorial.md",130062,9,"",markdown,content
155,12884,"akandes_docs/beginner_tutorial.md",130064,77,"80. **What is the lifetime of a variable defined in a decorator?**",markdown,content
156,12927,"akandes_docs/beginner_tutorial.md",130132,14,"    ",markdown,content
157,12942,"akandes_docs/beginner_tutorial.md",130138,17,"    **Answer:**",markdown,content
158,12969,"akandes_docs/beginner_tutorial.md",130155,3,"    As long as the decorator exists.",markdown,content
159,13006,"akandes_docs/beginner_tutorial.md",130193,9,"",markdown,content
160,13033,"akandes_docs/beginner_tutorial.md",130195,17,"---",markdown,content
161,13099,"akandes_docs/beginner_tutorial.md",130200,3,"",markdown,content
162,13138,"akandes_docs/beginner_tutorial.md",130202,20,"### Scope and Lifetime of Variables",markdown,content
163,13183,"akandes_docs/beginner_tutorial.md",130239,3,"**Explanation:**",markdown,content
164,13467,"akandes_docs/beginner_tutorial.md",130257,1,"Scope determines where a variable can be used. Lifetime is how long a variable exists in memory.",markdown,content
165,13623,"akandes_docs/beginner_tutorial.md",130355,3,"",markdown,content
166,13716,"akandes_docs/beginner_tutorial.md",130357,0,"#### Coding Questions & Answers",markdown,content
167,13747,"akandes_docs/beginner_tutorial.md",130390,9,"##### Q1",markdown,content
168,13776,"akandes_docs/beginner_tutorial.md",130400,63,"**Question:** What is variable scope?",markdown,content
169,13829,"akandes_docs/beginner_tutorial.md",130439,14,"   ",markdown,content
170,13942,"akandes_docs/beginner_tutorial.md",130444,16,"   **Answer:**",markdown,content
171,13999,"akandes_docs/beginner_tutorial.md",130460,11,"   Scope is the part of the program where a variable can be used.",markdown,content
172,14188,"akandes_docs/beginner_tutorial.md",130527,3,"",markdown,content
173,14244,"akandes_docs/beginner_tutorial.md",130529,9,"2. **What is variable lifetime?**",markdown,content
174,14298,"akandes_docs/beginner_tutorial.md",130564,16,"   ",markdown,content
175,14332,"akandes_docs/beginner_tutorial.md",130569,11,"   **Answer:**",markdown,content
176,14367,"akandes_docs/beginner_tutorial.md",130585,3,"   Lifetime is how long a variable exists in memory while the program runs.",markdown,content
177,14426,"akandes_docs/beginner_tutorial.md",130662,20,"",markdown,content
178,14453,"akandes_docs/beginner_tutorial.md",130664,3,"3. **What is a global variable?**",markdown,content
179,14514,"akandes_docs/beginner_tutorial.md",130699,9,"   ",markdown,content
180,14552,"akandes_docs/beginner_tutorial.md",130704,3,"   **Answer:**",markdown,content
181,14628,"akandes_docs/beginner_tutorial.md",130720,0,"   A variable defined outside any function; it can be used anywhere in the file.",markdown,content
182,14668,"akandes_docs/beginner_tutorial.md",130802,9,"",markdown,content
183,14697,"akandes_docs/beginner_tutorial.md",130804,65,"4. **What is a local variable?**",markdown,content
184,14756,"akandes_docs/beginner_tutorial.md",130838,14,"   ",markdown,content
185,14788,"akandes_docs/beginner_tutorial.md",130843,12,"   **Answer:**",markdown,content
186,14850,"akandes_docs/beginner_tutorial.md",130859,3,"   A variable defined inside a function; it can only be used inside that function.",markdown,content
187,14918,"akandes_docs/beginner_tutorial.md",130943,9,"",markdown,content
188,14953,"akandes_docs/beginner_tutorial.md",130945,12,"5. **Can a local variable be used outside its function?**",markdown,content
189,14988,"akandes_docs/beginner_tutorial.md",131004,3,"   ",markdown,content
190,15044,"akandes_docs/beginner_tutorial.md",131009,20,"   **Answer:**",markdown,content
191,15076,"akandes_docs/beginner_tutorial.md",131025,3,"   No, it only exists inside the function.",markdown,content
192,15107,"akandes_docs/beginner_tutorial.md",131069,4,"",markdown,content
193,15154,"akandes_docs/beginner_tutorial.md",131071,3,"6. **Can a global variable be used inside a function?**",markdown,content
194,15182,"akandes_docs/beginner_tutorial.md",131128,0,"   ",markdown,content
195,15248,"akandes_docs/beginner_tutorial.md",131133,9,"   **Answer:**",markdown,content
196,15309,"akandes_docs/beginner_tutorial.md",131149,78,"   Yes, unless a local variable with the same name is defined.",markdown,content
197,15331,"akandes_docs/beginner_tutorial.md",131213,14,"",markdown,content
198,15378,"akandes_docs/beginner_tutorial.md",131215,21,"7. **What happens if you use a variable before defining it?**",markdown,content
199,15407,"akandes_docs/beginner_tutorial.md",131278,12,"   ",markdown,content
200,15461,"akandes_docs/beginner_tutorial.md",131283,3,"   **Answer:**",markdown,content
201,15493,"akandes_docs/beginner_tutorial.md",131299,9,"   You get an error.",markdown,content
202,15543,"akandes_docs/beginner_tutorial.md",131321,21,"",markdown,content
203,15571,"akandes_docs/beginner_tutorial.md",131323,12,"8. **What happens to a local variable after the function ends?**",markdown,content
203,15571,"akandes_docs/beginner_tutorial.md",131323,12,"8. **What happens to a local variable after the function ends?**",markdown,content
204,15592,"akandes_docs/beginner_tutorial.md",131389,3,"   ",markdown,content
205,15640,"akandes_docs/beginner_tutorial.md",131394,20,"   **Answer:**",markdown,content
206,15675,"akandes_docs/beginner_tutorial.md",131410,3,"   It is destroyed and cannot be used anymore.",markdown,content
207,15731,"akandes_docs/beginner_tutorial.md",131458,1,"",markdown,content
208,15787,"akandes_docs/beginner_tutorial.md",131460,1,"9. **What happens to a global variable after the program ends?**",markdown,content
209,15820,"akandes_docs/beginner_tutorial.md",131526,1,"   ",markdown,content
210,15841,"akandes_docs/beginner_tutorial.md",131531,3,"   **Answer:**",markdown,content
211,15887,"akandes_docs/beginner_tutorial.md",131547,0,"   It is destroyed and memory is freed.",markdown,content
211,15887,"akandes_docs/beginner_tutorial.md",131547,0,"   It is destroyed and memory is freed.",markdown,content
212,15915,"akandes_docs/beginner_tutorial.md",131588,9,"",markdown,content
213,15945,"akandes_docs/beginner_tutorial.md",131590,97,"10. **Can two functions have local variables with the same name?**",markdown,content
214,16008,"akandes_docs/beginner_tutorial.md",131658,14,"    ",markdown,content
215,16141,"akandes_docs/beginner_tutorial.md",131664,5,"    **Answer:**",markdown,content
216,16399,"akandes_docs/beginner_tutorial.md",131681,9,"    Yes, each function's local variables are separate.",markdown,content
217,16430,"akandes_docs/beginner_tutorial.md",131737,21,"",markdown,content
218,16480,"akandes_docs/beginner_tutorial.md",131739,5,"11. **Can a function change a global variable?**",markdown,content
219,16504,"akandes_docs/beginner_tutorial.md",131789,25,"    ",markdown,content
220,16556,"akandes_docs/beginner_tutorial.md",131795,3,"    **Answer:**",markdown,content
221,16580,"akandes_docs/beginner_tutorial.md",131812,9,"    Yes, if you declare it as global inside the function.",markdown,content
222,16617,"akandes_docs/beginner_tutorial.md",131871,5,"",markdown,content
223,16664,"akandes_docs/beginner_tutorial.md",131873,9,"12. **How do you declare a global variable inside a function?**",markdown,content
224,16691,"akandes_docs/beginner_tutorial.md",131938,21,"    ",markdown,content
225,16729,"akandes_docs/beginner_tutorial.md",131944,5,"    **Answer:**",markdown,content
226,16783,"akandes_docs/beginner_tutorial.md",131961,25,"    Use the `global` keyword (if supported).",markdown,content
227,16814,"akandes_docs/beginner_tutorial.md",132007,3,"",markdown,content
227,16814,"akandes_docs/beginner_tutorial.md",132007,3,"",markdown,content
228,16844,"akandes_docs/beginner_tutorial.md",132009,20,"13. **What is variable shadowing?**",markdown,content
228,16844,"akandes_docs/beginner_tutorial.md",132009,20,"13. **What is variable shadowing?**",markdown,content
229,16861,"akandes_docs/beginner_tutorial.md",132046,3,"    ",markdown,content
230,16915,"akandes_docs/beginner_tutorial.md",132052,8,"    **Answer:**",markdown,content
230,16915,"akandes_docs/beginner_tutorial.md",132052,8,"    **Answer:**",markdown,content
231,16942,"akandes_docs/beginner_tutorial.md",132069,3,"    When a local variable has the same name as a global variable, the local one is used inside the function.",markdown,content
232,17029,"akandes_docs/beginner_tutorial.md",132181,9,"14. **What is the scope of a variable defined in a loop?**",markdown,content
233,17049,"akandes_docs/beginner_tutorial.md",132241,66,"    ",markdown,content
234,17097,"akandes_docs/beginner_tutorial.md",132247,14,"    **Answer:**",markdown,content
235,17132,"akandes_docs/beginner_tutorial.md",132264,12,"    Usually, it is accessible in the block where it is defined.",markdown,content
236,17153,"akandes_docs/beginner_tutorial.md",132329,19,"",markdown,content
237,17197,"akandes_docs/beginner_tutorial.md",132331,7,"15. **What is the scope of a variable defined in an if statement?**",markdown,content
238,17222,"akandes_docs/beginner_tutorial.md",132400,3,"    ",markdown,content
239,17270,"akandes_docs/beginner_tutorial.md",132406,9,"    **Answer:**",markdown,content
240,17290,"akandes_docs/beginner_tutorial.md",132423,12,"    Usually, it is accessible in the block where it is defined.",markdown,content
241,17330,"akandes_docs/beginner_tutorial.md",132488,19,"",markdown,content
242,17362,"akandes_docs/beginner_tutorial.md",132490,7,"16. **What is the lifetime of a variable defined in a function?**",markdown,content
243,17392,"akandes_docs/beginner_tutorial.md",132557,3,"    ",markdown,content
244,17440,"akandes_docs/beginner_tutorial.md",132563,20,"    **Answer:**",markdown,content
245,17467,"akandes_docs/beginner_tutorial.md",132580,3,"    From when the function starts until it ends.",markdown,content
246,17487,"akandes_docs/beginner_tutorial.md",132630,6,"",markdown,content
246,17487,"akandes_docs/beginner_tutorial.md",132630,6,"",markdown,content
247,17509,"akandes_docs/beginner_tutorial.md",132632,3,"17. **What is the lifetime of a global variable?**",markdown,content
248,17531,"akandes_docs/beginner_tutorial.md",132684,0,"    ",markdown,content
249,17585,"akandes_docs/beginner_tutorial.md",132690,9,"    **Answer:**",markdown,content
250,17606,"akandes_docs/beginner_tutorial.md",132707,68,"    From when it is defined until the program ends.",markdown,content
251,17652,"akandes_docs/beginner_tutorial.md",132760,14,"",markdown,content
252,17673,"akandes_docs/beginner_tutorial.md",132762,14,"18. **Can you have a variable with the same name in different scopes?**",markdown,content
253,17720,"akandes_docs/beginner_tutorial.md",132835,3,"    ",markdown,content
254,17762,"akandes_docs/beginner_tutorial.md",132841,9,"    **Answer:**",markdown,content
255,17815,"akandes_docs/beginner_tutorial.md",132858,14,"    Yes, but they are different variables.",markdown,content
256,17839,"akandes_docs/beginner_tutorial.md",132902,3,"",markdown,content
257,17881,"akandes_docs/beginner_tutorial.md",132904,20,"19. **What is a block scope?**",markdown,content
258,17903,"akandes_docs/beginner_tutorial.md",132936,3,"    ",markdown,content
259,17946,"akandes_docs/beginner_tutorial.md",132942,13,"    **Answer:**",markdown,content
260,17970,"akandes_docs/beginner_tutorial.md",132959,3,"    The area inside curly braces `{}` or indentation where a variable is defined.",markdown,content
261,18030,"akandes_docs/beginner_tutorial.md",133044,9,"20. **What is a function scope?**",markdown,content
262,18070,"akandes_docs/beginner_tutorial.md",133079,90,"    ",markdown,content
263,18116,"akandes_docs/beginner_tutorial.md",133085,14,"    **Answer:**",markdown,content
264,18149,"akandes_docs/beginner_tutorial.md",133102,18,"    The area inside a function definition.",markdown,content
265,18175,"akandes_docs/beginner_tutorial.md",133146,3,"",markdown,content
266,18215,"akandes_docs/beginner_tutorial.md",133148,9,"21. **What is the difference between local and global scope?**",markdown,content
267,18268,"akandes_docs/beginner_tutorial.md",133212,18,"    ",markdown,content
268,18315,"akandes_docs/beginner_tutorial.md",133218,3,"    **Answer:**",markdown,content
269,18339,"akandes_docs/beginner_tutorial.md",133235,20,"    Local scope is inside a function; global scope is outside all functions.",markdown,content
270,18363,"akandes_docs/beginner_tutorial.md",133313,3,"",markdown,content
271,18381,"akandes_docs/beginner_tutorial.md",133315,15,"22. **Can a variable be both local and global?**",markdown,content
271,18381,"akandes_docs/beginner_tutorial.md",133315,15,"22. **Can a variable be both local and global?**",markdown,content
272,18406,"akandes_docs/beginner_tutorial.md",133365,3,"    ",markdown,content
273,18443,"akandes_docs/beginner_tutorial.md",133371,0,"    **Answer:**",markdown,content
274,18541,"akandes_docs/beginner_tutorial.md",133388,9,"    No, it is either local or global in a given context.",markdown,content
275,18589,"akandes_docs/beginner_tutorial.md",133446,85,"",markdown,content
276,18660,"akandes_docs/beginner_tutorial.md",133448,14,"23. **What happens if you change a global variable inside a function without declaring it global?**",markdown,content
277,18685,"akandes_docs/beginner_tutorial.md",133549,22,"    ",markdown,content
278,18717,"akandes_docs/beginner_tutorial.md",133555,17,"    **Answer:**",markdown,content
279,18735,"akandes_docs/beginner_tutorial.md",133572,3,"    It creates a new local variable with the same name.",markdown,content
280,18757,"akandes_docs/beginner_tutorial.md",133629,9,"",markdown,content
281,18775,"akandes_docs/beginner_tutorial.md",133631,22,"24. **How do you access a global variable inside a function?**",markdown,content
282,18799,"akandes_docs/beginner_tutorial.md",133695,17,"    ",markdown,content
283,18820,"akandes_docs/beginner_tutorial.md",133701,3,"    **Answer:**",markdown,content
284,18841,"akandes_docs/beginner_tutorial.md",133718,20,"    Just use its name, unless a local variable with the same name exists.",markdown,content
285,18863,"akandes_docs/beginner_tutorial.md",133793,3,"",markdown,content
286,18881,"akandes_docs/beginner_tutorial.md",133795,1,"25. **What is the scope of a variable defined in a for loop?**",markdown,content
287,18902,"akandes_docs/beginner_tutorial.md",133859,1,"    ",markdown,content
287,18902,"akandes_docs/beginner_tutorial.md",133859,1,"    ",markdown,content
288,18918,"akandes_docs/beginner_tutorial.md",133865,1,"    **Answer:**",markdown,content
289,18953,"akandes_docs/beginner_tutorial.md",133882,1,"    It is usually accessible after the loop ends (unless block scope is enforced).",markdown,content
290,18977,"akandes_docs/beginner_tutorial.md",133966,1,"",markdown,content
291,19000,"akandes_docs/beginner_tutorial.md",133968,3,"26. **What is the scope of a variable defined in an if block?**",markdown,content
292,19019,"akandes_docs/beginner_tutorial.md",134033,0,"    ",markdown,content
293,19072,"akandes_docs/beginner_tutorial.md",134039,9,"    **Answer:**",markdown,content
293,19072,"akandes_docs/beginner_tutorial.md",134039,9,"    **Answer:**",markdown,content
294,19095,"akandes_docs/beginner_tutorial.md",134056,74,"    It is usually accessible after the block ends (unless block scope is enforced).",markdown,content
295,19120,"akandes_docs/beginner_tutorial.md",134141,14,"",markdown,content
296,19136,"akandes_docs/beginner_tutorial.md",134143,21,"27. **What is the lifetime of a variable defined in a function?**",markdown,content
297,19154,"akandes_docs/beginner_tutorial.md",134210,3,"    ",markdown,content
298,19173,"akandes_docs/beginner_tutorial.md",134216,9,"    **Answer:**",markdown,content
299,19190,"akandes_docs/beginner_tutorial.md",134233,21,"    From when the function is called until it ends.",markdown,content
300,19213,"akandes_docs/beginner_tutorial.md",134286,3,"",markdown,content
301,19233,"akandes_docs/beginner_tutorial.md",134288,20,"28. **What is the lifetime of a global variable?**",markdown,content
302,19253,"akandes_docs/beginner_tutorial.md",134340,3,"    ",markdown,content
303,19270,"akandes_docs/beginner_tutorial.md",134346,5,"    **Answer:**",markdown,content
304,19283,"akandes_docs/beginner_tutorial.md",134363,3,"    As long as the program runs.",markdown,content
305,19326,"akandes_docs/beginner_tutorial.md",134399,9,"29. **Can a variable be both a parameter and a local variable?**",markdown,content
306,19343,"akandes_docs/beginner_tutorial.md",134465,69,"    ",markdown,content
307,19382,"akandes_docs/beginner_tutorial.md",134471,14,"    **Answer:**",markdown,content
308,19421,"akandes_docs/beginner_tutorial.md",134488,16,"    Yes, but the parameter takes precedence inside the function.",markdown,content
309,19444,"akandes_docs/beginner_tutorial.md",134554,3,"",markdown,content
310,19465,"akandes_docs/beginner_tutorial.md",134556,9,"30. **What is the scope of a variable defined in a list comprehension?**",markdown,content
311,19482,"akandes_docs/beginner_tutorial.md",134630,16,"    ",markdown,content
312,19504,"akandes_docs/beginner_tutorial.md",134636,3,"    **Answer:**",markdown,content
313,19522,"akandes_docs/beginner_tutorial.md",134653,20,"    It is local to the comprehension.",markdown,content
314,19539,"akandes_docs/beginner_tutorial.md",134692,3,"",markdown,content
315,19579,"akandes_docs/beginner_tutorial.md",134694,4,"31. **What is the lifetime of a variable defined in a list comprehension?**",markdown,content
316,19605,"akandes_docs/beginner_tutorial.md",134771,3,"    ",markdown,content
317,19628,"akandes_docs/beginner_tutorial.md",134777,0,"    **Answer:**",markdown,content
318,19650,"akandes_docs/beginner_tutorial.md",134794,9,"    It exists only during the comprehension's execution.",markdown,content
319,19667,"akandes_docs/beginner_tutorial.md",134852,66,"",markdown,content
320,19686,"akandes_docs/beginner_tutorial.md",134854,14,"32. **What is the scope of a variable defined in a generator expression?**",markdown,content
321,19701,"akandes_docs/beginner_tutorial.md",134930,13,"    ",markdown,content
322,19723,"akandes_docs/beginner_tutorial.md",134936,3,"    **Answer:**",markdown,content
323,19743,"akandes_docs/beginner_tutorial.md",134953,9,"    It is local to the generator expression.",markdown,content
324,19763,"akandes_docs/beginner_tutorial.md",134999,13,"",markdown,content
325,19782,"akandes_docs/beginner_tutorial.md",135001,3,"33. **What is the lifetime of a variable defined in a generator expression?**",markdown,content
326,19804,"akandes_docs/beginner_tutorial.md",135080,20,"    ",markdown,content
326,19804,"akandes_docs/beginner_tutorial.md",135080,20,"    ",markdown,content
327,19819,"akandes_docs/beginner_tutorial.md",135086,3,"    **Answer:**",markdown,content
328,19835,"akandes_docs/beginner_tutorial.md",135103,4,"    It exists only during the generator's execution.",markdown,content
329,19853,"akandes_docs/beginner_tutorial.md",135157,3,"",markdown,content
330,19866,"akandes_docs/beginner_tutorial.md",135159,0,"34. **What is the scope of a variable defined in a try/finally block?**",markdown,content
331,19887,"akandes_docs/beginner_tutorial.md",135232,9,"    ",markdown,content
332,19908,"akandes_docs/beginner_tutorial.md",135238,67,"    **Answer:**",markdown,content
333,19927,"akandes_docs/beginner_tutorial.md",135255,14,"    It is accessible after the block ends.",markdown,content
334,19941,"akandes_docs/beginner_tutorial.md",135299,14,"",markdown,content
335,19972,"akandes_docs/beginner_tutorial.md",135301,3,"35. **What is the lifetime of a variable defined in a try/finally block?**",markdown,content
335,19972,"akandes_docs/beginner_tutorial.md",135301,3,"35. **What is the lifetime of a variable defined in a try/finally block?**",markdown,content
336,19992,"akandes_docs/beginner_tutorial.md",135377,9,"    ",markdown,content
337,20008,"akandes_docs/beginner_tutorial.md",135383,14,"    **Answer:**",markdown,content
338,20034,"akandes_docs/beginner_tutorial.md",135400,3,"    From when the block starts until it ends.",markdown,content
339,20053,"akandes_docs/beginner_tutorial.md",135447,20,"",markdown,content
340,20071,"akandes_docs/beginner_tutorial.md",135449,3,"36. **What is the scope of a variable defined in a with block?**",markdown,content
341,20089,"akandes_docs/beginner_tutorial.md",135515,5,"    ",markdown,content
342,20113,"akandes_docs/beginner_tutorial.md",135521,3,"    **Answer:**",markdown,content
343,20134,"akandes_docs/beginner_tutorial.md",135538,0,"    It is accessible after the block ends.",markdown,content
344,20165,"akandes_docs/beginner_tutorial.md",135582,9,"",markdown,content
345,20203,"akandes_docs/beginner_tutorial.md",135584,67,"37. **What is the lifetime of a variable defined in a with block?**",markdown,content
346,20232,"akandes_docs/beginner_tutorial.md",135653,14,"    ",markdown,content
347,20257,"akandes_docs/beginner_tutorial.md",135659,14,"    **Answer:**",markdown,content
348,20299,"akandes_docs/beginner_tutorial.md",135676,3,"    From when the block starts until it ends.",markdown,content
349,20539,"akandes_docs/beginner_tutorial.md",135723,9,"",markdown,content
350,20573,"akandes_docs/beginner_tutorial.md",135725,14,"38. **What is the scope of a variable defined in a case block (if supported)?**",markdown,content
351,20614,"akandes_docs/beginner_tutorial.md",135806,3,"    ",markdown,content
352,20666,"akandes_docs/beginner_tutorial.md",135812,20,"    **Answer:**",markdown,content
353,20812,"akandes_docs/beginner_tutorial.md",135829,3,"    It is local to the case block.",markdown,content
354,20980,"akandes_docs/beginner_tutorial.md",135865,4,"",markdown,content
355,21019,"akandes_docs/beginner_tutorial.md",135867,3,"39. **What is the lifetime of a variable defined in a case block?**",markdown,content
356,21052,"akandes_docs/beginner_tutorial.md",135936,0,"    ",markdown,content
357,21179,"akandes_docs/beginner_tutorial.md",135942,9,"    **Answer:**",markdown,content
358,21331,"akandes_docs/beginner_tutorial.md",135959,66,"    From when the block starts until it ends.",markdown,content
359,21625,"akandes_docs/beginner_tutorial.md",136006,14,"",markdown,content
360,21664,"akandes_docs/beginner_tutorial.md",136008,13,"40. **What is the scope of a variable defined in a match block (if supported)?**",markdown,content
361,21772,"akandes_docs/beginner_tutorial.md",136090,3,"    ",markdown,content
361,21772,"akandes_docs/beginner_tutorial.md",136090,3,"    ",markdown,content
362,21786,"akandes_docs/beginner_tutorial.md",136096,9,"    **Answer:**",markdown,content
363,21827,"akandes_docs/beginner_tutorial.md",136113,13,"    It is local to the match block.",markdown,content
364,22106,"akandes_docs/beginner_tutorial.md",136150,3,"",markdown,content
365,22139,"akandes_docs/beginner_tutorial.md",136152,20,"41. **What is the lifetime of a variable defined in a match block?**",markdown,content
366,22185,"akandes_docs/beginner_tutorial.md",136222,3,"    ",markdown,content
367,22207,"akandes_docs/beginner_tutorial.md",136228,5,"    **Answer:**",markdown,content
368,22281,"akandes_docs/beginner_tutorial.md",136245,3,"    From when the block starts until it ends.",markdown,content
369,22619,"akandes_docs/beginner_tutorial.md",136294,9,"42. **What is the scope of a variable defined in a for-each loop?**",markdown,content
370,22660,"akandes_docs/beginner_tutorial.md",136363,73,"    ",markdown,content
371,22802,"akandes_docs/beginner_tutorial.md",136369,14,"    **Answer:**",markdown,content
372,23099,"akandes_docs/beginner_tutorial.md",136386,20,"    It is accessible after the loop ends.",markdown,content
373,23465,"akandes_docs/beginner_tutorial.md",136429,3,"",markdown,content
374,23509,"akandes_docs/beginner_tutorial.md",136431,9,"43. **What is the lifetime of a variable defined in a for-each loop?**",markdown,content
375,23544,"akandes_docs/beginner_tutorial.md",136503,20,"    ",markdown,content
376,23887,"akandes_docs/beginner_tutorial.md",136509,3,"    **Answer:**",markdown,content
377,24267,"akandes_docs/beginner_tutorial.md",136526,20,"    From when the loop starts until it ends.",markdown,content
378,25027,"akandes_docs/beginner_tutorial.md",136572,3,"",markdown,content
379,25061,"akandes_docs/beginner_tutorial.md",136574,1,"44. **What is the scope of a variable defined in a while loop?**",markdown,content
380,25316,"akandes_docs/beginner_tutorial.md",136640,3,"    ",markdown,content
381,25356,"akandes_docs/beginner_tutorial.md",136646,0,"    **Answer:**",markdown,content
382,25790,"akandes_docs/beginner_tutorial.md",136663,9,"    It is accessible after the loop ends.",markdown,content
383,26245,"akandes_docs/beginner_tutorial.md",136706,77,"",markdown,content
384,26315,"akandes_docs/beginner_tutorial.md",136708,14,"45. **What is the lifetime of a variable defined in a while loop?**",markdown,content
385,26568,"akandes_docs/beginner_tutorial.md",136777,24,"    ",markdown,content
386,26613,"akandes_docs/beginner_tutorial.md",136783,3,"    **Answer:**",markdown,content
387,27044,"akandes_docs/beginner_tutorial.md",136800,9,"    From when the loop starts until it ends.",markdown,content
388,28005,"akandes_docs/beginner_tutorial.md",136846,24,"",markdown,content
389,28046,"akandes_docs/beginner_tutorial.md",136848,3,"46. **What is the scope of a variable defined in a do-while loop (if supported)?**",markdown,content
390,28089,"akandes_docs/beginner_tutorial.md",136932,20,"    ",markdown,content
391,28162,"akandes_docs/beginner_tutorial.md",136938,3,"    **Answer:**",markdown,content
392,28630,"akandes_docs/beginner_tutorial.md",136955,2,"    It is accessible after the loop ends.",markdown,content
393,28711,"akandes_docs/beginner_tutorial.md",136998,3,"",markdown,content
394,28750,"akandes_docs/beginner_tutorial.md",137000,0,"47. **What is the lifetime of a variable defined in a do-while loop?**",markdown,content
395,28769,"akandes_docs/beginner_tutorial.md",137072,9,"    ",markdown,content
396,28786,"akandes_docs/beginner_tutorial.md",137078,88,"    **Answer:**",markdown,content
397,28873,"akandes_docs/beginner_tutorial.md",137095,14,"    From when the loop starts until it ends.",markdown,content
398,29153,"akandes_docs/beginner_tutorial.md",137141,24,"",markdown,content
399,29195,"akandes_docs/beginner_tutorial.md",137143,3,"48. **What is the scope of a variable defined in a function default parameter?**",markdown,content
400,29241,"akandes_docs/beginner_tutorial.md",137225,9,"    ",markdown,content
401,29267,"akandes_docs/beginner_tutorial.md",137231,24,"    **Answer:**",markdown,content
402,29291,"akandes_docs/beginner_tutorial.md",137248,3,"    It is local to the function.",markdown,content
403,29521,"akandes_docs/beginner_tutorial.md",137282,20,"",markdown,content
404,29558,"akandes_docs/beginner_tutorial.md",137284,3,"49. **What is the lifetime of a variable defined in a function default parameter?**",markdown,content
405,29593,"akandes_docs/beginner_tutorial.md",137369,10,"    ",markdown,content
406,29615,"akandes_docs/beginner_tutorial.md",137375,3,"    **Answer:**",markdown,content
407,29654,"akandes_docs/beginner_tutorial.md",137392,0,"    As long as the function is in use.",markdown,content
408,29916,"akandes_docs/beginner_tutorial.md",137432,9,"",markdown,content
409,29958,"akandes_docs/beginner_tutorial.md",137434,91,"50. **What is the scope of a variable defined in a decorator (if supported)?**",markdown,content
410,29993,"akandes_docs/beginner_tutorial.md",137514,14,"    ",markdown,content
411,30020,"akandes_docs/beginner_tutorial.md",137520,27,"    **Answer:**",markdown,content
412,30095,"akandes_docs/beginner_tutorial.md",137537,3,"    It is local to the decorator function.",markdown,content
413,30447,"akandes_docs/beginner_tutorial.md",137581,9,"",markdown,content
414,30491,"akandes_docs/beginner_tutorial.md",137583,27,"51. **What is the lifetime of a variable defined in a decorator?**",markdown,content
415,30595,"akandes_docs/beginner_tutorial.md",137651,3,"    ",markdown,content
415,30595,"akandes_docs/beginner_tutorial.md",137651,3,"    ",markdown,content
416,30611,"akandes_docs/beginner_tutorial.md",137657,20,"    **Answer:**",markdown,content
417,30641,"akandes_docs/beginner_tutorial.md",137674,3,"    As long as the decorator exists.",markdown,content
418,30880,"akandes_docs/beginner_tutorial.md",137712,19,"",markdown,content
419,30927,"akandes_docs/beginner_tutorial.md",137714,3,"52. **What is the scope of a variable defined in a static method?**",markdown,content
420,30963,"akandes_docs/beginner_tutorial.md",137783,0,"    ",markdown,content
421,30993,"akandes_docs/beginner_tutorial.md",137789,3,"    **Answer:**",markdown,content
422,31144,"akandes_docs/beginner_tutorial.md",137806,0,"    It is local to the static method.",markdown,content
423,39971,"akandes_docs/beginner_tutorial.md",137845,25,"",markdown,content
424,40007,"akandes_docs/beginner_tutorial.md",137847,0,"53. **What is the lifetime of a variable defined in a static method?**",markdown,content
425,40053,"akandes_docs/beginner_tutorial.md",137919,15,"    ",markdown,content
426,40073,"akandes_docs/beginner_tutorial.md",137925,97,"    **Answer:**",markdown,content
427,40132,"akandes_docs/beginner_tutorial.md",137942,14,"    From when the method is called until it ends.",markdown,content
428,40482,"akandes_docs/beginner_tutorial.md",137993,22,"",markdown,content
429,40520,"akandes_docs/beginner_tutorial.md",137995,21,"54. **What is the scope of a variable defined in a class method?**",markdown,content
430,40625,"akandes_docs/beginner_tutorial.md",138063,3,"    ",markdown,content
430,40625,"akandes_docs/beginner_tutorial.md",138063,3,"    ",markdown,content
431,40636,"akandes_docs/beginner_tutorial.md",138069,9,"    **Answer:**",markdown,content
432,40759,"akandes_docs/beginner_tutorial.md",138086,22,"    It is local to the class method unless declared as a class variable.",markdown,content
433,40862,"akandes_docs/beginner_tutorial.md",138160,21,"",markdown,content
434,41043,"akandes_docs/beginner_tutorial.md",138162,3,"55. **What is the lifetime of a variable defined in a class method?**",markdown,content
435,41199,"akandes_docs/beginner_tutorial.md",138233,20,"    ",markdown,content
435,41199,"akandes_docs/beginner_tutorial.md",138233,20,"    ",markdown,content
435,41199,"akandes_docs/beginner_tutorial.md",138233,20,"    ",markdown,content
436,41291,"akandes_docs/beginner_tutorial.md",138239,3,"    **Answer:**",markdown,content
437,41307,"akandes_docs/beginner_tutorial.md",138256,10,"    From when the method is called until it ends.",markdown,content
438,41331,"akandes_docs/beginner_tutorial.md",138307,11,"",markdown,content
439,41376,"akandes_docs/beginner_tutorial.md",138309,3,"56. **What is the scope of a variable defined in a lambda?**",markdown,content
440,41402,"akandes_docs/beginner_tutorial.md",138371,0,"    ",markdown,content
441,41470,"akandes_docs/beginner_tutorial.md",138377,15,"    **Answer:**",markdown,content
442,41567,"akandes_docs/beginner_tutorial.md",138394,78,"    It is local to the lambda function.",markdown,content
443,41733,"akandes_docs/beginner_tutorial.md",138435,14,"",markdown,content
444,41772,"akandes_docs/beginner_tutorial.md",138437,25,"57. **What is the lifetime of a variable defined in a lambda?**",markdown,content
445,41822,"akandes_docs/beginner_tutorial.md",138502,26,"    ",markdown,content
446,41858,"akandes_docs/beginner_tutorial.md",138508,12,"    **Answer:**",markdown,content
447,41973,"akandes_docs/beginner_tutorial.md",138525,3,"    As long as the lambda exists.",markdown,content
448,42128,"akandes_docs/beginner_tutorial.md",138560,9,"",markdown,content
449,42168,"akandes_docs/beginner_tutorial.md",138562,25,"58. **Can a variable be both a parameter and a local variable?**",markdown,content
450,42206,"akandes_docs/beginner_tutorial.md",138628,26,"    ",markdown,content
451,42292,"akandes_docs/beginner_tutorial.md",138634,12,"    **Answer:**",markdown,content
452,42413,"akandes_docs/beginner_tutorial.md",138651,3,"    Yes, but the parameter takes precedence inside the function.",markdown,content
453,42536,"akandes_docs/beginner_tutorial.md",138717,20,"",markdown,content
454,42577,"akandes_docs/beginner_tutorial.md",138719,3,"59. **What is the scope of a variable defined in a list comprehension?**",markdown,content
455,42622,"akandes_docs/beginner_tutorial.md",138793,8,"    ",markdown,content
456,42663,"akandes_docs/beginner_tutorial.md",138799,9,"    **Answer:**",markdown,content
457,42781,"akandes_docs/beginner_tutorial.md",138816,2,"    It is local to the comprehension.",markdown,content
458,42899,"akandes_docs/beginner_tutorial.md",138855,3,"",markdown,content
459,42941,"akandes_docs/beginner_tutorial.md",138857,0,"60. **What is the lifetime of a variable defined in a list comprehension?**",markdown,content
460,42986,"akandes_docs/beginner_tutorial.md",138934,15,"    ",markdown,content
461,43213,"akandes_docs/beginner_tutorial.md",138940,76,"    **Answer:**",markdown,content
462,43490,"akandes_docs/beginner_tutorial.md",138957,14,"    It exists only during the comprehension's execution.",markdown,content
463,43647,"akandes_docs/beginner_tutorial.md",139015,21,"",markdown,content
464,43706,"akandes_docs/beginner_tutorial.md",139017,12,"61. **What is the scope of a variable defined in a generator expression?**",markdown,content
465,43755,"akandes_docs/beginner_tutorial.md",139093,3,"    ",markdown,content
466,43827,"akandes_docs/beginner_tutorial.md",139099,9,"    **Answer:**",markdown,content
467,43856,"akandes_docs/beginner_tutorial.md",139116,21,"    It is local to the generator expression.",markdown,content
468,43969,"akandes_docs/beginner_tutorial.md",139162,12,"",markdown,content
469,44011,"akandes_docs/beginner_tutorial.md",139164,3,"62. **What is the lifetime of a variable defined in a generator expression?**",markdown,content
470,44112,"akandes_docs/beginner_tutorial.md",139243,20,"    ",markdown,content
471,44154,"akandes_docs/beginner_tutorial.md",139249,3,"    **Answer:**",markdown,content
472,44228,"akandes_docs/beginner_tutorial.md",139266,1,"    It exists only during the generator's execution.",markdown,content
473,44510,"akandes_docs/beginner_tutorial.md",139320,1,"",markdown,content
474,44550,"akandes_docs/beginner_tutorial.md",139322,1,"63. **What is the scope of a variable defined in a try/finally block?**",markdown,content
475,44593,"akandes_docs/beginner_tutorial.md",139395,1,"    ",markdown,content
476,44620,"akandes_docs/beginner_tutorial.md",139401,1,"    **Answer:**",markdown,content
477,44638,"akandes_docs/beginner_tutorial.md",139418,3,"    It is accessible after the block ends.",markdown,content
478,44892,"akandes_docs/beginner_tutorial.md",139464,15,"64. **What is the lifetime of a variable defined in a try/finally block?**",markdown,content
479,44934,"akandes_docs/beginner_tutorial.md",139540,80,"    ",markdown,content
480,45033,"akandes_docs/beginner_tutorial.md",139546,14,"    **Answer:**",markdown,content
481,45195,"akandes_docs/beginner_tutorial.md",139563,22,"    From when the block starts until it ends.",markdown,content
482,45295,"akandes_docs/beginner_tutorial.md",139610,16,"",markdown,content
483,45329,"akandes_docs/beginner_tutorial.md",139612,3,"65. **What is the scope of a variable defined in a with block?**",markdown,content
484,45363,"akandes_docs/beginner_tutorial.md",139678,9,"    ",markdown,content
485,45431,"akandes_docs/beginner_tutorial.md",139684,22,"    **Answer:**",markdown,content
486,45579,"akandes_docs/beginner_tutorial.md",139701,16,"    It is accessible after the block ends.",markdown,content
487,46005,"akandes_docs/beginner_tutorial.md",139745,3,"",markdown,content
488,46035,"akandes_docs/beginner_tutorial.md",139747,20,"66. **What is the lifetime of a variable defined in a with block?**",markdown,content
489,46071,"akandes_docs/beginner_tutorial.md",139816,3,"    ",markdown,content
490,46341,"akandes_docs/beginner_tutorial.md",139822,11,"    **Answer:**",markdown,content
491,46756,"akandes_docs/beginner_tutorial.md",139839,1,"    From when the block starts until it ends.",markdown,content
492,47676,"akandes_docs/beginner_tutorial.md",139886,3,"",markdown,content
493,47721,"akandes_docs/beginner_tutorial.md",139888,0,"67. **What is the scope of a variable defined in a case block (if supported)?**",markdown,content
494,47760,"akandes_docs/beginner_tutorial.md",139969,15,"    ",markdown,content
495,47780,"akandes_docs/beginner_tutorial.md",139975,80,"    **Answer:**",markdown,content
496,47818,"akandes_docs/beginner_tutorial.md",139992,14,"    It is local to the case block.",markdown,content
497,48548,"akandes_docs/beginner_tutorial.md",140028,26,"",markdown,content
498,48580,"akandes_docs/beginner_tutorial.md",140030,13,"68. **What is the lifetime of a variable defined in a case block?**",markdown,content
499,48623,"akandes_docs/beginner_tutorial.md",140099,3,"    ",markdown,content
500,48645,"akandes_docs/beginner_tutorial.md",140105,9,"    **Answer:**",markdown,content
501,48684,"akandes_docs/beginner_tutorial.md",140122,26,"    From when the block starts until it ends.",markdown,content
502,48706,"akandes_docs/beginner_tutorial.md",140169,13,"",markdown,content
503,48732,"akandes_docs/beginner_tutorial.md",140171,3,"69. **What is the scope of a variable defined in a match block (if supported)?**",markdown,content
504,48752,"akandes_docs/beginner_tutorial.md",140253,20,"    ",markdown,content
505,48798,"akandes_docs/beginner_tutorial.md",140259,3,"    **Answer:**",markdown,content
506,48958,"akandes_docs/beginner_tutorial.md",140276,9,"    It is local to the match block.",markdown,content
507,49109,"akandes_docs/beginner_tutorial.md",140313,2,"",markdown,content
508,49147,"akandes_docs/beginner_tutorial.md",140315,3,"70. **What is the lifetime of a variable defined in a match block?**",markdown,content
509,49185,"akandes_docs/beginner_tutorial.md",140385,0,"    ",markdown,content
510,49260,"akandes_docs/beginner_tutorial.md",140391,15,"    **Answer:**",markdown,content
511,49376,"akandes_docs/beginner_tutorial.md",140408,64,"    From when the block starts until it ends.",markdown,content
512,49787,"akandes_docs/beginner_tutorial.md",140455,14,"",markdown,content
513,49837,"akandes_docs/beginner_tutorial.md",140457,21,"71. **What is the scope of a variable defined in a for-each loop?**",markdown,content
514,49884,"akandes_docs/beginner_tutorial.md",140526,14,"    ",markdown,content
515,49908,"akandes_docs/beginner_tutorial.md",140532,3,"    **Answer:**",markdown,content
516,49959,"akandes_docs/beginner_tutorial.md",140549,9,"    It is accessible after the loop ends.",markdown,content
517,50233,"akandes_docs/beginner_tutorial.md",140592,21,"",markdown,content
518,50270,"akandes_docs/beginner_tutorial.md",140594,14,"72. **What is the lifetime of a variable defined in a for-each loop?**",markdown,content
519,50309,"akandes_docs/beginner_tutorial.md",140666,3,"    ",markdown,content
520,50331,"akandes_docs/beginner_tutorial.md",140672,20,"    **Answer:**",markdown,content
521,50364,"akandes_docs/beginner_tutorial.md",140689,3,"    From when the loop starts until it ends.",markdown,content
522,50693,"akandes_docs/beginner_tutorial.md",140735,13,"",markdown,content
523,50726,"akandes_docs/beginner_tutorial.md",140737,5,"73. **What is the scope of a variable defined in a while loop?**",markdown,content
524,50774,"akandes_docs/beginner_tutorial.md",140803,3,"    ",markdown,content
525,50906,"akandes_docs/beginner_tutorial.md",140809,0,"    **Answer:**",markdown,content
526,50951,"akandes_docs/beginner_tutorial.md",140826,15,"    It is accessible after the loop ends.",markdown,content
527,51172,"akandes_docs/beginner_tutorial.md",140869,89,"",markdown,content
528,51215,"akandes_docs/beginner_tutorial.md",140871,14,"74. **What is the lifetime of a variable defined in a while loop?**",markdown,content
529,51251,"akandes_docs/beginner_tutorial.md",140940,26,"    ",markdown,content
530,51296,"akandes_docs/beginner_tutorial.md",140946,14,"    **Answer:**",markdown,content
531,51443,"akandes_docs/beginner_tutorial.md",140963,17,"    From when the loop starts until it ends.",markdown,content
532,51741,"akandes_docs/beginner_tutorial.md",141009,5,"",markdown,content
533,51776,"akandes_docs/beginner_tutorial.md",141011,16,"75. **What is the scope of a variable defined in a do-while loop (if supported)?**",markdown,content
533,51776,"akandes_docs/beginner_tutorial.md",141011,16,"75. **What is the scope of a variable defined in a do-while loop (if supported)?**",markdown,content
533,51776,"akandes_docs/beginner_tutorial.md",141011,16,"75. **What is the scope of a variable defined in a do-while loop (if supported)?**",markdown,content
534,51911,"akandes_docs/beginner_tutorial.md",141095,3,"    ",markdown,content
534,51911,"akandes_docs/beginner_tutorial.md",141095,3,"    ",markdown,content
536,51956,"akandes_docs/beginner_tutorial.md",141118,26,"    It is accessible after the loop ends.",markdown,content
535,51936,"akandes_docs/beginner_tutorial.md",141101,9,"    **Answer:**",markdown,content
537,52241,"akandes_docs/beginner_tutorial.md",141161,14,"",markdown,content
538,52285,"akandes_docs/beginner_tutorial.md",141163,17,"76. **What is the lifetime of a variable defined in a do-while loop?**",markdown,content
539,52331,"akandes_docs/beginner_tutorial.md",141235,5,"    ",markdown,content
540,52363,"akandes_docs/beginner_tutorial.md",141241,16,"    **Answer:**",markdown,content
541,52387,"akandes_docs/beginner_tutorial.md",141258,3,"    From when the loop starts until it ends.",markdown,content
542,52672,"akandes_docs/beginner_tutorial.md",141304,20,"",markdown,content
543,52735,"akandes_docs/beginner_tutorial.md",141306,3,"77. **What is the scope of a variable defined in a function default parameter?**",markdown,content
544,52995,"akandes_docs/beginner_tutorial.md",141388,9,"    ",markdown,content
545,53119,"akandes_docs/beginner_tutorial.md",141394,3,"    **Answer:**",markdown,content
545,53119,"akandes_docs/beginner_tutorial.md",141394,3,"    **Answer:**",markdown,content
546,53136,"akandes_docs/beginner_tutorial.md",141411,3,"    It is local to the function.",markdown,content
547,53185,"akandes_docs/beginner_tutorial.md",141447,15,"78. **What is the lifetime of a variable defined in a function default parameter?**",markdown,content
548,53230,"akandes_docs/beginner_tutorial.md",141532,92,"    ",markdown,content
549,53274,"akandes_docs/beginner_tutorial.md",141538,14,"    **Answer:**",markdown,content
550,53302,"akandes_docs/beginner_tutorial.md",141555,21,"    As long as the function is in use.",markdown,content
551,53384,"akandes_docs/beginner_tutorial.md",141595,9,"",markdown,content
552,53434,"akandes_docs/beginner_tutorial.md",141597,23,"79. **What is the scope of a variable defined in a decorator (if supported)?**",markdown,content
553,53495,"akandes_docs/beginner_tutorial.md",141677,14,"    ",markdown,content
554,53542,"akandes_docs/beginner_tutorial.md",141683,12,"    **Answer:**",markdown,content
555,53628,"akandes_docs/beginner_tutorial.md",141700,3,"    It is local to the decorator function.",markdown,content
556,53771,"akandes_docs/beginner_tutorial.md",141744,9,"",markdown,content
557,53812,"akandes_docs/beginner_tutorial.md",141746,21,"80. **What is the lifetime of a variable defined in a decorator?**",markdown,content
558,53854,"akandes_docs/beginner_tutorial.md",141814,9,"    ",markdown,content
559,53897,"akandes_docs/beginner_tutorial.md",141820,23,"    **Answer:**",markdown,content
560,53996,"akandes_docs/beginner_tutorial.md",141837,14,"    As long as the decorator exists.",markdown,content
561,54034,"akandes_docs/beginner_tutorial.md",141875,12,"",markdown,content
562,54076,"akandes_docs/beginner_tutorial.md",141877,3,"---",markdown,content
563,54145,"akandes_docs/beginner_tutorial.md",141882,20,"",markdown,content
564,54179,"akandes_docs/beginner_tutorial.md",141884,3,"### Scope and Lifetime of Variables",markdown,content
565,54221,"akandes_docs/beginner_tutorial.md",141921,4,"**Explanation:**",markdown,content
566,54462,"akandes_docs/beginner_tutorial.md",141939,2,"Scope determines where a variable can be used. Lifetime is how long a variable exists in memory.",markdown,content
567,54500,"akandes_docs/beginner_tutorial.md",142037,3,"",markdown,content
568,54516,"akandes_docs/beginner_tutorial.md",142039,0,"#### Coding Questions & Answers",markdown,content
569,54576,"akandes_docs/beginner_tutorial.md",142072,15,"##### Q1",markdown,content
570,54610,"akandes_docs/beginner_tutorial.md",142082,90,"**Question:** What is variable scope?",markdown,content
571,54711,"akandes_docs/beginner_tutorial.md",142121,14,"   ",markdown,content
572,54751,"akandes_docs/beginner_tutorial.md",142126,22,"   **Answer:**",markdown,content
573,54825,"akandes_docs/beginner_tutorial.md",142142,21,"   Scope is the part of the program where a variable can be used.",markdown,content
574,54994,"akandes_docs/beginner_tutorial.md",142209,3,"",markdown,content
575,55036,"akandes_docs/beginner_tutorial.md",142211,9,"2. **What is variable lifetime?**",markdown,content
576,55074,"akandes_docs/beginner_tutorial.md",142246,22,"   ",markdown,content
577,55117,"akandes_docs/beginner_tutorial.md",142251,21,"   **Answer:**",markdown,content
578,55145,"akandes_docs/beginner_tutorial.md",142267,3,"   Lifetime is how long a variable exists in memory while the program runs.",markdown,content
579,55169,"akandes_docs/beginner_tutorial.md",142344,20,"",markdown,content
580,55209,"akandes_docs/beginner_tutorial.md",142346,3,"3. **What is a global variable?**",markdown,content
581,55252,"akandes_docs/beginner_tutorial.md",142381,11,"   ",markdown,content
582,55301,"akandes_docs/beginner_tutorial.md",142386,9,"   **Answer:**",markdown,content
583,55326,"akandes_docs/beginner_tutorial.md",142402,3,"   A variable defined outside any function; it can be used anywhere in the file.",markdown,content
584,55408,"akandes_docs/beginner_tutorial.md",142486,16,"4. **What is a local variable?**",markdown,content
585,55447,"akandes_docs/beginner_tutorial.md",142520,83,"   ",markdown,content
586,55468,"akandes_docs/beginner_tutorial.md",142525,14,"   **Answer:**",markdown,content
587,55496,"akandes_docs/beginner_tutorial.md",142541,26,"   A variable defined inside a function; it can only be used inside that function.",markdown,content
588,55540,"akandes_docs/beginner_tutorial.md",142625,8,"",markdown,content
589,55580,"akandes_docs/beginner_tutorial.md",142627,23,"5. **Can a local variable be used outside its function?**",markdown,content
590,55608,"akandes_docs/beginner_tutorial.md",142686,13,"   ",markdown,content
591,55642,"akandes_docs/beginner_tutorial.md",142691,11,"   **Answer:**",markdown,content
592,55695,"akandes_docs/beginner_tutorial.md",142707,3,"   No, it only exists inside the function.",markdown,content
593,55714,"akandes_docs/beginner_tutorial.md",142751,9,"",markdown,content
594,55754,"akandes_docs/beginner_tutorial.md",142753,26,"6. **Can a global variable be used inside a function?**",markdown,content
595,55780,"akandes_docs/beginner_tutorial.md",142810,8,"   ",markdown,content
596,55825,"akandes_docs/beginner_tutorial.md",142815,23,"   **Answer:**",markdown,content
597,55847,"akandes_docs/beginner_tutorial.md",142831,13,"   Yes, unless a local variable with the same name is defined.",markdown,content
598,55889,"akandes_docs/beginner_tutorial.md",142895,11,"",markdown,content
599,55934,"akandes_docs/beginner_tutorial.md",142897,3,"7. **What happens if you use a variable before defining it?**",markdown,content
600,55959,"akandes_docs/beginner_tutorial.md",142960,20,"   ",markdown,content
601,55982,"akandes_docs/beginner_tutorial.md",142965,3,"   **Answer:**",markdown,content
602,56028,"akandes_docs/beginner_tutorial.md",142981,9,"   You get an error.",markdown,content
603,56056,"akandes_docs/beginner_tutorial.md",143003,2,"",markdown,content
604,56095,"akandes_docs/beginner_tutorial.md",143005,3,"8. **What happens to a local variable after the function ends?**",markdown,content
605,56119,"akandes_docs/beginner_tutorial.md",143071,0,"   ",markdown,content
606,56158,"akandes_docs/beginner_tutorial.md",143076,16,"   **Answer:**",markdown,content
607,56179,"akandes_docs/beginner_tutorial.md",143092,86,"   It is destroyed and cannot be used anymore.",markdown,content
608,56200,"akandes_docs/beginner_tutorial.md",143140,14,"",markdown,content
609,56246,"akandes_docs/beginner_tutorial.md",143142,21,"9. **What happens to a global variable after the program ends?**",markdown,content
610,56288,"akandes_docs/beginner_tutorial.md",143208,21,"   ",markdown,content
611,56311,"akandes_docs/beginner_tutorial.md",143213,21,"   **Answer:**",markdown,content
612,56352,"akandes_docs/beginner_tutorial.md",143229,19,"   It is destroyed and memory is freed.",markdown,content
613,56398,"akandes_docs/beginner_tutorial.md",143270,3,"",markdown,content
614,56427,"akandes_docs/beginner_tutorial.md",143272,9,"10. **Can two functions have local variables with the same name?**",markdown,content
615,56447,"akandes_docs/beginner_tutorial.md",143340,21,"    ",markdown,content
616,56485,"akandes_docs/beginner_tutorial.md",143346,21,"    **Answer:**",markdown,content
617,56558,"akandes_docs/beginner_tutorial.md",143363,21,"    Yes, each function's local variables are separate.",markdown,content
618,56867,"akandes_docs/beginner_tutorial.md",143419,19,"",markdown,content
619,57019,"akandes_docs/beginner_tutorial.md",143421,3,"11. **Can a function change a global variable?**",markdown,content
619,57019,"akandes_docs/beginner_tutorial.md",143421,3,"11. **Can a function change a global variable?**",markdown,content
619,57019,"akandes_docs/beginner_tutorial.md",143421,3,"11. **Can a function change a global variable?**",markdown,content
619,57019,"akandes_docs/beginner_tutorial.md",143421,3,"11. **Can a function change a global variable?**",markdown,content
619,57019,"akandes_docs/beginner_tutorial.md",143421,3,"11. **Can a function change a global variable?**",markdown,content
620,57044,"akandes_docs/beginner_tutorial.md",143471,20,"    ",markdown,content
621,57076,"akandes_docs/beginner_tutorial.md",143477,3,"    **Answer:**",markdown,content
622,57089,"akandes_docs/beginner_tutorial.md",143494,4,"    Yes, if you declare it as global inside the function.",markdown,content
623,57105,"akandes_docs/beginner_tutorial.md",143553,4,"",markdown,content
624,57145,"akandes_docs/beginner_tutorial.md",143555,4,"12. **How do you declare a global variable inside a function?**",markdown,content
625,57201,"akandes_docs/beginner_tutorial.md",143620,1,"    ",markdown,content
626,57237,"akandes_docs/beginner_tutorial.md",143626,3,"    **Answer:**",markdown,content
627,57314,"akandes_docs/beginner_tutorial.md",143643,0,"    Use the `global` keyword (if supported).",markdown,content
628,57343,"akandes_docs/beginner_tutorial.md",143689,16,"",markdown,content
629,57383,"akandes_docs/beginner_tutorial.md",143691,77,"13. **What is variable shadowing?**",markdown,content
630,57404,"akandes_docs/beginner_tutorial.md",143728,14,"    ",markdown,content
631,57431,"akandes_docs/beginner_tutorial.md",143734,19,"    **Answer:**",markdown,content
632,57477,"akandes_docs/beginner_tutorial.md",143751,28,"    When a local variable has the same name as a global variable, the local one is used inside the function.",markdown,content
633,57504,"akandes_docs/beginner_tutorial.md",143861,3,"",markdown,content
634,57525,"akandes_docs/beginner_tutorial.md",143863,9,"14. **What is the scope of a variable defined in a loop?**",markdown,content
635,57574,"akandes_docs/beginner_tutorial.md",143923,19,"    ",markdown,content
636,57596,"akandes_docs/beginner_tutorial.md",143929,28,"    **Answer:**",markdown,content
637,57620,"akandes_docs/beginner_tutorial.md",143946,3,"    Usually, it is accessible in the block where it is defined.",markdown,content
638,57639,"akandes_docs/beginner_tutorial.md",144011,20,"",markdown,content
639,57666,"akandes_docs/beginner_tutorial.md",144013,3,"15. **What is the scope of a variable defined in an if statement?**",markdown,content
640,57684,"akandes_docs/beginner_tutorial.md",144082,3,"    ",markdown,content
641,57705,"akandes_docs/beginner_tutorial.md",144088,3,"    **Answer:**",markdown,content
642,57725,"akandes_docs/beginner_tutorial.md",144105,0,"    Usually, it is accessible in the block where it is defined.",markdown,content
643,57741,"akandes_docs/beginner_tutorial.md",144170,16,"",markdown,content
644,57769,"akandes_docs/beginner_tutorial.md",144172,67,"16. **What is the lifetime of a variable defined in a function?**",markdown,content
645,57792,"akandes_docs/beginner_tutorial.md",144239,14,"    ",markdown,content
646,57820,"akandes_docs/beginner_tutorial.md",144245,22,"    **Answer:**",markdown,content
647,57862,"akandes_docs/beginner_tutorial.md",144262,19,"    From when the function starts until it ends.",markdown,content
648,57891,"akandes_docs/beginner_tutorial.md",144312,3,"",markdown,content
649,57915,"akandes_docs/beginner_tutorial.md",144314,9,"17. **What is the lifetime of a global variable?**",markdown,content
650,57934,"akandes_docs/beginner_tutorial.md",144366,22,"    ",markdown,content
651,57975,"akandes_docs/beginner_tutorial.md",144372,19,"    **Answer:**",markdown,content
652,58003,"akandes_docs/beginner_tutorial.md",144389,3,"    From when it is defined until the program ends.",markdown,content
653,58022,"akandes_docs/beginner_tutorial.md",144442,20,"",markdown,content
654,58045,"akandes_docs/beginner_tutorial.md",144444,3,"18. **Can you have a variable with the same name in different scopes?**",markdown,content
655,58067,"akandes_docs/beginner_tutorial.md",144517,20,"    ",markdown,content
656,58087,"akandes_docs/beginner_tutorial.md",144523,14,"    **Answer:**",markdown,content
657,58120,"akandes_docs/beginner_tutorial.md",144540,3,"    Yes, but they are different variables.",markdown,content
658,58152,"akandes_docs/beginner_tutorial.md",144586,16,"19. **What is a block scope?**",markdown,content
659,58172,"akandes_docs/beginner_tutorial.md",144618,66,"    ",markdown,content
660,58208,"akandes_docs/beginner_tutorial.md",144624,14,"    **Answer:**",markdown,content
661,58244,"akandes_docs/beginner_tutorial.md",144641,16,"    The area inside curly braces `{}` or indentation where a variable is defined.",markdown,content
662,58274,"akandes_docs/beginner_tutorial.md",144724,17,"",markdown,content
663,58298,"akandes_docs/beginner_tutorial.md",144726,3,"20. **What is a function scope?**",markdown,content
663,58298,"akandes_docs/beginner_tutorial.md",144726,3,"20. **What is a function scope?**",markdown,content
664,58312,"akandes_docs/beginner_tutorial.md",144761,9,"    ",markdown,content
665,58330,"akandes_docs/beginner_tutorial.md",144767,16,"    **Answer:**",markdown,content
666,58377,"akandes_docs/beginner_tutorial.md",144784,17,"    The area inside a function definition.",markdown,content
667,58395,"akandes_docs/beginner_tutorial.md",144828,3,"",markdown,content
668,58426,"akandes_docs/beginner_tutorial.md",144830,20,"21. **What is the difference between local and global scope?**",markdown,content
669,58450,"akandes_docs/beginner_tutorial.md",144894,3,"    ",markdown,content
670,58467,"akandes_docs/beginner_tutorial.md",144900,9,"    **Answer:**",markdown,content
671,58492,"akandes_docs/beginner_tutorial.md",144917,3,"    Local scope is inside a function; global scope is outside all functions.",markdown,content
672,58530,"akandes_docs/beginner_tutorial.md",144997,16,"22. **Can a variable be both local and global?**",markdown,content
672,58530,"akandes_docs/beginner_tutorial.md",144997,16,"22. **Can a variable be both local and global?**",markdown,content
673,58551,"akandes_docs/beginner_tutorial.md",145047,77,"    ",markdown,content
674,58571,"akandes_docs/beginner_tutorial.md",145053,14,"    **Answer:**",markdown,content
675,58614,"akandes_docs/beginner_tutorial.md",145070,21,"    No, it is either local or global in a given context.",markdown,content
676,58640,"akandes_docs/beginner_tutorial.md",145128,19,"",markdown,content
677,58661,"akandes_docs/beginner_tutorial.md",145130,3,"23. **What happens if you change a global variable inside a function without declaring it global?**",markdown,content
678,58701,"akandes_docs/beginner_tutorial.md",145231,9,"    ",markdown,content
679,58723,"akandes_docs/beginner_tutorial.md",145237,21,"    **Answer:**",markdown,content
680,58747,"akandes_docs/beginner_tutorial.md",145254,19,"    It creates a new local variable with the same name.",markdown,content
681,58764,"akandes_docs/beginner_tutorial.md",145311,3,"",markdown,content
682,58783,"akandes_docs/beginner_tutorial.md",145313,20,"24. **How do you access a global variable inside a function?**",markdown,content
682,58783,"akandes_docs/beginner_tutorial.md",145313,20,"24. **How do you access a global variable inside a function?**",markdown,content
682,58783,"akandes_docs/beginner_tutorial.md",145313,20,"24. **How do you access a global variable inside a function?**",markdown,content
682,58783,"akandes_docs/beginner_tutorial.md",145313,20,"24. **How do you access a global variable inside a function?**",markdown,content
682,58783,"akandes_docs/beginner_tutorial.md",145313,20,"24. **How do you access a global variable inside a function?**",markdown,content
683,58794,"akandes_docs/beginner_tutorial.md",145377,3,"    ",markdown,content
683,58794,"akandes_docs/beginner_tutorial.md",145377,3,"    ",markdown,content
684,58806,"akandes_docs/beginner_tutorial.md",145383,13,"    **Answer:**",markdown,content
685,58819,"akandes_docs/beginner_tutorial.md",145400,4,"    Just use its name, unless a local variable with the same name exists.",markdown,content
685,58819,"akandes_docs/beginner_tutorial.md",145400,4,"    Just use its name, unless a local variable with the same name exists.",markdown,content
686,58827,"akandes_docs/beginner_tutorial.md",145475,3,"",markdown,content
687,58838,"akandes_docs/beginner_tutorial.md",145477,0,"25. **What is the scope of a variable defined in a for loop?**",markdown,content
688,58851,"akandes_docs/beginner_tutorial.md",145541,16,"    ",markdown,content
689,58873,"akandes_docs/beginner_tutorial.md",145547,81,"    **Answer:**",markdown,content
689,58873,"akandes_docs/beginner_tutorial.md",145547,81,"    **Answer:**",markdown,content
689,58873,"akandes_docs/beginner_tutorial.md",145547,81,"    **Answer:**",markdown,content
690,58885,"akandes_docs/beginner_tutorial.md",145564,14,"    It is usually accessible after the loop ends (unless block scope is enforced).",markdown,content
690,58885,"akandes_docs/beginner_tutorial.md",145564,14,"    It is usually accessible after the loop ends (unless block scope is enforced).",markdown,content
691,58900,"akandes_docs/beginner_tutorial.md",145648,9,"",markdown,content
691,58900,"akandes_docs/beginner_tutorial.md",145648,9,"",markdown,content
691,58900,"akandes_docs/beginner_tutorial.md",145648,9,"",markdown,content
692,58912,"akandes_docs/beginner_tutorial.md",145650,22,"26. **What is the scope of a variable defined in an if block?**",markdown,content
692,58912,"akandes_docs/beginner_tutorial.md",145650,22,"26. **What is the scope of a variable defined in an if block?**",markdown,content
692,58912,"akandes_docs/beginner_tutorial.md",145650,22,"26. **What is the scope of a variable defined in an if block?**",markdown,content
692,58912,"akandes_docs/beginner_tutorial.md",145650,22,"26. **What is the scope of a variable defined in an if block?**",markdown,content
693,58924,"akandes_docs/beginner_tutorial.md",145715,18,"    ",markdown,content
694,58932,"akandes_docs/beginner_tutorial.md",145721,18,"    **Answer:**",markdown,content
694,58932,"akandes_docs/beginner_tutorial.md",145721,18,"    **Answer:**",markdown,content
694,58932,"akandes_docs/beginner_tutorial.md",145721,18,"    **Answer:**",markdown,content
694,58932,"akandes_docs/beginner_tutorial.md",145721,18,"    **Answer:**",markdown,content
694,58932,"akandes_docs/beginner_tutorial.md",145721,18,"    **Answer:**",markdown,content
694,58932,"akandes_docs/beginner_tutorial.md",145721,18,"    **Answer:**",markdown,content
695,58945,"akandes_docs/beginner_tutorial.md",145738,12,"    It is usually accessible after the block ends (unless block scope is enforced).",markdown,content
696,58958,"akandes_docs/beginner_tutorial.md",145823,3,"",markdown,content
697,58970,"akandes_docs/beginner_tutorial.md",145825,9,"27. **What is the lifetime of a variable defined in a function?**",markdown,content
697,58970,"akandes_docs/beginner_tutorial.md",145825,9,"27. **What is the lifetime of a variable defined in a function?**",markdown,content
697,58970,"akandes_docs/beginner_tutorial.md",145825,9,"27. **What is the lifetime of a variable defined in a function?**",markdown,content
697,58970,"akandes_docs/beginner_tutorial.md",145825,9,"27. **What is the lifetime of a variable defined in a function?**",markdown,content
697,58970,"akandes_docs/beginner_tutorial.md",145825,9,"27. **What is the lifetime of a variable defined in a function?**",markdown,content
697,58970,"akandes_docs/beginner_tutorial.md",145825,9,"27. **What is the lifetime of a variable defined in a function?**",markdown,content
699,58995,"akandes_docs/beginner_tutorial.md",145898,22,"    **Answer:**",markdown,content
698,58982,"akandes_docs/beginner_tutorial.md",145892,9,"    ",markdown,content
700,59014,"akandes_docs/beginner_tutorial.md",145915,18,"    From when the function is called until it ends.",markdown,content
701,59025,"akandes_docs/beginner_tutorial.md",145968,18,"",markdown,content
701,59025,"akandes_docs/beginner_tutorial.md",145968,18,"",markdown,content
701,59025,"akandes_docs/beginner_tutorial.md",145968,18,"",markdown,content
701,59025,"akandes_docs/beginner_tutorial.md",145968,18,"",markdown,content
701,59025,"akandes_docs/beginner_tutorial.md",145968,18,"",markdown,content
701,59025,"akandes_docs/beginner_tutorial.md",145968,18,"",markdown,content
702,59044,"akandes_docs/beginner_tutorial.md",145970,12,"28. **What is the lifetime of a global variable?**",markdown,content
703,59057,"akandes_docs/beginner_tutorial.md",146022,3,"    ",markdown,content
704,59066,"akandes_docs/beginner_tutorial.md",146028,20,"    **Answer:**",markdown,content
705,59078,"akandes_docs/beginner_tutorial.md",146045,3,"    As long as the program runs.",markdown,content
706,59088,"akandes_docs/beginner_tutorial.md",146079,2,"",markdown,content
707,59096,"akandes_docs/beginner_tutorial.md",146081,3,"29. **Can a variable be both a parameter and a local variable?**",markdown,content
708,59107,"akandes_docs/beginner_tutorial.md",146147,0,"    ",markdown,content
708,59107,"akandes_docs/beginner_tutorial.md",146147,0,"    ",markdown,content
708,59107,"akandes_docs/beginner_tutorial.md",146147,0,"    ",markdown,content
708,59107,"akandes_docs/beginner_tutorial.md",146147,0,"    ",markdown,content
708,59107,"akandes_docs/beginner_tutorial.md",146147,0,"    ",markdown,content
708,59107,"akandes_docs/beginner_tutorial.md",146147,0,"    ",markdown,content
708,59107,"akandes_docs/beginner_tutorial.md",146147,0,"    ",markdown,content
708,59107,"akandes_docs/beginner_tutorial.md",146147,0,"    ",markdown,content
708,59107,"akandes_docs/beginner_tutorial.md",146147,0,"    ",markdown,content
709,59116,"akandes_docs/beginner_tutorial.md",146153,16,"    **Answer:**",markdown,content
710,59126,"akandes_docs/beginner_tutorial.md",146170,66,"    Yes, but the parameter takes precedence inside the function.",markdown,content
711,59144,"akandes_docs/beginner_tutorial.md",146236,14,"",markdown,content
712,59154,"akandes_docs/beginner_tutorial.md",146238,16,"30. **What is the scope of a variable defined in a list comprehension?**",markdown,content
713,59167,"akandes_docs/beginner_tutorial.md",146312,16,"    ",markdown,content
714,59176,"akandes_docs/beginner_tutorial.md",146318,3,"    **Answer:**",markdown,content
715,59188,"akandes_docs/beginner_tutorial.md",146335,9,"    It is local to the comprehension.",markdown,content
716,59198,"akandes_docs/beginner_tutorial.md",146374,16,"",markdown,content
716,59198,"akandes_docs/beginner_tutorial.md",146374,16,"",markdown,content
716,59198,"akandes_docs/beginner_tutorial.md",146374,16,"",markdown,content
717,59210,"akandes_docs/beginner_tutorial.md",146376,16,"31. **What is the lifetime of a variable defined in a list comprehension?**",markdown,content
718,59224,"akandes_docs/beginner_tutorial.md",146453,3,"    ",markdown,content
719,59235,"akandes_docs/beginner_tutorial.md",146459,20,"    **Answer:**",markdown,content
720,59243,"akandes_docs/beginner_tutorial.md",146476,3,"    It exists only during the comprehension's execution.",markdown,content
721,59256,"akandes_docs/beginner_tutorial.md",146534,1,"",markdown,content
722,59278,"akandes_docs/beginner_tutorial.md",146536,3,"32. **What is the scope of a variable defined in a generator expression?**",markdown,content
723,59309,"akandes_docs/beginner_tutorial.md",146612,0,"    ",markdown,content
724,59439,"akandes_docs/beginner_tutorial.md",146618,16,"    **Answer:**",markdown,content
724,59439,"akandes_docs/beginner_tutorial.md",146618,16,"    **Answer:**",markdown,content
724,59439,"akandes_docs/beginner_tutorial.md",146618,16,"    **Answer:**",markdown,content
724,59439,"akandes_docs/beginner_tutorial.md",146618,16,"    **Answer:**",markdown,content
724,59439,"akandes_docs/beginner_tutorial.md",146618,16,"    **Answer:**",markdown,content
725,59462,"akandes_docs/beginner_tutorial.md",146635,79,"    It is local to the generator expression.",markdown,content
727,59497,"akandes_docs/beginner_tutorial.md",146683,14,"33. **What is the lifetime of a variable defined in a generator expression?**",markdown,content
726,59479,"akandes_docs/beginner_tutorial.md",146681,14,"",markdown,content
728,59517,"akandes_docs/beginner_tutorial.md",146762,3,"    ",markdown,content
729,59560,"akandes_docs/beginner_tutorial.md",146768,9,"    **Answer:**",markdown,content
730,59605,"akandes_docs/beginner_tutorial.md",146785,14,"    It exists only during the generator's execution.",markdown,content
731,59660,"akandes_docs/beginner_tutorial.md",146839,3,"",markdown,content
732,59693,"akandes_docs/beginner_tutorial.md",146841,20,"34. **What is the scope of a variable defined in a try/finally block?**",markdown,content
733,59720,"akandes_docs/beginner_tutorial.md",146914,3,"    ",markdown,content
734,59744,"akandes_docs/beginner_tutorial.md",146920,4,"    **Answer:**",markdown,content
735,59776,"akandes_docs/beginner_tutorial.md",146937,3,"    It is accessible after the block ends.",markdown,content
736,59814,"akandes_docs/beginner_tutorial.md",146983,16,"35. **What is the lifetime of a variable defined in a try/finally block?**",markdown,content
737,59831,"akandes_docs/beginner_tutorial.md",147059,99,"    ",markdown,content
738,59856,"akandes_docs/beginner_tutorial.md",147065,14,"    **Answer:**",markdown,content
739,59900,"akandes_docs/beginner_tutorial.md",147082,24,"    From when the block starts until it ends.",markdown,content
740,59927,"akandes_docs/beginner_tutorial.md",147129,3,"",markdown,content
741,59949,"akandes_docs/beginner_tutorial.md",147131,9,"36. **What is the scope of a variable defined in a with block?**",markdown,content
742,59971,"akandes_docs/beginner_tutorial.md",147197,24,"    ",markdown,content
743,60015,"akandes_docs/beginner_tutorial.md",147203,3,"    **Answer:**",markdown,content
744,60045,"akandes_docs/beginner_tutorial.md",147220,20,"    It is accessible after the block ends.",markdown,content
745,60217,"akandes_docs/beginner_tutorial.md",147264,3,"",markdown,content
746,60255,"akandes_docs/beginner_tutorial.md",147266,4,"37. **What is the lifetime of a variable defined in a with block?**",markdown,content
747,60302,"akandes_docs/beginner_tutorial.md",147335,3,"    ",markdown,content
748,60330,"akandes_docs/beginner_tutorial.md",147341,0,"    **Answer:**",markdown,content
749,60352,"akandes_docs/beginner_tutorial.md",147358,16,"    From when the block starts until it ends.",markdown,content
750,60645,"akandes_docs/beginner_tutorial.md",147405,101,"",markdown,content
751,60681,"akandes_docs/beginner_tutorial.md",147407,14,"38. **What is the scope of a variable defined in a case block (if supported)?**",markdown,content
752,60726,"akandes_docs/beginner_tutorial.md",147488,24,"    ",markdown,content
753,60876,"akandes_docs/beginner_tutorial.md",147494,3,"    **Answer:**",markdown,content
754,60925,"akandes_docs/beginner_tutorial.md",147511,9,"    It is local to the case block.",markdown,content
755,61044,"akandes_docs/beginner_tutorial.md",147547,24,"",markdown,content
756,61103,"akandes_docs/beginner_tutorial.md",147549,3,"39. **What is the lifetime of a variable defined in a case block?**",markdown,content
757,61159,"akandes_docs/beginner_tutorial.md",147618,20,"    ",markdown,content
758,61194,"akandes_docs/beginner_tutorial.md",147624,3,"    **Answer:**",markdown,content
759,61297,"akandes_docs/beginner_tutorial.md",147641,9,"    From when the block starts until it ends.",markdown,content
760,61409,"akandes_docs/beginner_tutorial.md",147688,3,"",markdown,content
761,61454,"akandes_docs/beginner_tutorial.md",147690,0,"40. **What is the scope of a variable defined in a match block (if supported)?**",markdown,content
762,61529,"akandes_docs/beginner_tutorial.md",147772,0,"    ",markdown,content
763,61569,"akandes_docs/beginner_tutorial.md",147778,38,"    **Answer:**",markdown,content
764,61658,"akandes_docs/beginner_tutorial.md",147795,16,"    It is local to the match block.",markdown,content
765,61906,"akandes_docs/beginner_tutorial.md",147832,61,"",markdown,content
766,61939,"akandes_docs/beginner_tutorial.md",147834,0,"41. **What is the lifetime of a variable defined in a match block?**",markdown,content
767,61974,"akandes_docs/beginner_tutorial.md",147904,31,"    ",markdown,content
768,61993,"akandes_docs/beginner_tutorial.md",147910,66,"    **Answer:**",markdown,content
769,62029,"akandes_docs/beginner_tutorial.md",147927,0,"    From when the block starts until it ends.",markdown,content
770,62255,"akandes_docs/beginner_tutorial.md",147974,25,"",markdown,content
771,62291,"akandes_docs/beginner_tutorial.md",147976,60,"42. **What is the scope of a variable defined in a for-each loop?**",markdown,content
772,62329,"akandes_docs/beginner_tutorial.md",148045,20,"    ",markdown,content
773,62349,"akandes_docs/beginner_tutorial.md",148051,21,"    **Answer:**",markdown,content
774,62404,"akandes_docs/beginner_tutorial.md",148068,18,"    It is accessible after the loop ends.",markdown,content
775,62642,"akandes_docs/beginner_tutorial.md",148111,14,"",markdown,content
776,62680,"akandes_docs/beginner_tutorial.md",148113,0,"43. **What is the lifetime of a variable defined in a for-each loop?**",markdown,content
777,62714,"akandes_docs/beginner_tutorial.md",148185,22,"    ",markdown,content
778,62770,"akandes_docs/beginner_tutorial.md",148191,22,"    **Answer:**",markdown,content
779,62887,"akandes_docs/beginner_tutorial.md",148208,64,"    From when the loop starts until it ends.",markdown,content
780,63010,"akandes_docs/beginner_tutorial.md",148254,58,"",markdown,content
781,63051,"akandes_docs/beginner_tutorial.md",148256,33,"44. **What is the scope of a variable defined in a while loop?**",markdown,content
782,63087,"akandes_docs/beginner_tutorial.md",148322,0,"    ",markdown,content
783,63145,"akandes_docs/beginner_tutorial.md",148328,3,"    **Answer:**",markdown,content
784,63258,"akandes_docs/beginner_tutorial.md",148345,0,"    It is accessible after the loop ends.",markdown,content
785,63376,"akandes_docs/beginner_tutorial.md",148388,23,"",markdown,content
786,63416,"akandes_docs/beginner_tutorial.md",148390,16,"45. **What is the lifetime of a variable defined in a while loop?**",markdown,content
787,63451,"akandes_docs/beginner_tutorial.md",148459,316,"    ",markdown,content
788,63511,"akandes_docs/beginner_tutorial.md",148465,0,"    **Answer:**",markdown,content
789,63646,"akandes_docs/beginner_tutorial.md",148482,3,"    From when the loop starts until it ends.",markdown,content
790,63929,"akandes_docs/beginner_tutorial.md",148530,21,"46. **What is the scope of a variable defined in a do-while loop (if supported)?**",markdown,content
791,63973,"akandes_docs/beginner_tutorial.md",148614,16,"    ",markdown,content
792,64010,"akandes_docs/beginner_tutorial.md",148620,150,"    **Answer:**",markdown,content
793,64168,"akandes_docs/beginner_tutorial.md",148637,0,"    It is accessible after the loop ends.",markdown,content
794,64311,"akandes_docs/beginner_tutorial.md",148680,12,"",markdown,content
795,64364,"akandes_docs/beginner_tutorial.md",148682,14,"47. **What is the lifetime of a variable defined in a do-while loop?**",markdown,content
796,64412,"akandes_docs/beginner_tutorial.md",148754,28,"    ",markdown,content
797,64446,"akandes_docs/beginner_tutorial.md",148760,3,"    **Answer:**",markdown,content
798,64545,"akandes_docs/beginner_tutorial.md",148777,0,"    From when the loop starts until it ends.",markdown,content
799,64690,"akandes_docs/beginner_tutorial.md",148823,57,"",markdown,content
800,64725,"akandes_docs/beginner_tutorial.md",148825,0,"48. **What is the scope of a variable defined in a function default parameter?**",markdown,content
801,64774,"akandes_docs/beginner_tutorial.md",148907,190,"    ",markdown,content
802,64912,"akandes_docs/beginner_tutorial.md",148913,0,"    **Answer:**",markdown,content
803,65060,"akandes_docs/beginner_tutorial.md",148930,3,"    It is local to the function.",markdown,content
804,65201,"akandes_docs/beginner_tutorial.md",148966,56,"49. **What is the lifetime of a variable defined in a function default parameter?**",markdown,content
805,65237,"akandes_docs/beginner_tutorial.md",149051,16,"    ",markdown,content
806,65295,"akandes_docs/beginner_tutorial.md",149057,153,"    **Answer:**",markdown,content
807,65403,"akandes_docs/beginner_tutorial.md",149074,0,"    As long as the function is in use.",markdown,content
808,65724,"akandes_docs/beginner_tutorial.md",149114,31,"",markdown,content
808,65724,"akandes_docs/beginner_tutorial.md",149114,31,"",markdown,content
808,65724,"akandes_docs/beginner_tutorial.md",149114,31,"",markdown,content
808,65724,"akandes_docs/beginner_tutorial.md",149114,31,"",markdown,content
809,65840,"akandes_docs/beginner_tutorial.md",149116,8,"50. **What is the scope of a variable defined in a decorator (if supported)?**",markdown,content
812,65921,"akandes_docs/beginner_tutorial.md",149219,35,"    It is local to the decorator function.",markdown,content
810,65875,"akandes_docs/beginner_tutorial.md",149196,55,"    ",markdown,content
811,65894,"akandes_docs/beginner_tutorial.md",149202,14,"    **Answer:**",markdown,content
813,66086,"akandes_docs/beginner_tutorial.md",149263,11,"",markdown,content
814,66145,"akandes_docs/beginner_tutorial.md",149265,3,"51. **What is the lifetime of a variable defined in a decorator?**",markdown,content
815,66213,"akandes_docs/beginner_tutorial.md",149333,20,"    ",markdown,content
816,66248,"akandes_docs/beginner_tutorial.md",149339,3,"    **Answer:**",markdown,content
817,66293,"akandes_docs/beginner_tutorial.md",149356,4,"    As long as the decorator exists.",markdown,content
818,66429,"akandes_docs/beginner_tutorial.md",149394,3,"",markdown,content
819,66473,"akandes_docs/beginner_tutorial.md",149396,0,"52. **What is the scope of a variable defined in a static method?**",markdown,content
820,66521,"akandes_docs/beginner_tutorial.md",149465,8,"    ",markdown,content
821,66547,"akandes_docs/beginner_tutorial.md",149471,67,"    **Answer:**",markdown,content
822,66590,"akandes_docs/beginner_tutorial.md",149488,14,"    It is local to the static method.",markdown,content
823,66837,"akandes_docs/beginner_tutorial.md",149527,36,"",markdown,content
824,66871,"akandes_docs/beginner_tutorial.md",149529,14,"53. **What is the lifetime of a variable defined in a static method?**",markdown,content
825,66913,"akandes_docs/beginner_tutorial.md",149601,3,"    ",markdown,content
826,66943,"akandes_docs/beginner_tutorial.md",149607,20,"    **Answer:**",markdown,content
827,66984,"akandes_docs/beginner_tutorial.md",149624,3,"    From when the method is called until it ends.",markdown,content
828,67190,"akandes_docs/beginner_tutorial.md",149675,17,"",markdown,content
829,67238,"akandes_docs/beginner_tutorial.md",149677,2,"54. **What is the scope of a variable defined in a class method?**",markdown,content
830,67289,"akandes_docs/beginner_tutorial.md",149745,3,"    ",markdown,content
831,67322,"akandes_docs/beginner_tutorial.md",149751,0,"    **Answer:**",markdown,content
832,67408,"akandes_docs/beginner_tutorial.md",149768,8,"    It is local to the class method unless declared as a class variable.",markdown,content
833,67526,"akandes_docs/beginner_tutorial.md",149842,77,"",markdown,content
834,67567,"akandes_docs/beginner_tutorial.md",149844,14,"55. **What is the lifetime of a variable defined in a class method?**",markdown,content
835,67611,"akandes_docs/beginner_tutorial.md",149915,33,"    ",markdown,content
836,67660,"akandes_docs/beginner_tutorial.md",149921,33,"    **Answer:**",markdown,content
837,67794,"akandes_docs/beginner_tutorial.md",149938,12,"    From when the method is called until it ends.",markdown,content
838,68058,"akandes_docs/beginner_tutorial.md",149989,3,"",markdown,content
839,68101,"akandes_docs/beginner_tutorial.md",149991,20,"56. **What is the scope of a variable defined in a lambda?**",markdown,content
840,68145,"akandes_docs/beginner_tutorial.md",150053,3,"    ",markdown,content
841,68175,"akandes_docs/beginner_tutorial.md",150059,24,"    **Answer:**",markdown,content
842,68328,"akandes_docs/beginner_tutorial.md",150076,20,"    It is local to the lambda function.",markdown,content
842,68328,"akandes_docs/beginner_tutorial.md",150076,20,"    It is local to the lambda function.",markdown,content
843,68357,"akandes_docs/beginner_tutorial.md",150117,4,"",markdown,content
844,68393,"akandes_docs/beginner_tutorial.md",150119,3,"57. **What is the lifetime of a variable defined in a lambda?**",markdown,content
845,68445,"akandes_docs/beginner_tutorial.md",150184,0,"    ",markdown,content
846,68511,"akandes_docs/beginner_tutorial.md",150190,8,"    **Answer:**",markdown,content
847,68540,"akandes_docs/beginner_tutorial.md",150207,63,"    As long as the lambda exists.",markdown,content
848,68643,"akandes_docs/beginner_tutorial.md",150242,14,"",markdown,content
849,68684,"akandes_docs/beginner_tutorial.md",150244,32,"58. **Can a variable be both a parameter and a local variable?**",markdown,content
850,68726,"akandes_docs/beginner_tutorial.md",150310,33,"    ",markdown,content
851,68776,"akandes_docs/beginner_tutorial.md",150316,12,"    **Answer:**",markdown,content
852,68878,"akandes_docs/beginner_tutorial.md",150333,3,"    Yes, but the parameter takes precedence inside the function.",markdown,content
853,69168,"akandes_docs/beginner_tutorial.md",150399,20,"",markdown,content
854,69209,"akandes_docs/beginner_tutorial.md",150401,3,"59. **What is the scope of a variable defined in a list comprehension?**",markdown,content
855,69250,"akandes_docs/beginner_tutorial.md",150475,15,"    ",markdown,content
856,69287,"akandes_docs/beginner_tutorial.md",150481,16,"    **Answer:**",markdown,content
857,69445,"akandes_docs/beginner_tutorial.md",150498,2,"    It is local to the comprehension.",markdown,content
858,69529,"akandes_docs/beginner_tutorial.md",150537,3,"",markdown,content
859,69574,"akandes_docs/beginner_tutorial.md",150539,0,"60. **What is the lifetime of a variable defined in a list comprehension?**",markdown,content
860,69631,"akandes_docs/beginner_tutorial.md",150616,8,"    ",markdown,content
861,69663,"akandes_docs/beginner_tutorial.md",150622,81,"    **Answer:**",markdown,content
862,69692,"akandes_docs/beginner_tutorial.md",150639,14,"    It exists only during the comprehension's execution.",markdown,content
863,69958,"akandes_docs/beginner_tutorial.md",150697,17,"",markdown,content
864,69993,"akandes_docs/beginner_tutorial.md",150699,43,"61. **What is the scope of a variable defined in a generator expression?**",markdown,content
865,70045,"akandes_docs/beginner_tutorial.md",150775,11,"    ",markdown,content
866,70072,"akandes_docs/beginner_tutorial.md",150781,3,"    **Answer:**",markdown,content
867,70105,"akandes_docs/beginner_tutorial.md",150798,20,"    It is local to the generator expression.",markdown,content
868,70312,"akandes_docs/beginner_tutorial.md",150844,3,"",markdown,content
869,70352,"akandes_docs/beginner_tutorial.md",150846,8,"62. **What is the lifetime of a variable defined in a generator expression?**",markdown,content
870,70400,"akandes_docs/beginner_tutorial.md",150925,33,"    ",markdown,content
871,70421,"akandes_docs/beginner_tutorial.md",150931,6,"    **Answer:**",markdown,content
872,70462,"akandes_docs/beginner_tutorial.md",150948,3,"    It exists only during the generator's execution.",markdown,content
873,70741,"akandes_docs/beginner_tutorial.md",151004,8,"63. **What is the scope of a variable defined in a try/finally block?**",markdown,content
874,70791,"akandes_docs/beginner_tutorial.md",151077,111,"    ",markdown,content
875,70839,"akandes_docs/beginner_tutorial.md",151083,14,"    **Answer:**",markdown,content
876,70946,"akandes_docs/beginner_tutorial.md",151100,36,"    It is accessible after the block ends.",markdown,content
877,71078,"akandes_docs/beginner_tutorial.md",151144,31,"",markdown,content
878,71119,"akandes_docs/beginner_tutorial.md",151146,3,"64. **What is the lifetime of a variable defined in a try/finally block?**",markdown,content
879,71194,"akandes_docs/beginner_tutorial.md",151222,20,"    ",markdown,content
880,71235,"akandes_docs/beginner_tutorial.md",151228,3,"    **Answer:**",markdown,content
881,71313,"akandes_docs/beginner_tutorial.md",151245,24,"    From when the block starts until it ends.",markdown,content
882,71548,"akandes_docs/beginner_tutorial.md",151292,21,"",markdown,content
883,71589,"akandes_docs/beginner_tutorial.md",151294,3,"65. **What is the scope of a variable defined in a with block?**",markdown,content
884,71630,"akandes_docs/beginner_tutorial.md",151360,0,"    ",markdown,content
885,71655,"akandes_docs/beginner_tutorial.md",151366,8,"    **Answer:**",markdown,content
886,72374,"akandes_docs/beginner_tutorial.md",151383,86,"    It is accessible after the block ends.",markdown,content
887,72713,"akandes_docs/beginner_tutorial.md",151427,14,"",markdown,content
887,72713,"akandes_docs/beginner_tutorial.md",151427,14,"",markdown,content
887,72713,"akandes_docs/beginner_tutorial.md",151427,14,"",markdown,content
887,72713,"akandes_docs/beginner_tutorial.md",151427,14,"",markdown,content
888,72839,"akandes_docs/beginner_tutorial.md",151429,25,"66. **What is the lifetime of a variable defined in a with block?**",markdown,content
888,72839,"akandes_docs/beginner_tutorial.md",151429,25,"66. **What is the lifetime of a variable defined in a with block?**",markdown,content
889,72850,"akandes_docs/beginner_tutorial.md",151498,18,"    ",markdown,content
890,72858,"akandes_docs/beginner_tutorial.md",151504,35,"    **Answer:**",markdown,content
891,72874,"akandes_docs/beginner_tutorial.md",151521,3,"    From when the block starts until it ends.",markdown,content
892,72902,"akandes_docs/beginner_tutorial.md",151568,20,"",markdown,content
893,72926,"akandes_docs/beginner_tutorial.md",151570,3,"67. **What is the scope of a variable defined in a case block (if supported)?**",markdown,content
894,72976,"akandes_docs/beginner_tutorial.md",151651,16,"    ",markdown,content
895,73001,"akandes_docs/beginner_tutorial.md",151657,2,"    **Answer:**",markdown,content
896,73028,"akandes_docs/beginner_tutorial.md",151674,21,"    It is local to the case block.",markdown,content
897,73157,"akandes_docs/beginner_tutorial.md",151710,3,"",markdown,content
898,73194,"akandes_docs/beginner_tutorial.md",151712,0,"68. **What is the lifetime of a variable defined in a case block?**",markdown,content
899,73277,"akandes_docs/beginner_tutorial.md",151781,8,"    ",markdown,content
900,73690,"akandes_docs/beginner_tutorial.md",151787,64,"    **Answer:**",markdown,content
900,73690,"akandes_docs/beginner_tutorial.md",151787,64,"    **Answer:**",markdown,content
900,73690,"akandes_docs/beginner_tutorial.md",151787,64,"    **Answer:**",markdown,content
900,73690,"akandes_docs/beginner_tutorial.md",151787,64,"    **Answer:**",markdown,content
902,73734,"akandes_docs/beginner_tutorial.md",151851,30,"",markdown,content
901,73710,"akandes_docs/beginner_tutorial.md",151804,14,"    From when the block starts until it ends.",markdown,content
903,73744,"akandes_docs/beginner_tutorial.md",151853,19,"69. **What is the scope of a variable defined in a match block (if supported)?**",markdown,content
904,73775,"akandes_docs/beginner_tutorial.md",151935,3,"    ",markdown,content
905,73818,"akandes_docs/beginner_tutorial.md",151941,20,"    **Answer:**",markdown,content
906,73876,"akandes_docs/beginner_tutorial.md",151958,3,"    It is local to the match block.",markdown,content
907,73996,"akandes_docs/beginner_tutorial.md",151995,19,"",markdown,content
908,74039,"akandes_docs/beginner_tutorial.md",151997,5,"70. **What is the lifetime of a variable defined in a match block?**",markdown,content
909,74085,"akandes_docs/beginner_tutorial.md",152067,3,"    ",markdown,content
910,74108,"akandes_docs/beginner_tutorial.md",152073,0,"    **Answer:**",markdown,content
911,74134,"akandes_docs/beginner_tutorial.md",152090,8,"    From when the block starts until it ends.",markdown,content
912,74359,"akandes_docs/beginner_tutorial.md",152137,76,"",markdown,content
913,74399,"akandes_docs/beginner_tutorial.md",152139,14,"71. **What is the scope of a variable defined in a for-each loop?**",markdown,content
914,74433,"akandes_docs/beginner_tutorial.md",152208,28,"    ",markdown,content
915,74454,"akandes_docs/beginner_tutorial.md",152214,16,"    **Answer:**",markdown,content
916,74510,"akandes_docs/beginner_tutorial.md",152231,17,"    It is accessible after the loop ends.",markdown,content
917,74760,"akandes_docs/beginner_tutorial.md",152274,5,"",markdown,content
918,74795,"akandes_docs/beginner_tutorial.md",152276,16,"72. **What is the lifetime of a variable defined in a for-each loop?**",markdown,content
919,74829,"akandes_docs/beginner_tutorial.md",152348,3,"    ",markdown,content
920,74873,"akandes_docs/beginner_tutorial.md",152354,20,"    **Answer:**",markdown,content
921,75045,"akandes_docs/beginner_tutorial.md",152371,3,"    From when the loop starts until it ends.",markdown,content
922,75259,"akandes_docs/beginner_tutorial.md",152417,9,"",markdown,content
923,75295,"akandes_docs/beginner_tutorial.md",152419,3,"73. **What is the scope of a variable defined in a while loop?**",markdown,content
924,75333,"akandes_docs/beginner_tutorial.md",152485,3,"    ",markdown,content
925,75356,"akandes_docs/beginner_tutorial.md",152491,0,"    **Answer:**",markdown,content
926,75392,"akandes_docs/beginner_tutorial.md",152508,9,"    It is accessible after the loop ends.",markdown,content
927,75525,"akandes_docs/beginner_tutorial.md",152551,69,"",markdown,content
928,75557,"akandes_docs/beginner_tutorial.md",152553,14,"74. **What is the lifetime of a variable defined in a while loop?**",markdown,content
929,75596,"akandes_docs/beginner_tutorial.md",152622,32,"    ",markdown,content
930,75676,"akandes_docs/beginner_tutorial.md",152628,16,"    **Answer:**",markdown,content
931,75790,"akandes_docs/beginner_tutorial.md",152645,3,"    From when the loop starts until it ends.",markdown,content
932,76046,"akandes_docs/beginner_tutorial.md",152691,20,"",markdown,content
933,76084,"akandes_docs/beginner_tutorial.md",152693,3,"75. **What is the scope of a variable defined in a do-while loop (if supported)?**",markdown,content
934,76119,"akandes_docs/beginner_tutorial.md",152777,27,"    ",markdown,content
935,76225,"akandes_docs/beginner_tutorial.md",152783,2,"    **Answer:**",markdown,content
935,76225,"akandes_docs/beginner_tutorial.md",152783,2,"    **Answer:**",markdown,content
936,76240,"akandes_docs/beginner_tutorial.md",152800,3,"    It is accessible after the loop ends.",markdown,content
937,76508,"akandes_docs/beginner_tutorial.md",152845,9,"76. **What is the lifetime of a variable defined in a do-while loop?**",markdown,content
938,76552,"akandes_docs/beginner_tutorial.md",152917,73,"    ",markdown,content
939,76601,"akandes_docs/beginner_tutorial.md",152923,14,"    **Answer:**",markdown,content
940,76829,"akandes_docs/beginner_tutorial.md",152940,35,"    From when the loop starts until it ends.",markdown,content
941,76876,"akandes_docs/beginner_tutorial.md",152986,25,"",markdown,content
942,76910,"akandes_docs/beginner_tutorial.md",152988,3,"77. **What is the scope of a variable defined in a function default parameter?**",markdown,content
943,76928,"akandes_docs/beginner_tutorial.md",153070,20,"    ",markdown,content
944,76996,"akandes_docs/beginner_tutorial.md",153076,3,"    **Answer:**",markdown,content
945,77125,"akandes_docs/beginner_tutorial.md",153093,20,"    It is local to the function.",markdown,content
946,77396,"akandes_docs/beginner_tutorial.md",153127,12,"",markdown,content
947,77434,"akandes_docs/beginner_tutorial.md",153129,3,"78. **What is the lifetime of a variable defined in a function default parameter?**",markdown,content
948,77476,"akandes_docs/beginner_tutorial.md",153214,0,"    ",markdown,content
949,77594,"akandes_docs/beginner_tutorial.md",153220,9,"    **Answer:**",markdown,content
950,77644,"akandes_docs/beginner_tutorial.md",153237,66,"    As long as the function is in use.",markdown,content
951,77912,"akandes_docs/beginner_tutorial.md",153277,14,"",markdown,content
951,77912,"akandes_docs/beginner_tutorial.md",153277,14,"",markdown,content
952,77935,"akandes_docs/beginner_tutorial.md",153279,26,"79. **What is the scope of a variable defined in a decorator (if supported)?**",markdown,content
953,77976,"akandes_docs/beginner_tutorial.md",153359,12,"    ",markdown,content
954,78004,"akandes_docs/beginner_tutorial.md",153365,3,"    **Answer:**",markdown,content
955,78024,"akandes_docs/beginner_tutorial.md",153382,20,"    It is local to the decorator function.",markdown,content
956,78296,"akandes_docs/beginner_tutorial.md",153426,3,"",markdown,content
957,78362,"akandes_docs/beginner_tutorial.md",153428,9,"80. **What is the lifetime of a variable defined in a decorator?**",markdown,content
958,78413,"akandes_docs/beginner_tutorial.md",153496,2,"    ",markdown,content
959,78444,"akandes_docs/beginner_tutorial.md",153502,3,"    **Answer:**",markdown,content
960,78467,"akandes_docs/beginner_tutorial.md",153519,0,"    As long as the decorator exists.",markdown,content
961,78509,"akandes_docs/beginner_tutorial.md",153557,9,"",markdown,content
961,78509,"akandes_docs/beginner_tutorial.md",153557,9,"",markdown,content
962,78533,"akandes_docs/beginner_tutorial.md",153559,65,"---",markdown,content
963,78579,"akandes_docs/beginner_tutorial.md",153564,14,"",markdown,content
964,78616,"akandes_docs/beginner_tutorial.md",153566,28,"### Scope and Lifetime of Variables",markdown,content
965,78663,"akandes_docs/beginner_tutorial.md",153603,8,"**Explanation:**",markdown,content
966,78936,"akandes_docs/beginner_tutorial.md",153621,8,"Scope determines where a variable can be used. Lifetime is how long a variable exists in memory.",markdown,content
967,79023,"akandes_docs/beginner_tutorial.md",153719,8,"",markdown,content
968,79063,"akandes_docs/beginner_tutorial.md",153721,3,"#### Coding Questions & Answers",markdown,content
969,79112,"akandes_docs/beginner_tutorial.md",153754,20,"##### Q1",markdown,content
970,79151,"akandes_docs/beginner_tutorial.md",153764,3,"**Question:** What is variable scope?",markdown,content
971,79191,"akandes_docs/beginner_tutorial.md",153803,20,"   ",markdown,content
972,79231,"akandes_docs/beginner_tutorial.md",153808,5,"   **Answer:**",markdown,content
973,79409,"akandes_docs/beginner_tutorial.md",153824,5,"   Scope is the part of the program where a variable can be used.",markdown,content
974,79560,"akandes_docs/beginner_tutorial.md",153891,5,"",markdown,content
975,79596,"akandes_docs/beginner_tutorial.md",153893,3,"2. **What is variable lifetime?**",markdown,content
976,79632,"akandes_docs/beginner_tutorial.md",153928,0,"   ",markdown,content
977,79651,"akandes_docs/beginner_tutorial.md",153933,9,"   **Answer:**",markdown,content
978,79694,"akandes_docs/beginner_tutorial.md",153949,75,"   Lifetime is how long a variable exists in memory while the program runs.",markdown,content
979,79719,"akandes_docs/beginner_tutorial.md",154026,14,"",markdown,content
980,79759,"akandes_docs/beginner_tutorial.md",154028,28,"3. **What is a global variable?**",markdown,content
981,79799,"akandes_docs/beginner_tutorial.md",154063,12,"   ",markdown,content
982,79845,"akandes_docs/beginner_tutorial.md",154068,28,"   **Answer:**",markdown,content
983,79878,"akandes_docs/beginner_tutorial.md",154084,5,"   A variable defined outside any function; it can be used anywhere in the file.",markdown,content
984,79896,"akandes_docs/beginner_tutorial.md",154166,23,"",markdown,content
985,79936,"akandes_docs/beginner_tutorial.md",154168,3,"4. **What is a local variable?**",markdown,content
985,79936,"akandes_docs/beginner_tutorial.md",154168,3,"4. **What is a local variable?**",markdown,content
986,79957,"akandes_docs/beginner_tutorial.md",154202,20,"   ",markdown,content
987,80008,"akandes_docs/beginner_tutorial.md",154207,3,"   **Answer:**",markdown,content
988,80053,"akandes_docs/beginner_tutorial.md",154223,10,"   A variable defined inside a function; it can only be used inside that function.",markdown,content
989,80100,"akandes_docs/beginner_tutorial.md",154307,15,"",markdown,content
990,80141,"akandes_docs/beginner_tutorial.md",154309,3,"5. **Can a local variable be used outside its function?**",markdown,content
991,80185,"akandes_docs/beginner_tutorial.md",154368,0,"   ",markdown,content
992,80217,"akandes_docs/beginner_tutorial.md",154373,9,"   **Answer:**",markdown,content
993,80240,"akandes_docs/beginner_tutorial.md",154389,64,"   No, it only exists inside the function.",markdown,content
994,80294,"akandes_docs/beginner_tutorial.md",154433,14,"",markdown,content
995,80316,"akandes_docs/beginner_tutorial.md",154435,24,"6. **Can a global variable be used inside a function?**",markdown,content
996,80354,"akandes_docs/beginner_tutorial.md",154492,26,"   ",markdown,content
997,80378,"akandes_docs/beginner_tutorial.md",154497,3,"   **Answer:**",markdown,content
998,80423,"akandes_docs/beginner_tutorial.md",154513,20,"   Yes, unless a local variable with the same name is defined.",markdown,content
999,80467,"akandes_docs/beginner_tutorial.md",154577,3,"",markdown,content
1000,80495,"akandes_docs/beginner_tutorial.md",154579,12,"7. **What happens if you use a variable before defining it?**",markdown,content
1001,80524,"akandes_docs/beginner_tutorial.md",154642,16,"   ",markdown,content
1002,80570,"akandes_docs/beginner_tutorial.md",154647,3,"   **Answer:**",markdown,content
1003,80594,"akandes_docs/beginner_tutorial.md",154663,0,"   You get an error.",markdown,content
1004,80636,"akandes_docs/beginner_tutorial.md",154685,9,"",markdown,content
1005,80666,"akandes_docs/beginner_tutorial.md",154687,92,"8. **What happens to a local variable after the function ends?**",markdown,content
1005,80666,"akandes_docs/beginner_tutorial.md",154687,92,"8. **What happens to a local variable after the function ends?**",markdown,content
1006,80687,"akandes_docs/beginner_tutorial.md",154753,14,"   ",markdown,content
1007,80723,"akandes_docs/beginner_tutorial.md",154758,31,"   **Answer:**",markdown,content
1008,80747,"akandes_docs/beginner_tutorial.md",154774,17,"   It is destroyed and cannot be used anymore.",markdown,content
1008,80747,"akandes_docs/beginner_tutorial.md",154774,17,"   It is destroyed and cannot be used anymore.",markdown,content
1009,80765,"akandes_docs/beginner_tutorial.md",154822,3,"",markdown,content
1010,80808,"akandes_docs/beginner_tutorial.md",154824,20,"9. **What happens to a global variable after the program ends?**",markdown,content
1011,80836,"akandes_docs/beginner_tutorial.md",154890,3,"   ",markdown,content
1012,80879,"akandes_docs/beginner_tutorial.md",154895,12,"   **Answer:**",markdown,content
1013,80903,"akandes_docs/beginner_tutorial.md",154911,1,"   It is destroyed and memory is freed.",markdown,content
1014,80925,"akandes_docs/beginner_tutorial.md",154952,3,"",markdown,content
1015,80951,"akandes_docs/beginner_tutorial.md",154954,0,"10. **Can two functions have local variables with the same name?**",markdown,content
1016,80994,"akandes_docs/beginner_tutorial.md",155022,9,"    ",markdown,content
1017,81036,"akandes_docs/beginner_tutorial.md",155028,68,"    **Answer:**",markdown,content
1018,81071,"akandes_docs/beginner_tutorial.md",155045,14,"    Yes, each function's local variables are separate.",markdown,content
1019,81093,"akandes_docs/beginner_tutorial.md",155101,22,"",markdown,content
1020,81154,"akandes_docs/beginner_tutorial.md",155103,14,"11. **Can a function change a global variable?**",markdown,content
1021,81183,"akandes_docs/beginner_tutorial.md",155153,3,"    ",markdown,content
1022,81228,"akandes_docs/beginner_tutorial.md",155159,20,"    **Answer:**",markdown,content
1023,81251,"akandes_docs/beginner_tutorial.md",155176,3,"    Yes, if you declare it as global inside the function.",markdown,content
1024,81279,"akandes_docs/beginner_tutorial.md",155235,11,"",markdown,content
1025,81318,"akandes_docs/beginner_tutorial.md",155237,1,"12. **How do you declare a global variable inside a function?**",markdown,content
1026,81345,"akandes_docs/beginner_tutorial.md",155302,3,"    ",markdown,content
1027,81391,"akandes_docs/beginner_tutorial.md",155308,0,"    **Answer:**",markdown,content
1028,81414,"akandes_docs/beginner_tutorial.md",155325,9,"    Use the `global` keyword (if supported).",markdown,content
1029,81441,"akandes_docs/beginner_tutorial.md",155371,72,"",markdown,content
1030,81491,"akandes_docs/beginner_tutorial.md",155373,14,"13. **What is variable shadowing?**",markdown,content
1031,81515,"akandes_docs/beginner_tutorial.md",155410,30,"    ",markdown,content
1032,81561,"akandes_docs/beginner_tutorial.md",155416,28,"    **Answer:**",markdown,content
1033,81580,"akandes_docs/beginner_tutorial.md",155433,3,"    When a local variable has the same name as a global variable, the local one is used inside the function.",markdown,content
1034,81603,"akandes_docs/beginner_tutorial.md",155543,20,"",markdown,content
1035,81650,"akandes_docs/beginner_tutorial.md",155545,3,"14. **What is the scope of a variable defined in a loop?**",markdown,content
1036,81674,"akandes_docs/beginner_tutorial.md",155605,24,"    ",markdown,content
1037,81714,"akandes_docs/beginner_tutorial.md",155611,1,"    **Answer:**",markdown,content
1038,81735,"akandes_docs/beginner_tutorial.md",155628,3,"    Usually, it is accessible in the block where it is defined.",markdown,content
1039,81793,"akandes_docs/beginner_tutorial.md",155695,9,"15. **What is the scope of a variable defined in an if statement?**",markdown,content
1040,81867,"akandes_docs/beginner_tutorial.md",155764,69,"    ",markdown,content
1041,82180,"akandes_docs/beginner_tutorial.md",155770,14,"    **Answer:**",markdown,content
1042,82324,"akandes_docs/beginner_tutorial.md",155787,28,"    Usually, it is accessible in the block where it is defined.",markdown,content
1042,82324,"akandes_docs/beginner_tutorial.md",155787,28,"    Usually, it is accessible in the block where it is defined.",markdown,content
1042,82324,"akandes_docs/beginner_tutorial.md",155787,28,"    Usually, it is accessible in the block where it is defined.",markdown,content
1043,82349,"akandes_docs/beginner_tutorial.md",155852,15,"",markdown,content
1044,82377,"akandes_docs/beginner_tutorial.md",155854,3,"16. **What is the lifetime of a variable defined in a function?**",markdown,content
1045,82409,"akandes_docs/beginner_tutorial.md",155921,20,"    ",markdown,content
1046,82446,"akandes_docs/beginner_tutorial.md",155927,3,"    **Answer:**",markdown,content
1047,82475,"akandes_docs/beginner_tutorial.md",155944,10,"    From when the function starts until it ends.",markdown,content
1048,82502,"akandes_docs/beginner_tutorial.md",155994,1,"",markdown,content
1049,82530,"akandes_docs/beginner_tutorial.md",155996,3,"17. **What is the lifetime of a global variable?**",markdown,content
1050,82563,"akandes_docs/beginner_tutorial.md",156048,0,"    ",markdown,content
1051,82585,"akandes_docs/beginner_tutorial.md",156054,9,"    **Answer:**",markdown,content
1052,82655,"akandes_docs/beginner_tutorial.md",156071,64,"    From when it is defined until the program ends.",markdown,content
1053,82692,"akandes_docs/beginner_tutorial.md",156124,14,"",markdown,content
1054,82716,"akandes_docs/beginner_tutorial.md",156126,21,"18. **Can you have a variable with the same name in different scopes?**",markdown,content
1055,82771,"akandes_docs/beginner_tutorial.md",156199,14,"    ",markdown,content
1056,82846,"akandes_docs/beginner_tutorial.md",156205,3,"    **Answer:**",markdown,content
1057,83150,"akandes_docs/beginner_tutorial.md",156222,20,"    Yes, but they are different variables.",markdown,content
1058,83192,"akandes_docs/beginner_tutorial.md",156266,3,"",markdown,content
1059,83254,"akandes_docs/beginner_tutorial.md",156268,14,"19. **What is a block scope?**",markdown,content
1060,83283,"akandes_docs/beginner_tutorial.md",156300,6,"    ",markdown,content
1061,83314,"akandes_docs/beginner_tutorial.md",156306,3,"    **Answer:**",markdown,content
1062,83341,"akandes_docs/beginner_tutorial.md",156323,0,"    The area inside curly braces `{}` or indentation where a variable is defined.",markdown,content
1063,83399,"akandes_docs/beginner_tutorial.md",156406,9,"",markdown,content
1064,83426,"akandes_docs/beginner_tutorial.md",156408,79,"20. **What is a function scope?**",markdown,content
1065,83475,"akandes_docs/beginner_tutorial.md",156443,14,"    ",markdown,content
1066,83496,"akandes_docs/beginner_tutorial.md",156449,26,"    **Answer:**",markdown,content
1067,83524,"akandes_docs/beginner_tutorial.md",156466,38,"    The area inside a function definition.",markdown,content
1068,83544,"akandes_docs/beginner_tutorial.md",156510,3,"",markdown,content
1069,83590,"akandes_docs/beginner_tutorial.md",156512,20,"21. **What is the difference between local and global scope?**",markdown,content
1070,83612,"akandes_docs/beginner_tutorial.md",156576,3,"    ",markdown,content
1071,83630,"akandes_docs/beginner_tutorial.md",156582,9,"    **Answer:**",markdown,content
1071,83630,"akandes_docs/beginner_tutorial.md",156582,9,"    **Answer:**",markdown,content
1072,83654,"akandes_docs/beginner_tutorial.md",156599,4,"    Local scope is inside a function; global scope is outside all functions.",markdown,content
1073,83693,"akandes_docs/beginner_tutorial.md",156677,3,"",markdown,content
1074,83719,"akandes_docs/beginner_tutorial.md",156679,0,"22. **Can a variable be both local and global?**",markdown,content
1075,83740,"akandes_docs/beginner_tutorial.md",156729,9,"    ",markdown,content
1076,83762,"akandes_docs/beginner_tutorial.md",156735,61,"    **Answer:**",markdown,content
1076,83762,"akandes_docs/beginner_tutorial.md",156735,61,"    **Answer:**",markdown,content
1077,83782,"akandes_docs/beginner_tutorial.md",156752,14,"    No, it is either local or global in a given context.",markdown,content
1078,83803,"akandes_docs/beginner_tutorial.md",156810,22,"",markdown,content
1079,83849,"akandes_docs/beginner_tutorial.md",156812,16,"23. **What happens if you change a global variable inside a function without declaring it global?**",markdown,content
1080,83869,"akandes_docs/beginner_tutorial.md",156913,3,"    ",markdown,content
1081,83888,"akandes_docs/beginner_tutorial.md",156919,20,"    **Answer:**",markdown,content
1082,83935,"akandes_docs/beginner_tutorial.md",156936,3,"    It creates a new local variable with the same name.",markdown,content
1083,83963,"akandes_docs/beginner_tutorial.md",156993,11,"",markdown,content
1084,83982,"akandes_docs/beginner_tutorial.md",156995,1,"24. **How do you access a global variable inside a function?**",markdown,content
1085,84004,"akandes_docs/beginner_tutorial.md",157059,3,"    ",markdown,content
1086,84024,"akandes_docs/beginner_tutorial.md",157065,0,"    **Answer:**",markdown,content
1087,84049,"akandes_docs/beginner_tutorial.md",157082,9,"    Just use its name, unless a local variable with the same name exists.",markdown,content
1088,84073,"akandes_docs/beginner_tutorial.md",157157,76,"",markdown,content
1089,84091,"akandes_docs/beginner_tutorial.md",157159,14,"25. **What is the scope of a variable defined in a for loop?**",markdown,content
1089,84091,"akandes_docs/beginner_tutorial.md",157159,14,"25. **What is the scope of a variable defined in a for loop?**",markdown,content
1089,84091,"akandes_docs/beginner_tutorial.md",157159,14,"25. **What is the scope of a variable defined in a for loop?**",markdown,content
1090,84105,"akandes_docs/beginner_tutorial.md",157223,11,"    ",markdown,content
1090,84105,"akandes_docs/beginner_tutorial.md",157223,11,"    ",markdown,content
1091,84121,"akandes_docs/beginner_tutorial.md",157229,26,"    **Answer:**",markdown,content
1091,84121,"akandes_docs/beginner_tutorial.md",157229,26,"    **Answer:**",markdown,content
1091,84121,"akandes_docs/beginner_tutorial.md",157229,26,"    **Answer:**",markdown,content
1091,84121,"akandes_docs/beginner_tutorial.md",157229,26,"    **Answer:**",markdown,content
1092,84141,"akandes_docs/beginner_tutorial.md",157246,26,"    It is usually accessible after the loop ends (unless block scope is enforced).",markdown,content
1092,84141,"akandes_docs/beginner_tutorial.md",157246,26,"    It is usually accessible after the loop ends (unless block scope is enforced).",markdown,content
1092,84141,"akandes_docs/beginner_tutorial.md",157246,26,"    It is usually accessible after the loop ends (unless block scope is enforced).",markdown,content
1093,84159,"akandes_docs/beginner_tutorial.md",157330,3,"",markdown,content
1094,84168,"akandes_docs/beginner_tutorial.md",157332,20,"26. **What is the scope of a variable defined in an if block?**",markdown,content
1094,84168,"akandes_docs/beginner_tutorial.md",157332,20,"26. **What is the scope of a variable defined in an if block?**",markdown,content
1094,84168,"akandes_docs/beginner_tutorial.md",157332,20,"26. **What is the scope of a variable defined in an if block?**",markdown,content
1095,84177,"akandes_docs/beginner_tutorial.md",157397,3,"    ",markdown,content
1097,84203,"akandes_docs/beginner_tutorial.md",157420,1,"    It is usually accessible after the block ends (unless block scope is enforced).",markdown,content
1098,84213,"akandes_docs/beginner_tutorial.md",157505,3,"",markdown,content
1096,84191,"akandes_docs/beginner_tutorial.md",157403,10,"    **Answer:**",markdown,content
1098,84213,"akandes_docs/beginner_tutorial.md",157505,3,"",markdown,content
1098,84213,"akandes_docs/beginner_tutorial.md",157505,3,"",markdown,content
1098,84213,"akandes_docs/beginner_tutorial.md",157505,3,"",markdown,content
1098,84213,"akandes_docs/beginner_tutorial.md",157505,3,"",markdown,content
1099,84223,"akandes_docs/beginner_tutorial.md",157507,0,"27. **What is the lifetime of a variable defined in a function?**",markdown,content
1100,84234,"akandes_docs/beginner_tutorial.md",157574,9,"    ",markdown,content
1101,84242,"akandes_docs/beginner_tutorial.md",157580,64,"    **Answer:**",markdown,content
1101,84242,"akandes_docs/beginner_tutorial.md",157580,64,"    **Answer:**",markdown,content
1101,84242,"akandes_docs/beginner_tutorial.md",157580,64,"    **Answer:**",markdown,content
1101,84242,"akandes_docs/beginner_tutorial.md",157580,64,"    **Answer:**",markdown,content
1101,84242,"akandes_docs/beginner_tutorial.md",157580,64,"    **Answer:**",markdown,content
1102,84255,"akandes_docs/beginner_tutorial.md",157597,14,"    From when the function is called until it ends.",markdown,content
1104,84288,"akandes_docs/beginner_tutorial.md",157652,19,"28. **What is the lifetime of a global variable?**",markdown,content
1103,84266,"akandes_docs/beginner_tutorial.md",157650,22,"",markdown,content
1105,84301,"akandes_docs/beginner_tutorial.md",157704,3,"    ",markdown,content
1105,84301,"akandes_docs/beginner_tutorial.md",157704,3,"    ",markdown,content
1105,84301,"akandes_docs/beginner_tutorial.md",157704,3,"    ",markdown,content
1105,84301,"akandes_docs/beginner_tutorial.md",157704,3,"    ",markdown,content
1105,84301,"akandes_docs/beginner_tutorial.md",157704,3,"    ",markdown,content
1105,84301,"akandes_docs/beginner_tutorial.md",157704,3,"    ",markdown,content
1107,84328,"akandes_docs/beginner_tutorial.md",157727,3,"    As long as the program runs.",markdown,content
1108,84343,"akandes_docs/beginner_tutorial.md",157761,11,"",markdown,content
1106,84316,"akandes_docs/beginner_tutorial.md",157710,20,"    **Answer:**",markdown,content
1109,84353,"akandes_docs/beginner_tutorial.md",157763,5,"29. **Can a variable be both a parameter and a local variable?**",markdown,content
1111,84372,"akandes_docs/beginner_tutorial.md",157835,0,"    **Answer:**",markdown,content
1110,84361,"akandes_docs/beginner_tutorial.md",157829,3,"    ",markdown,content
1112,84382,"akandes_docs/beginner_tutorial.md",157852,9,"    Yes, but the parameter takes precedence inside the function.",markdown,content
1113,84396,"akandes_docs/beginner_tutorial.md",157918,116,"",markdown,content
1114,84416,"akandes_docs/beginner_tutorial.md",157920,14,"30. **What is the scope of a variable defined in a list comprehension?**",markdown,content
1114,84416,"akandes_docs/beginner_tutorial.md",157920,14,"30. **What is the scope of a variable defined in a list comprehension?**",markdown,content
1114,84416,"akandes_docs/beginner_tutorial.md",157920,14,"30. **What is the scope of a variable defined in a list comprehension?**",markdown,content
1115,84436,"akandes_docs/beginner_tutorial.md",157994,26,"    ",markdown,content
1116,84449,"akandes_docs/beginner_tutorial.md",158000,9,"    **Answer:**",markdown,content
1117,84463,"akandes_docs/beginner_tutorial.md",158017,21,"    It is local to the comprehension.",markdown,content
1117,84463,"akandes_docs/beginner_tutorial.md",158017,21,"    It is local to the comprehension.",markdown,content
1117,84463,"akandes_docs/beginner_tutorial.md",158017,21,"    It is local to the comprehension.",markdown,content
1118,84473,"akandes_docs/beginner_tutorial.md",158056,11,"",markdown,content
1119,84482,"akandes_docs/beginner_tutorial.md",158058,21,"31. **What is the lifetime of a variable defined in a list comprehension?**",markdown,content
1120,84492,"akandes_docs/beginner_tutorial.md",158135,5,"    ",markdown,content
1120,84492,"akandes_docs/beginner_tutorial.md",158135,5,"    ",markdown,content
1120,84492,"akandes_docs/beginner_tutorial.md",158135,5,"    ",markdown,content
1121,84503,"akandes_docs/beginner_tutorial.md",158141,17,"    **Answer:**",markdown,content
1122,84518,"akandes_docs/beginner_tutorial.md",158158,3,"    It exists only during the comprehension's execution.",markdown,content
1123,84532,"akandes_docs/beginner_tutorial.md",158216,20,"",markdown,content
1123,84532,"akandes_docs/beginner_tutorial.md",158216,20,"",markdown,content
1124,84541,"akandes_docs/beginner_tutorial.md",158218,3,"32. **What is the scope of a variable defined in a generator expression?**",markdown,content
1125,84562,"akandes_docs/beginner_tutorial.md",158294,9,"    ",markdown,content
1126,84573,"akandes_docs/beginner_tutorial.md",158300,4,"    **Answer:**",markdown,content
1126,84573,"akandes_docs/beginner_tutorial.md",158300,4,"    **Answer:**",markdown,content
1127,84582,"akandes_docs/beginner_tutorial.md",158317,3,"    It is local to the generator expression.",markdown,content
1128,84592,"akandes_docs/beginner_tutorial.md",158365,9,"33. **What is the lifetime of a variable defined in a generator expression?**",markdown,content
1128,84592,"akandes_docs/beginner_tutorial.md",158365,9,"33. **What is the lifetime of a variable defined in a generator expression?**",markdown,content
1129,84603,"akandes_docs/beginner_tutorial.md",158444,69,"    ",markdown,content
1130,84615,"akandes_docs/beginner_tutorial.md",158450,14,"    **Answer:**",markdown,content
1130,84615,"akandes_docs/beginner_tutorial.md",158450,14,"    **Answer:**",markdown,content
1131,84636,"akandes_docs/beginner_tutorial.md",158467,21,"    It exists only during the generator's execution.",markdown,content
1132,84786,"akandes_docs/beginner_tutorial.md",158521,12,"",markdown,content
1132,84786,"akandes_docs/beginner_tutorial.md",158521,12,"",markdown,content
1132,84786,"akandes_docs/beginner_tutorial.md",158521,12,"",markdown,content
1132,84786,"akandes_docs/beginner_tutorial.md",158521,12,"",markdown,content
1132,84786,"akandes_docs/beginner_tutorial.md",158521,12,"",markdown,content
1132,84786,"akandes_docs/beginner_tutorial.md",158521,12,"",markdown,content
1132,84786,"akandes_docs/beginner_tutorial.md",158521,12,"",markdown,content
1133,84800,"akandes_docs/beginner_tutorial.md",158523,3,"34. **What is the scope of a variable defined in a try/finally block?**",markdown,content
1134,84809,"akandes_docs/beginner_tutorial.md",158596,20,"    ",markdown,content
1135,84826,"akandes_docs/beginner_tutorial.md",158602,3,"    **Answer:**",markdown,content
1136,84841,"akandes_docs/beginner_tutorial.md",158619,14,"    It is accessible after the block ends.",markdown,content
1136,84841,"akandes_docs/beginner_tutorial.md",158619,14,"    It is accessible after the block ends.",markdown,content
1137,84854,"akandes_docs/beginner_tutorial.md",158663,1,"",markdown,content
1139,84894,"akandes_docs/beginner_tutorial.md",158741,0,"    ",markdown,content
1138,84868,"akandes_docs/beginner_tutorial.md",158665,3,"35. **What is the lifetime of a variable defined in a try/finally block?**",markdown,content
1139,84894,"akandes_docs/beginner_tutorial.md",158741,0,"    ",markdown,content
1140,84909,"akandes_docs/beginner_tutorial.md",158747,9,"    **Answer:**",markdown,content
1141,84959,"akandes_docs/beginner_tutorial.md",158764,81,"    From when the block starts until it ends.",markdown,content
1142,85000,"akandes_docs/beginner_tutorial.md",158811,14,"",markdown,content
1143,85024,"akandes_docs/beginner_tutorial.md",158813,26,"36. **What is the scope of a variable defined in a with block?**",markdown,content
1144,85100,"akandes_docs/beginner_tutorial.md",158879,12,"    ",markdown,content
1145,85128,"akandes_docs/beginner_tutorial.md",158885,3,"    **Answer:**",markdown,content
1146,85154,"akandes_docs/beginner_tutorial.md",158902,20,"    It is accessible after the block ends.",markdown,content
1147,85178,"akandes_docs/beginner_tutorial.md",158946,3,"",markdown,content
1148,85204,"akandes_docs/beginner_tutorial.md",158948,9,"37. **What is the lifetime of a variable defined in a with block?**",markdown,content
1149,85224,"akandes_docs/beginner_tutorial.md",159017,3,"    ",markdown,content
1150,85258,"akandes_docs/beginner_tutorial.md",159023,3,"    **Answer:**",markdown,content
1151,85300,"akandes_docs/beginner_tutorial.md",159040,0,"    From when the block starts until it ends.",markdown,content
1152,85326,"akandes_docs/beginner_tutorial.md",159087,9,"",markdown,content
1153,85347,"akandes_docs/beginner_tutorial.md",159089,88,"38. **What is the scope of a variable defined in a case block (if supported)?**",markdown,content
1154,85375,"akandes_docs/beginner_tutorial.md",159170,14,"    ",markdown,content
